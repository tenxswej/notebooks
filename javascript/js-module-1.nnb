{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "# curriculum\r\n\r\n- [Data types](#data-types)\r\n- [Operators](#all-operators)\r\n- [Condition statements](#condition-statements)\r\n- [Functions](#functions)\r\n- [Arrays](#arrays)\r\n- [Loops & Iterations](#loops)\r\n- [Objects](#objects)\r\n- [String methods](#string-methods)\r\n- [Array methods](#array-methods)\r\n- [Built in utility objects](#built-in-utility-objects)\r\n- [Coding challenges](#test-your-javascript-skill-by-solving-the-following-problems)"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "<div align=\"center\"><h1>Javascript Practical<h1><p>Module-1</P></div>"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# What and Why data types\r\n\r\n**Programming language** ဆိုတဲ့ အဆောက်အဦးတစ်ခုထဲကိုဝင်ဖို့ **data types** ဆိုတဲ့ ဝင်ပေါက်ကနေစဝင်ရပါတယ်။ တကယ့် လက်တွေ့မှာလဲ software တစ်ခု, computer program တစ်ခုဆိုတာ တူညီတဲ့၊ မတူညီတဲ့ data types တွေ တစ်ခုနဲ့တစ်ခု ချိတ်ဆက် ဆောင်ရွက်ပြီး၊ သူတို့ရဲ့ ကိုယ်ပိုင် property တွေ၊ ကိုယ်ပိုင် method တွေကိုအသုံးပြုပြီးတော့ ခိုင်းစေထားတဲ့ task တွေကိုဆောင်ရွက်နေကြတာကို programming လို့ခေါ်တာပါ။ \r\n\r\na ဆိုတဲ့ data type တစ်ခုရဲ့စွမ်း‌ဆောင်ပုံနဲ့က b ဆိုတဲ့ data type တစ်ခုရဲ့ စွမ်း‌ဆောင်ပုံနဲ့မတူဘူး၊ အလုပ်လုပ်ပုံမတူဘူး၊ ကိုယ်ပိုင်ကျင့်သုံးတဲ့ method နည်းလမ်းတွေမတူဘူး၊ သို့သော် သူတို့ ၂ ခုက အပြန်လှန် ဆက်နွယ်၊ ချိတ်ဆက် ပြီးတော့ တာဝန်တစ်ခုကို ပြီးမြောက်အောင်တော့ဆောင်ရွက်နိုင်တယ်။\r\n\r\nဘယ်လိုဆောင်ရွက်လဲဆိုတော့, program တစ်ခုကိုစလိုက်တာနဲ့ တစ်ပြိုင်နက် data type တစ်ခုခုရှိတဲ့ **a** ဆိုတဲ့ variable လေးတစ်ခုရှိမယ်ဆိုပါစို့၊ အဲဒီ **a** ဆိုတဲ့ ဟာလေးပေါ်မူတည်ပြီးတော့ အခြေအနေတစ်ခုမှာ **b** ဆိုတဲ့ဟာလေးက သူ့ရဲ့ကိုယ်ပိုင် method တစ်ခုကိုသုံးပြီး အလုပ်တစ်ခုကိုလုပ်လိုက်မယ်၊ အဲလိုလုပ်လိုက်လို့ ရလဒ်အနေနဲ့ **c** ဆိုတဲ့ အခြား data type ရှိတဲ့ တန်ဖိုးလေးတစ်ခု ထွက်လာမယ်၊ အဲလို ထွက်လာတဲ့ **c** ဆိုတဲ့ဟာလေးမှာလဲ သူ့ကိုယ်ပိုင် ကျင့်သုံးတဲ့ method, စွမ်းဆောင်ရည်တွေ ရှိနေမှာပဲ၊ ဒါမှမဟုတ် a သို့မဟုတ် b တစ်ခုခုနဲ့ data type ချင်းတူရင် c မှာ သုံးလို့ရတဲ့ method တွေချင်း, property ချင်းတူညီချင်းတူမှာပါ၊ အဲဒါတွေကို အသုံးချပြီး သူကနေတစ်ဆင့် သက်မှတ်ထားတဲ့ \r\nတာဝန်တစ်ခုမပြီးမခြင်း၊ တစ်ဆင့်ပြီးတစ်ဆင့် ဆင့်ပွားအခြား အလုပ်တွေကို ဆက်တိုက်ပြုလုပ်သွား ပြုလုပ်သွားတာတွေက program တစ်ခုကို execute လိုက်တာရဲ့နောက်ကွယ်က အရာတွေပါ။ \r\n<br/>\r\nအပေါ်က ဥပမာထဲမှာ a နဲ့ b က data type ခြင်းမတူတဲ့အတွက် a မှာ အသုံးပြုတဲ့ ကိုယ်ပိုင် method တစ်ခုကို b မှာသွားသုံးလို့မရပါဘူး၊ သွားသုံးရင် error တက်မှာဖြစ်တယ်။ ဒါပေမယ့် a နဲ့ b က အပြန်အလှန် အခြေအနေတွေအရ ပေါင်းစပ်သင့်ရင်ပေါင်းစပ်ပြီး အလုပ်တွေတော့ အတူတွဲလုပ်လို့တော့ရပါတယ်။\r\n\r\nဆိုတော့... Programmer တစ်ယောက်အနေနဲ့ အဲလို program တွေကို ခိုင်းစေဖို့ကို data types တွေကိုသိဖို့ဆိုတာ အခြေခံအကျဆုံးလိုအပ်ချက်ပါ။\r\n\r\nဒါကြောင့် data types တွေဆိုတာအလွယ်ဆုံးအပိုင်းမို့လို့ အခြေခံကနေစလေ့လာရတဲ့ အရာမျိုးလုံးဝမဟုတ်ပဲ၊ သူတို့ကိုနားလည်မှသာ program တစ်ခုကိုစရေးနိုင်မှာမို့ အလွန်အရေးကြီး တာကြောင့် အစောဆုံးအနေနဲ့ စလေ့လာရတာပါ။\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "\r\n\r\n# Data types\r\nJavascript မှာ dat types တွေကို ၂ မျိုးခွဲခြားနိုင်ပါတယ်။\r\n\r\n1) Primitive types\r\n    - computer memory ထဲမှာ ပုံသေ တစ်ခုစီ သိမ်းဆည်းထားတဲ့ data type တွေဖြစ်တယ်။ ဥပမာ a = 1 ဆိုရင် a က 1 နဲ့ညီတယ်လို့ဆိုလိုတာမဟုတ်ပဲ၊ a ဆိုတဲ့ variable လေးရဲ့ အထဲမှာ 1 ဆိုတဲ့ တန်ဖိုးလေးတစ်ခုကို သိမ်းထားတယ်လို့ဆိုတာပါ။ <br/>\r\n    primitive data types တွေလို့ခေါ်ရတဲ့အကြောင်းအရင်းက သူတို့က computing မှာအမြဲ မရှိမဖြစ်ပါဝင်နေတဲ့ data types တွေဖြစ်တာကြောင့်ရယ် <br/>\r\n    နောက်တစ်ချက်က သူတို့ကို အခြားသော data types တွေကနေ ဖွဲ့စည်းထားတာမျိုးမဟုတ်ပဲ၊ သူတို့ဘာသာ သီးခြားတည်ရှိ နေတာကြောင့်ဖြစ်ပါတယ်။ \r\n     \r\n\r\n2) Reference types\r\n    - သူတို့က data type ရယ်လို့တိုက်ရိုက်ကြီး မဟုတ်ပဲ data structure တစ်ခုလို့ပြောလို့လဲရပါတယ်။ ဘာကြောင့်ဆို reference data types တော်တော်များများက သူတို့ထဲမှာ အခြားသော မတူညီတဲ့ data types တွေများစွာကို တစ်စုတည်းသိမ်းဆည်းနိုင်လို့ပါ။ အပေါ်မှာ ပြောခဲ့တဲ့ အတိုင်း primitive data types တွေနဲ့ကွာခြားချက်က reference data types တွေဟာ အခြားသော data types တွေနဲ့ ဖွဲ့စည်းထားတာပါ၊ အဲလိုဖွဲ့စည်းချိန်မှာ memory ထဲက တန်ဖိုးတွေကို တိုက်ရိုက်သိမ်းဆည်းထားတာမျိုးမဟုတ်ပဲ သူတို့ရဲ့ memory reference (_in another word_ **location in memory**) ကိုသာ သိမ်းတာကြောင့် reference data types တွေလို့ခေါ်တာပါ။\r\n\r\n\r\n<h2 align=\"center\"><b>Primitive data types</b> </h2> \r\n\r\n- **string**\r\n    - string literal လို့ခေါ်တဲ့ **double or single quote** ထဲက character တွေစုထားတဲ့ အစုတစ်စုကို  string လို့သက်မှတ်ပါတယ်-> \"hello\", 'world'\r\n    - string တွေက default အားဖြင့် multi line ရေးလို့မရပါဘူး၊\r\n    - ရေးချင်ရင် batik လို့ခေါ်တဲ့ `` <-ဒါလေးကို ကိုအသုံးပြုရပါတယ်။ data type အတူတူပဲဖြစ်ပါတယ်။ syntax ပဲကွဲသွားတာပါ။ \"\" အထဲမှာ ဘာမှမရေးထားရင် empty string လို့ခါ်ပါတယ်။ data type ကလဲ string ပါပဲ။\r\n\r\n- **boolean**\r\n    - **true** or **false** တန်ဖိုး ၂ မျိုးကို **boolean data type** လို့သတ်မှတ်ပါတယ်။\r\n    - boolean မှာတော့ string နဲ့ အခြား data type တွေမှာလို literal syntax မလိုပဲ တိုက်ရိုက် ‌ရေးလို့ရပါတယ်\r\n    - **true** or **false**\r\n\r\n- **number**\r\n    - javascriptမှာတော့ + or - ကိန်းဂဏန်းအားလုံးကို number လို့သတ်မှတ်ပါတယ်, integer လို့ခေါ်တဲ့ ကိန်းပြည့်တွေ, non-integer or floating point number ဒသာမကိန်းတွေက number data type ထဲမှာဝင်ပါတယ်၊\r\n    - သို့သော် integer တစ်ခုက number data type လို့သတ်မှတ်ခံရဖို့ safe integer precision range လို့ခေါ်တဲ့ သတ်မှတ်ချက်တစ်ခုအတွင်းမှာတော့ရှိရပါမယ်။\r\n    - safe integer limit လို့ခေါ်တဲ့ \"plus or minus two power 53\" (±2^53 - 1) အတွင်း မကျော်တဲ့ **integer** ကိန်းဂဏန်းစုအားလုံးကို **number data type** အဖြစ်သတ်မှတ်ပါတယ်။\r\n    - ဆိုလိုတာက -9007199254740991 ကနေ 9007199254740991 အထိက integer တွေက number data type တွေဖြစ်ပါတယ်။\r\n    > (2 ** 53 လို့ console မှာ စစ်ကြည့်နိုင်ပါတယ်)။\r\n\r\n- **BingInt**\r\n    - safe integer limit ‌ကျော်လွန်သွားတဲ့ integer တစ်ခုက **BigInt data type** တစ်ခုဖြစ်လာပါတယ်။\r\n    - ±9007199254740991 ထက်ကျော်သွားရင် BigInt data type ဖြစ်သွားပါတယ်။\r\n    - လက်တွေ့မှာ တော့ အင်မတန် ရှည်လွန်းတဲ့ number တွေကို string တွေအဖြစ် သိမ်းရင်သိမ်း မသိမ်းရင်၊ ကိုယ်ပိုင် package or library တစ်ခုခုဖန်တီးပြီး handle လုပ်ကြပါတယ်။ ထိမ်းသိန်းရခက်တဲ့ data type တစ်ခုဖြစ်လို့ လက်တွေ့မှာတော့ number data type တွေထက်အသုံးနည်းပါတယ်။\r\n    - BigInt အတွက် literal syntax မရှိလို့ BigInt လို့ရေးရပါတယ်။\r\n\r\n- **null**\r\n    - javascript မှာ intentionally လုံးဝ တန်ဖိုးကင်းမဲ့နေတဲ့ value တစ်ခုဖြစ်ပါတယ်။\r\n\r\n- **undefined**\r\n    - javascript မှာ data တိုင်းက သူတို့ရဲ့ သက်ဆိုင်ရာ တန်ဖိုးတွေ မရှိသေးခင် default value က undefined ဖြစ်ပါတယ်။\r\n    - အဲတာဆို null နဲ့ undefined က ဘာမှမရှိတာခြင်းအတူတူ ဘယ်လိုကွာလဲပေါ့..\r\n    - undefined ကသေတ္တာအလွတ်တစ်လုံးနဲ့တူပါတယ်၊ သေတ္တာအလွတ်ဆိုတာတကယ်တော့ variable တစ်ခုပေါ့ သူ့ကို ဖန်တီးပြီးတော့ သူ့ထဲကိုတော့ ဘာမှလာမထည့်ရသေးတဲ့ သဘောပါ\r\n    - javascript မှာကတကယ်တော့ variable တစ်ခုကို ဖန်တီးပြီး သူ့ထဲမှာ ဘာမှလာမထည့်ရသေးရင် အဲဒီ့ variable ရဲ့ default တန်ဖိုးက undefined ဖြစ်ပါတယ်။\r\n    - null ကတော့ သေတ္တာဆိုတဲ့ဟာတောင်ရှိမနေတာမျိုး၊ လုံးဝ ဘာမှမရှိတဲ့မျိုးကိုဆိုလိုတာပါ၊\r\n\r\n- **Symbols**\r\n    - Javascript ES6 2015 မှာမှ new primitive data types lineup ထဲကို အသစ်တစ်ခုအနေနဲ့ စပါလာလာတဲ့ data type အမျိုးအစားတစ်ခုဖြစ်ပါတယ်။ သူ့ရဲ့ တစ်ခုတည်းသော တည်ရှိရခြင်း ရည်ရွယ်ချက်က **Object** တွေမှာ unique identifier အတွက်အသုံးပြုဖို့ပဲဖြစ်ပါတယ်။ Symbol တွေမှာလဲ literal syntax မရှိလို့ Symbol လို့ပဲရေးရပါတယ်။\r\n\r\n    ```js\r\n        Symbol(\"hello I'm a symbol\")\r\n    ```"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "<p style=\"color: gray; font-size:20px; text-align:center;\">If you have any difficulties understanding for some technical terms, please do not worry, <br/> they are all covered in details in the upcoming sections</p>"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "<h2 align=\"center\"><b>Reference data types</b> </h2> \r\n\r\n- **Array**\r\n    - array တွေဆိုတာ မတူညီတဲ့ data types တွေများစွာကို တစ်ခုတည်းမှာ သိမ်းဆည်းလို့ရတဲ့၊ javascript မှာ built-in ပါဝင်တဲ့ data structure တစ်ခုဖြစ်ပါတယ်။ array တွေဆိုတာ data structure တွေထဲမှာတော့လုံးဝ ကို ဆရာကြီးပါပဲ! ဘာလို့ဆိုတော့ ဘယ်နေရာရောက်ရောက် သူတို့နဲ့ အမြဲတွေ့နေမှာမို့ပါ။ \r\n    array တစ်ခုကို ဖန်တီးဖို့ syntax literal for array ကတော့ ထောင့်ကွင်း [] ၂ ခုနဲ့ ရေးရပါတယ်။\r\n\r\n    ```js\r\n    [1,2,3,4,5, \"hello\", \"world\", true, false, \"hello\"]\r\n    ```\r\n\r\n\r\n- **Object**\r\n    - Object တွေဆိုတာကလဲ မတူညီတဲ့ data types တွေများစွာကို တစ်စုတစ်စည်းတည်းသိုလှောင် လို့ရတဲ့ နောက်ထပ် data structure (data type) တစ်မျိုးပါ၊ ဒါပေမယ့် array တွေနဲ့ ကွာခြားပါတယ်၊ object တွေက **key-value** pair ပုံစံကို သုံးပြီး data တွေကို သိမ်းဆည်းတယ်၊ method တွေ custom တည်ဆောက်လို့ရတယ်၊ global keyword တွေနဲ့ပတ်သက်နေတယ်၊ မွေးစား object တွေဖန်တီးလို့ရတယ်။ အစရှိတဲ့ အရေးကြီးတဲ့ feature တွေအပြင် အခြား အရာတွေလဲများစွာရှိပါသေးတယ်၊ object တစ်ခုကို ဖန်တီးဖို့ object literal လို့ခေါ်တဲ့ {} တွန့်ကွင်းကို အသုံးပြုနိုင်ပါတယ်၊\r\n\r\n    ```js\r\n        {name : \"Joe Biden\", age : 18, isPresident : true}\r\n    ```\r\n\r\n\r\n- **Functions**\r\n    - function တွေကလဲ data type အမျိုးအစားတစ်ခု ဖြစ်ပါတယ်၊ သူတို့ကတော့ data တွေသိမ်းဆည်းတဲ့ အလုပ်အပြင်, ထုတ်လုပ်ပေးတဲ့ အလုပ်ကိုပါ လုပ်ကြပါတယ်။ အမျာအားဖြင့်တော့ သိမ်းတာထက် ထုတ်လုတ်ပေးတာကိုပဲ အများဆုံးလုပ်ပေးတာပါ။ function တွေဆိုတာက အလွန်အင်မတန်အရေးကြီး တာကြောင့် အချိန်ပေး လေ့လာသင့်တဲ့အရာတွေဖြစ်ပါတယ်။ javascript မှာ function တွေကိုဖန်တီးတဲ့ ပုံစံတွေက ၁ ခုထက်ပိုရှိပါတယ်။ အောက်က ဥပမာလေးမှာတော့ function ဆိုတဲ့ keyword ကိုသုံးပြီး ဖန်တီးပြထားတာပါ။\r\n\r\n    ```js\r\n    function someFunction(){\r\n        //\r\n    }\r\n    ```\r\n\r\n- **Set**\r\n    - Set တွေက array တွေလိုပဲ ဒါပေမယ့် သူက unique ဖြစ်တဲ့ data တွေကိုပဲ သိမ်းပါတယ်။ array တွေမှာလို တန်ဖိုးတူ duplicate values တွေကို ထပ်ခါထပ်ခါ မသိမ်းပါဘူး။ နောက်ပြီးတော့ Set တွေက array တွေကနေ duplicate တွေဖယ်ထုတ်ချင်တဲ့အခါမျိုးတွေဆို array တွေနဲ့ သဟဇာတဖြစ်ဖြစ် တွဲသုံးလေ့ရှိပါတယ်။ သူ့မှာ literal syntax မရှိပါဘူး၊ ဒါကြောင့် set တစ်ခုကို ဖန်တီးရင် အချက် ၃ ချက်လိုပါတယ်၊ \r\n\r\n    - ပထမကတော့ constructor function တစ်ခုရဲ့  syntax အတိုင်း new ဆိုတဲ့ keyword လေးရယ်\r\n    - သူ့နောက်က constructor function ဖြစ်တဲ့ Set ရယ်၊ \r\n    - သူ့ထဲမှာ iterable ဖြစ်တဲ့ တခြား data တစ်ခုရယ် အစရှိသဖြင့် အဆင့် ၃ ဆင့် နဲ့ ဖန်တီးရပါတယ်။\r\n    \r\n        _ခုထဲမှာ နားမလည်လောက်စရာတွေ ဖြစ်တဲ့ constructor function တို့, iterable တို့ကို ခေါင်းရှုပ်ခံစဥ်းစား မခံစေလိုပါ။ သူတို့က ဒီ မှာ မပါသေးတာကြောင့် ကြားဖူးနားဝ knowledge အနေနဲ့ပဲမှတ်ထားပါဦးနော်!_\r\n\r\n    ```js\r\n    // no duplicate values were accepted like array above\r\n    new Set([1,2,3, \"hello\", true, false])\r\n    ```\r\n\r\n- **Map**\r\n    - Map တွေကလဲ ပုံမှန် objet တွေနဲ့ အ‌ပေါ်ယံအားဖြင့် ဆင်တူပါတယ်၊ သူမှာတော့ ပုံမှန် object တွေမှာ မပါတဲ့ feature တချို့ ထပ်‌ပေါင်းထည့်ထားတာမျိုးပါ၊ (Object တွေလောက်တော့ powerful သိပ်မဖြစ်ပါ၊ method လေးတစ်ချို့နဲ့၊ iterate လုပ်လို့ရတာလောက်ပဲ အပိုပါတာပါ) ကိုယ်ပိုင် iterate built-in ပါတော့ iterate လုပ်လို့ရတာတွေ၊ (ပုံမှန် object တွေမှာ မရပါ) , clear လုပ်ပစ်လို့ရတာတွေ, array method တစ်ခုနဲ့ခပ်ဆင်ဆင် နောက်တစ်ခု ပါဝင်တာတို့ အစရှိသဖြင့် အသေးစိတ်လေးတွေ လုပ်လို့ရတယ်။ သူလဲကိုယ်ပိုင် literal syntax မရှိလို့ **Set** လိုမျိုး နည်းတူဖန်တီးရပြီးတော့၊ မတူတာလေးက သူက object လိုဖြစ်လို့, key, value pair အလိုက်ထည့်ပေးရတာပါ\r\n\r\n    ```js\r\n    const map = new Map([\r\n        [1, \"one\"],\r\n        [2, \"two\"],\r\n        [3, \"three\"]\r\n   ]);\r\n    ```\r\n\r\n- **Utility Global objects**\r\n    Javascript မှာ အခြား global object တွေရှိပါသေးတယ်၊ သူတို့ကိုတော့ သက်ဆိုင်ရာ section တွေမှာမှ အကျယ်တဝင့်ဆက်လက်ရှင်းပြသွားပါမယ်..\r\n    - Date\r\n    - Regex\r\n    - Math\r\n    - Number\r\n    - Array\r\n    - at least 5 more..\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "\r\n### how to check the type of a data\r\nJavascript မှာ typeof ဆိုတဲ့ unary operator လေးရှိပါတယ်၊ သူ့ကိုသုံးပြီး Data types တော်တော်များများကို စစ်ဆေးနိုင်ပါတယ်။\r\n\r\n```js\r\nconsole.log(typeof \"Hello\") // string\r\nconsole.log(typeof 123) //  number\r\nconsole.log(typeof true) //  boolean\r\nconsole.log(typeof Symbol(\"Hi\")) //  symbol\r\nconsole.log(typeof [1,2,3]) //  object\r\nconsole.log(typeof {a:1, b:2, c:3}) //  object\r\n```\r\n\r\nဆိုတော့... ကိုယ်ပိုင် နာမည်လေးတွေရှိနေရင် Primitive type, object လို့ပေါ်ရင် reference လို့လဲအလွယ်မှတ်လို့ရပါတယ်။\r\n**typeof** keyword တစ်မျိုးထဲနဲ့ data type တစ်ခုကို အတိအတကျ မသိနိူင်တဲ့ အချို့ချွင်းချက်လေးတွေ တစ်ချို့တော့ ရှိပါတယ်၊ အောက်က block တွေမှာလက်ရှင်းပြသွားပါမယ်။\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "<h2 align=\"center\"><b>Assigning variables</b> </h2> \r\n\r\njavascript မှာ variable တစ်ခုကိုဖန်တီးရင် (declare လုပ်တယ်လို့ခေါ်ပါတယ်) အောက်က keyword တွေသုံးပြီးဖန်တီးရပါတယ်။ keyword တစ်ခုချင်းစီက မတူညီတဲ့ လုပ်ဆောင်ပုံ ကိုယ်စီရှိကြပါတယ်။\r\n<br/>\r\nvariable တစ်ခုကို..\r\n\r\n1) let\r\n    - ဒါနဲ့ declare ရင် သူ့ ကို declare လုပ်တဲ့ {} တွန့်ကွင်းအထဲမှာပဲ သုံးလို့ရပါတယ်၊ တွန့်ကွင်းအပြင်မှာသုံးလို့မရပါဘူး။ နောင်တစ်ချိန်မှာ သူ့ရဲ့ နဂို တန်ဖိုးကို တခြားဟာနဲ့ ပြန်ပြောင်းလို့ရတယ်။ သူ့နဲ့ declare တဲ့ variable ကို **block-scope** variable လို့ခေါ်ပါတယ်။\r\n\r\n3) const\r\n    - ဒါကို အသုံးပြုပြီး declare ရင်လဲ လုပ်တဲ့ {} တွန့်ကွင်းအထဲမှာပဲသုံးလို့ရပါတယ်။ ဒါပေမယ့် ပထမဆုံးပေးလိုက်\r\nတဲ့ တန်ဖိုးက အတည်ပဲဖြစ်ပြီး နောက်ထပ်ပြောင်းလို့မရတော့ပါဘူး၊ constant အတိုခေါက်မို့ **const** လို့ခေါ်တာပါ။ သူလဲ **block-scope** variable declaration ပါပဲ။\r\n\r\n2) var\r\n    - ဒါကို အသုံးပြုပြီး declare ရင်တော့ {} တွန့်ကွင်းအထဲမှာရော တွန့်ကွင်းအပြင်မှာပါ သုံးလို့ရပါတယ်။ Globally သုံးလို့ရလို့ သူနဲ့ declare တဲ့ variable က **global scope variable** ခေါ်ပါတယ်။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "var a = \"one\";\r\nlet c = \"three\";\r\nconst e = \"five\"\r\n\r\n// {} အစဆုံးအတွင်းကို block လို့ခေါ်ပါတယ်။ \r\nfor (let index = 0; index < 1; index++) {\r\n   a = 1;\r\n   var b = \"two\";\r\n   c = 3;\r\n   let d = \"four\";\r\n   e = 6 // can not reassign, error တက်ပါမယ်\r\n}\r\n\r\nconsole.log(a); // 1\r\nconsole.log(b); // two ဒါလေးကို {} တစ်ခုမှာ ကြော်ငြာထားပေမယ့်၊ ဒီမှာလာခေါ်သုံးလို့ရနေပါတယ်။\r\nconsole.log(c); // 3\r\n// console.log(d); // is not defined, error တက်ပါမယ်\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "\r\n<h2 align=\"center\"><b>Primitive data type vs Reference data types</b> </h2> \r\n\r\n\r\nPrimitive data types တွေဆိုတာ သူတို့ကို စဖန်တီးလိုက်တဲ့အခါ computer memory ထဲမှာ သူတို့ရဲ့တန်ဖိုးအတိုင်းပုံသေတည်ရှိနေတဲ့ variable တွေဖြစ်ပါတယ်။ သူတို့ကို သိမ်းဆည်းတဲ့ data structure အမျိုးအစားကတော့ stack လို့ခေါ်ပါတယ်။ **stack** ဆိုတဲ့အတိုင်း သူ့နေရာနဲ့သူ သူ့တန်ဖိုးတဲ့သူ memory stack ထဲမှာ အစီစဥ်တကျ အထပ်လိုက်လေး တည်ရှိနေကြပါတယ်။ \r\n\r\n```js\r\n    let a = 1\r\n    let b = 2\r\n```\r\nReference data types တွေဆိုတာကတော့ သူ့နာမည်ကိုကြည့်ရုံနဲ့တင် အနည်းငယ်အရိပ်အမွတ်လောက် သိမယ်ထင်ပါတယ်၊ reference data type variable တွေက သူတို့ရဲ့ actual value က memory stack ထဲမှာ မဟုတ်ပါဘူး၊ **heap** လို့ခေါ်တဲ့အခြား data structure သက်သက်တစ်ခုထဲမှာ သွားသိမ်းထားတာပါ၊ memory stack ထဲမှာရှိနေတဲ့ အရာကတော့ အဲဒီ heap ထဲက သူတို့ရဲ့ လိပ်စာပါ၊ programming world မှာတော့ အဲလိုအရာကို **pointer** လို့ခေါ်ပါတယ်။\r\n\r\n```js\r\n    let c = { a : 1}\r\n```\r\nအခုလို ဖန်တီးလိုက်တဲ့ object တစ်ခုမှာ c ဆိုတဲ့ variable လေးက stack ထဲမှာ သူ့ရဲ့လိပ်စာ၊ heap ထဲမှာသူ့ရဲ့တန်ဖိုး\r\n\r\n\r\n### Overflow-simplified\r\nအရှင်းဆုံးနားလည်အောင်ကြိုးစားမယ်ဆိုရင် ...\r\n\r\nလူတစ်စု နေရာတစ်တစ်နေရာမှာ သူတို့ရဲ့လုပ်ငန်းဆောင်တာတွေကို လုပ်ဆောင်ဖို့ စောင့်စားနေကြတယ် ဆိုပါစို့ (maybe a bank, office, bus station etc..)\r\nအဲလူတွေထဲမှာ လူအမျိုးမျိုးရှိနေမယ်, အဲလိုအမျိုးမျိုးရှိနေတဲ့လူတွေကို data types တွေလို့မြင်ကြည့်ပါ, string, boolean, objects, array etc... အဲလိုလူတွေအများကြီးရှိတဲ့ အထဲကမှ လူတစ်ချို့က သူတို့ကိုယ်တိုင် physically လာထိုင်စောင့်ကြတယ်၊ လူတစ်ချို့ကကျတော့ လူအငှားနဲ့ စောင့်ခိုင်းထားတယ် စောင်းဆိုင်းတဲ့နေရာမှာ သူတို့ကိုယ်တိုင် ရှိမနေကြဘူး အငှားစောင့်ပေးတဲ့လူပဲရှိနေမယ်။ အဲဒီအငှားစောင့်ပေးတဲံလူစီမှာ သူ့ကို စောင့်ခိုင်းထားတဲ့လူရဲ့ အမည်၊ နေရပ်လိပ်စာ ရှိတယ်၊ နောက်ပြီး အဲဒီအငှားစောင့်ပေးတဲ့ လူကပဲ သူအငှားစောင့်ပေးတဲ့လူ တစ်ယောက်မကရှိချင်လဲရှိမယ်၊ တစ်ယောက်ထက်မကရင် သူ့စီမှာ အမည်၊ လိပ်စာကို လူစာရင်းလိုက်ကြီးရှိနေမယ်။ သူ့ကိုငှားထားတဲ့ လူတွေကတော့ သူတို့အိမ်မှာပဲသူတို့ရှိနေကြမယ်။\r\n\r\n>- ဒီလိုမျိုးကို ဥပမာယူပြီး ကိုယ်တိုင်လာစောင့်နေသူတွေအမျိုးအစားက Primitive type \r\n>- အငှားနဲ့စောင့်သူတွေက Reference type လို့သတ်မှတ်နိုင်ပါတယ်။\r\n\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# How a program treats different data types\r\nData types တွေက type တွေကွဲပြားနေကြရုံ, သိမ်းဆည်းပုံတွေ သက်သက်တင်မဟုတ်ပါဘူး။ သူတို့ကို program က interact လုပ်ပုံလဲကွဲပြားကြပါတယ်။\r\nဘယ်လိုကွဲပြားလဲဆိုရင်\r\n\r\n- Passing as value\r\n- Passing as reference\r\n\r\nအသိသာဆုံး ဥပမာအနေနဲ့ အောက်က code block ကိုကြည့်ပြီး စမ်းသပ်နိုင်ပါတယ် primitive data type တစ်ခုကို အခြား variable တစ်ခုစီလက်ဆင့်ကမ်းပေးလိုက်ချိန်မှာ ပထမ variable က ဒုတိယစီက သူ့တန်ဖိုးကိုပဲ ကမ်းပေးလိုက်တာဖြစ်ပါတယ် ပထမ variable ရော ဒုတိယ variable ရောက တန်ဖိုးချင်းတူသွားကြပေမယ့် ကိုယ်ပိုင် memory location တွေကသီးခြားရှိနေကြပါတယ်။\r\nreference data type မှာတော့ တစ်ခုနဲ့ လက်ဆင့်ကမ်းကြတဲ့အခါ သူတို့ရဲ့ memory reference ကိုကမ်းပေးလိုက်တာပါ။\r\nဒါကြောင့်...\r\n\r\n>- ဒုတိယ variable (primitive data type) တစ်ခုကို changes တစ်ခုခုလုပ်တဲ့ အခါမှာ ပထမ variable မှာဘာမှာမပြောင်းလဲပဲရှိနေပြီးတော့\r\n>- reference data type မှာတော့ ဒုတိယ variable  ကို changes လုပ်တဲ့ အခါ ပထမ variable မှာပါ လိုက်ပြောင်းသွားတာကို လက်တွေ့ မြင်နိုင်ပါတယ်။\r\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// primitive data type\r\nlet a = 1;\r\nlet b = a;\r\n\r\nconsole.log(a === b);\r\n\r\na = 2;\r\nb = 3\r\n\r\nconsole.log(\"primitive\",a);\r\nconsole.log(\"primitive\",b);\r\n\r\n// reference data type\r\nlet c = [1, 2, 3];\r\nlet d = c;\r\n\r\nd[0] = \"one\"\r\n\r\nconsole.log(c === d);\r\nconsole.log(\"reference\",d);\r\nconsole.log(\"reference\",c);\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "<h2 align=\"center\"><b>Javascript Keywords</b> </h2> \r\n\r\nKeywords တွေဆိုတာ သူတို့ရဲ့ သက်ဆိုင်ရာ tasks တွေကို လုပ်ဆောင်ဖို့ သီးသန့် reserve လုပ်ထားတဲ့ အရာတွေပါ၊ သူတို့နာမည်ကို သုံးပြီးတော့ variable name ပေးတာတို့, function declare တာတို့လုပ်လို့မရပါဘူး။ အောက်ကဟာတွေအကုန်လုံးက javascript ရဲ့ reserved လုပ်ထားတဲ့ keyword တွေပါ\r\n\r\n<details>\r\n<summary>see all keywords +</summary>    \r\n\r\n- <summary>abstract</summary>    \r\n- <summary>arguments</summary>    \r\n- <summary>await*</summary>    \r\n- <summary>boolean</summary>    \r\n- <summary>break</summary>    \r\n- <summary>byte</summary>    \r\n- <summary>case</summary>    \r\n- <summary>catch</summary>    \r\n- <summary>char\t</summary>    \r\n- <summary>class*</summary>    \r\n- <summary>const</summary>    \r\n- <summary>continue</summary>    \r\n- <summary>debugger</summary>    \r\n- <summary>default</summary>    \r\n- <summary>delete</summary>    \r\n- <summary>do</summary>    \r\n- <summary>double</summary>    \r\n- <summary>else</summary>    \r\n- <summary>enum*</summary>    \r\n- <summary>eval</summary>    \r\n- <summary>export*</summary>    \r\n- <summary>extends*</summary>    \r\n- <summary>false</summary>    \r\n- <summary>final</summary>    \r\n- <summary>finally</summary>    \r\n- <summary>float\tfor\tfunction</summary>    \r\n- <summary>goto</summary>    \r\n- <summary>if</summary>    \r\n- <summary>implements</summary>    \r\n- <summary>import*</summary>    \r\n- <summary>in</summary>    \r\n- <summary>interface</summary>    \r\n- <summary>int\t</summary>    \r\n- <summary>let*</summary>    \r\n- <summary>long</summary>    \r\n- <summary>native\t</summary>    \r\n- <summary>new</summary>    \r\n- <summary>null</summary>    \r\n- <summary>package</summary>    \r\n- <summary>private</summary>    \r\n- <summary>protected</summary>    \r\n- <summary>public</summary>    \r\n- <summary>return</summary>    \r\n- <summary>short</summary>    \r\n- <summary>static</summary>    \r\n- <summary>super*</summary>    \r\n- <summary>switch</summary>    \r\n- <summary>synchronized</summary>    \r\n- <summary>this</summary>    \r\n- <summary>throw\t</summary>    \r\n- <summary>transient\t</summary>    \r\n- <summary>true</summary>    \r\n- <summary>try</summary>    \r\n- <summary>typeof</summary>    \r\n- <summary>var</summary>    \r\n- <summary>void</summary>    \r\n- <summary>volatile</summary>    \r\n- <summary>while</summary>    \r\n- <summary>with\t</summary>    \r\n- <summary>yield</summary>    \r\n</details>\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "<h2 align=\"center\"><b>Operators</b> </h2> \r\n\r\n# all operators\r\n\r\n- Mathematical operators\r\n    - \"+\"\r\n    - \"-\"\r\n    - \"*\"\r\n    - \"/\"\r\n    - \"**\"\r\n    - \"%\"\r\n- comparison operators\r\n    - \"<\", \">\"\r\n    - \"==\", \"===\"\r\n    - \"!==\"\r\n    \r\n- type coercion\r\n    - truthy values\r\n    - falsy values\r\n\r\n- logical operators\r\n    - \"||\"\r\n    - \"&&\"\r\n    - !null, !undefined, !true, !false\r\n    \r\n- unary operators\r\n    - !\r\n    - \"++\"\r\n    - \"+=\"\r\n    - \"*=\"\r\n- nullish coalescing logical assignments\r\n    - \"??\"\r\n    - \"&&=\"\r\n    - \"||=\""
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Mathematical operators"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "var sum = 5 + 3; // ပေါင်းခြင်း ရလဒ် 8\r\nvar difference = 10 - 4; // နှုတ်ခြင်း ရလဒ်is 6\r\nvar product = 7 * 2; // မြှောက်ခြင်း ရလဒ် is 14\r\nvar quotient = 12 / 3; // စားကိန်း 4\r\nvar result = 2 ** 3; // ထပ်ကိန်း 8\r\nvar remainder = 17 % 5; // အကြွင်း 2"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Increment, decrement operators\r\n\r\nအဓိကကတော့ numerical value တွေကို တန်ဖိုးတိုး, လျော့ လုပ်သွားဖို့ပါ၊ သူကတကယ်တော့ တန်ဖိုးအသစ် ပြန် assign ချပေးတာဖြစ်လို့ const နဲ့ declare  လုပ်ထားတဲ့ variable တွေမှာ သုံးလို့မရပါ။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// how it actually works\r\nlet a = 1\r\na = a + 1\r\na = a + 1\r\na = a + 1\r\nconsole.log(a) // 4"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// const a = 1 will throw an error\r\nlet a = 1\r\na++\r\na++\r\na++\r\nconsole.log(a) // 4"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// Same thing\r\nlet a = 1\r\na += 1\r\na += 1\r\na += 1\r\nconsole.log(a) // 4"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let a = 1\r\na *= 2\r\na *= 3\r\na *= 4\r\nconsole.log(a) // 24"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let a = 10\r\na--\r\na--\r\na--\r\na -= 3\r\nconsole.log(a) // 4"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let a = 12\r\n\r\na /= 2 // 6\r\na /= 2 // 3\r\na /= 3 // 1\r\n\r\nconsole.log(a) // 1"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Using with string"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let a = \"A\"\r\na += \" quick\"\r\na += \" brown\"\r\na += \" fox\"\r\na += \" jumps\"\r\na += \" over\"\r\na += \" a\"\r\na += \" lazy\"\r\na += \" dog\"\r\na += \".\"\r\nconsole.log(a) // A quick brown fox jumps over a lazy dog."
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Comparison operators\r\n\r\ncomparison operator က true or false return value တွေပြန်ပေးတယ်"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "3 < 5; // true\r\n5 < 3; // false\r\n5 >= 3; // true\r\n3 <= 5; // true\r\n1 === 1 // true\r\n2 !== 3 // true"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## truthy and falsy values in javascript\r\n\r\ntruthy, falsy ဆိုတာ.. တစ်ခါတစ်ရံ ကိုယ်က assign ချတာမဟုတ်ပဲ task တစ်ခုခုကို run လိုက်လို့ ပြန်ထွက်လာတဲ့ variable တစ်ခုရဲ့ တန်ဖိုးက undefined, null ဖြစ်နေတာမျိုးမဟုတ်ပေမယ့်လဲ, လက်တွေ့ အသုံးဝင်တယ့် တန်ဖိုး တစ်ခု ဟုတ်မနေရင် အဲဒီ ကို variable အသုံးပြုပြီး ဆက်လုပ်ရမယ့်နောက် task တွေမှာ မလိုလားအပ်တဲ့ bug တွေဖြစ်မလာအောင် javascript က type coercion ဆိုတဲ့ feature ကနေထုတ်ပေးတဲ့ တန်ဖိုးတွေဖြစ်ပါတယ်။ ဥပမာဆိုပါစို့ \"\" ဒါလေးက empty string လေးဆိုတော့၊ သူ့ထဲမှာဘာမှရှိမနေတော့ သူနဲ့ပက်သတ်ပြီးဆက်လုပ်ဖို့ တခြား task တွေက ဘာမှ မရှိတဲ့ empty string ကြီးကို ဘာမှဆက်လုပ်လို့မရတာကြောင့်, bug တွေဖြစ်တိုင်ပါတယ်။\r\nအကယ်၍ empty string သာမဖြစ်ခဲ့ရင်တော့ result တွေကမျှော်လင့်တဲ့အတိုင်း ထွက်လာမှာပါ။ ဆိုတော့ အဲဒီ variable လေးကို empty string ဖြစ်လာမဖြစ်လား ဖြစ်ရင်တခြားဟာပြောင်းပေး၊ မဖြစ်ရင်တော့ အဲဒီ တန်ဖိုးကိုပဲယူမယ် အစရှိသဖြင့် dynamically assign ချတဲ့ အခါ အတိုခေါက်ရေးတဲ့ operator တွေအောက်မှာ တွေ့ရမှာပါ\r\n\r\nလောလောဆယ် ဘာတွေကတော့ truthy, ဘာတွေကတော့ falsy ဖြစ်တယ်ဆိုတဲ့ အရာတွေကို အရင်သိရပါမယ်။\r\n \r\nlogical operator တွေသုံးပြီး variable တွေကို dynamically assign ချဖို့ရုံလောက် အသုံးဝင်တာမျိုးမဟုတ်ပဲ၊ အရေးကြီးတဲ့ programming concept တစ်ခုဖြစ်လို့ မှတ်သားစရာကောင်းပါတယ်။\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "မှတ်ချက်။ ။ truthy, fasly ဆို javascript feature တစ်ခုဖြစ်တဲ့ type coercion ကနေထုတ်လုပ်ပေးတဲ့ တန်ဖိုးတွေသက်သက်ဖြစ်လို့ console မှာ စမ်းချင်ရင် if statement တွေပဲစမ်းလို့ရပါတယ်။ \r\n\r\n1) Truthy values\r\n    - non-empty string\r\n    - non zero integers\r\n    - objects ([], {}) even empty\r\n    - functions that returns truthy values\r\n    - non invoked functions\r\n    - true\r\n\r\n1) Falsy values\r\n    - empty string\r\n    - null, undefined\r\n    - Nan\r\n    - false"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let a = \"\"\r\n\r\nif(a){\r\n   console.log(\"it doesn't work\")\r\n}\r\n\r\na = \"hello\"\r\n\r\n// this block will run\r\nif(a){\r\n   console.log(\"it works now\")\r\n}"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let a = [];\r\nif (a) {\r\n   console.log(\"it works\");\r\n}\r\na ={}\r\nif (a) {\r\n   console.log(\"it works here too\");\r\n}"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let a = function (a) {\r\n    return a;\r\n };\r\n \r\n//  will not run\r\n if (a()) {\r\n    console.log(\"it doesn't work\");\r\n }\r\n \r\n \r\n//  will run\r\n if (a) {\r\n    console.log(\"it works now\");\r\n }\r\n "
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Logical operators"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "\r\nlogical operator တွေက အလွန် အသုံးဝင်တဲ့ operator တွေဖြစ်ပါတယ်။ code block တွေကို execute လုပ်သင့်မလုပ် decision တွေနဲ့ တခြား conditional, logical variable assignment, test condition တွေမှာ အမြဲသုံးပါတယ်။ condition ဆိုတဲ့နေရာမှာ true, false ဆိုတဲ့အပြင်ကိုမှ အခြေ ၂ ခုထက်ပိုတဲ့ decision making condition တွေလဲများစွာရှိနိုင်တာကြောင့် သူတို့ကို အသုံးပြုတွေလဲ ကျယ်ပြန့်ပါတယ်။"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "\"&\" AND operator ရှေ့ condition truthy ဖြစ်မှ နောက် condition ကို ယူတယ်။ တစ်ခုမှ truthy မဖြစ်ရင် left ကဟာကိုယူတယ်။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "true && true;   // true\r\ntrue && false;  // false\r\nfalse && true;  // false\r\nfalse && false; // false\r\n\r\nconst a = null && undefined;\r\nconst b = undefined && null;\r\n\r\nconsole.log(a); // null\r\nconsole.log(b); // undefined"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "\"||\" OR operator ရှေ့ ပဲဖြစ်ဖြစ် နောက်ပဲ ဖြစ်ဖြစ် truthy condition ကိုပဲယူတယ်။ သူက တစ်ခုမှ truthy မဖြစ်ရင် right ကဟာကိုယူတယ်။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "true || true;   // true\r\ntrue || false;  // true\r\nfalse || true;  // true\r\nfalse || false; // false\r\n\r\n\r\nconst a = null || undefined;\r\nconst b = undefined || null;\r\n\r\nconsole.log(a); // undefined\r\nconsole.log(b); // null"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## unary operators\r\n\r\nunary operators တွေက ၂ ဖက် မလိုပဲ၊ တစ်ဖက်ထဲကတန်ဖိုး တစ်ခု ထဲနဲ့ operate လုပ်လို့ရတဲ့ operator တွေဖြစ်ပါတယ်။\r\nအပေါ်က ပြခဲ့တဲ့ ဥပမာတွေထဲက ++, --, **, /=, typeof kwyword တို့အစရှိသည်တို့ကလဲ unary operator တွေပါ။ သူတို့အပြင် အခြားအသုံးဝင် တာတွေလဲရှိပါတယ်။\r\n\r\n- data type ပြောင်းလဲခြင်း\r\n- truthy value ကို falsy ဖြစ်အောင်, falsy value ကို truthy ဖြစ်အောင် negation လှန်ခြင်း"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const string = \"12\"\r\nconst toNumber = +string // it is a number now, 12\r\nconst toNumberNegative = string // it is a number now -12\r\nconst iAmTrue = true\r\nconst iNegate = !iAmTrue // false\r\nconst nothing1 = null\r\nconst nothing2 = undefined\r\nconst negateNull = !nothing1 // true\r\nconst negateNull2 = !nothing2 // true"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## nullish coalescing logical assignment\r\n\r\nvariable တွေကို dynamically assign ချဖို့အတွက်အသုံးပြုတဲ့အခါ သုံးတာပါ။ တစ်ခါတစ်ရံ tasks တစ်ခုကနေ return ပြန်ထွက်လာမယ့် တန်ဖိုးတစ်ခုက ဘာဖြစ်မယ်မှန်း မသိတဲ့အခါ dynamic ဖြစ်အောင်, falsy value တွေမလိုချင်တဲ့အခါ အသုံးပြုတာပါ။"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "?? operator\r\n\r\nသူက left-side variable က null သို့မဟုတ် undefined ဖြစ်နေမှသာ right-side က တန်ဖိုးအသစ်ကိုပြောင်းလဲ သတ်မှတ်မှာဖြစ်တယ်။ "
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const thisIsNullSoIWillChangeToSomeTruthyValue = null;\r\nconst defaultValue = \"hello world\";\r\n\r\nconst result = thisIsNullSoIWillChangeToSomeTruthyValue ?? defaultValue;\r\n\r\nconsole.log(result); // \"hello world\""
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "အပေါ်ကနဲ့ အောက်ကနဲ့က အတူတူပဲ"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let thisIsNullSoIWillChangeToSomeTruthyValue = null;\r\n\r\nthisIsNullSoIWillChangeToSomeTruthyValue ??= \"hello world\";\r\n\r\nconsole.log(thisIsNullSoIWillChangeToSomeTruthyValue) // hello world"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "&& operator\r\n\r\nသူက left-side variable က truthy ဖြစ်နေမှသာ တန်ဖိုးအသစ်ကိုပြောင်းလဲ သတ်မှတ်မှာဖြစ်တယ်။ မဖြစ်ရင် left-side ကတန်ဖိုးအတိုင်းပဲဆက်ရှိနေမှာဖြစ်တယ်။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let thisIsNullSoIWillNotChange = null;\r\n\r\nthisIsNullSoIWillNotChange &&= \"hello world\";\r\n\r\nconsole.log(thisIsNullSoIWillNotChange) // null"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let thisIsTrueSoIWillChange = true;\r\n\r\nthisIsTrueSoIWillChange &&= \"hello world\";\r\n\r\nconsole.log(thisIsTrueSoIWillChange) // hello world"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "||= operator \r\n\r\nသူကတော့ ၂ ဖက်လုံးက truthy ဖြစ်တဲ့ တန်ဖိုးတစ်ခုကိုယူတယ် အရင်ဆုံး left-side ကိုကြည့်တယ်၊ truthy ဖြစ်ရင် အဲဖက်က တန်ဖိုးကိုပဲ ယူလိုက်ပြီးတော့၊ falsy တခြားဖက်ကတန်ဖိုးကိုယူတယ်,၂ ဖက်လုံးက falsy ဖြစ်နေရင် right side က တန်ဖိုးကိုယူပါတယ်။ ဒါလေးကတော့ falsy value တွေမလိုချင်တဲ့အခါသုံးတော့ ပိုပြီး အသုံးများတယ်။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let a= \"\"\r\na ||= \"not empty\"\r\nconsole.log(a) // not empty\r\n\r\nlet b = null\r\nb ||= undefined;\r\nconsole.log(b) // undefined\r\n\r\n\r\nlet c = \"hello\";\r\nc ||= null;\r\nconsole.log(c); // \"hello\""
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "<h2 align=\"center\"><b>Condition statements</b> </h2> \r\n\r\n### if else statements\r\n\r\n\r\n### switch statements\r\nIf else statement နဲ့ အလုပ်လုပ်ပုံချင်း အတူတူပဲဖြစ်ပါတယ်။ switch ကိုတော့ nested if else တွေ များလာရင် clean ဖြစ်အောင်လို့ အသုံးပြုတာပဲဖြစ်ပါတယ်။\r\nswitch keyword ရဲ့ဘေးက argument ထဲမှာ ထည့်ထားတဲ့ variable ပေါ်မှာမူတည်ပြီးတော့ အောက်က case တွေထဲက သူနဲ့ ပထမဆုံး ညီတဲ့ case ရဲ့ statement ကိုယူတာဖြစ်ပါတယ်။\r\nreturn or break keyword ကိုမဖြစ်မနေထည့်ပေးရပါတယ်၊ \r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "\r\n\r\n#### Example 1\r\n\r\nဒီအောက်က example မှာ switch parameter မှာ ပေးထားတဲ့ condition က \"ramen\" ဖြစ်တဲ့အတွက် အောက်က case တွေထဲကမှာ \"ramen\" ဖြစ်တဲ့ case ကိုယူမှာဖြစ်ပါ။\r\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const food = \"ramen\";\r\n\r\nswitch (food) {\r\n   case \"ramen\":\r\n      return console.log(\"Itadaikimasu 🍝\");\r\n   case \"pizza\":\r\n      return console.log(\"Here is a pizza 🍕\");\r\n   case \"burger\":\r\n      return console.log(\"Enjoy your burger 🍔\");\r\n   case \"doughnut\":\r\n      return console.log(\"Take a doughnut 🍩\");\r\n   default:\r\n      return console.log(\"Looks like you'r not hungry\");\r\n}\r\n\r\n// in console it will show-> \"Itadaikimasu 🍝\""
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "\r\n#### Example 2\r\n\r\nဒီ example မှာတော့ switch parameter မှာ ပေးထားတဲ့ condition က true ဖြစ်တဲ့အတွက် အောက်က case တွေထဲကမှာ ပထမဆုံး true ဖြစ်တဲ့ case ကိုယူမှာဖြစ်ပါတယ်။\r\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const score = 30;\r\n\r\nswitch (true) {\r\n   case score >= 80:\r\n      return console.log(\"A+\");\r\n   case score >= 60:\r\n      return console.log(\"B+\");\r\n   case score >= 40:\r\n      return console.log(\"B\");\r\n   case score >= 20:\r\n      return console.log(\"F\");\r\n   default:\r\n      return console.log(\"You are expelled!!\");\r\n}\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "မှတ်ချက်အနေနဲ့ကတော့ Switch statement တွေကိုတော့ variable တွေထဲမှာတိုက်ရိုက် store လို့မရပါဘူး။\r\n\r\nthis will not work\r\n\r\n```js\r\nconst canNotStoreSwitch = switch(true){\r\n    case true:\r\n        return \"some value\"\r\n    default:\r\n        return \"other value\"\r\n}\r\n\r\n```"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "<h3 align=\"center\" style=\"color: blue;\">ကိုယ့် ဥပမာနဲ့ ကိုယ်ပြန်ရေးကြည့်ပါ</h3>"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "\r\n---\r\n\r\n### ternary operator\r\n\r\nif else လိုသဘောတရားအတိုင်းပါပဲ syntax ပဲကွဲပြားတာပါ၊ သူတို့တွေကို inline statement တွေအဖြစ်ပဲအသုံးပြုပါတယ်။\r\n\r\n\r\n```js\r\n\r\n\r\nconst number = 3\r\n\r\nconst isGreaterThan5 = number > 5 ? \"greater than five\" : \"less than five\"\r\n\r\nconsole.log(isGreaterThan5) // less than five\r\n\r\n```\r\n\r\nဒီမှာလဲ nested တွေထည့်လို့ရပါတယ်၊ ဒါပေမယ့် အရမ်းများလာရင်တော့ ကြည့်ရတာ ရှုပ်လာနိုင်ပါတယ်။\r\n\r\n```js\r\n\r\nconst person = \"tony\"\r\n\r\nconst isFavoriteHero = person === \"tony\" ? \"iron man\" : person === \"steve\" ? \"captain\" : person === \"natasha\" ? \"black widow\" : \"I don't know this person\"\r\n\r\nconsole.log(isFavoriteHero) // \"iron man\"\r\n\r\n\r\n\r\n```\r\n\r\n\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "---"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "<h2 align=\"center\"><b>Functions</b> </h2> \r\n\r\n### functions တွေကို နည်းလမ်း ၂ မျိုးနဲ့ create လို့ရတယ်၊\r\n\r\n#### Declaration\r\n\r\n```js\r\nfunction fn(){\r\n    console.log(\"I am a function\")\r\n}\r\n\r\n```\r\n\r\n\r\n#### Expression (Anonymous function expression လို့လဲခေါ်တယ်)\r\n```js\r\nconst anonymousFunction = function(){\r\n    console.log(\"I am also a function\")\r\n}\r\n```\r\n\r\n---\r\n\r\n### **calling or invoking**\r\n\r\n    Functions တွေက သူတို့ကို မခေါ်မခြင်းဘာမှလုပ်ဘူး၊ ခေါ်မှ အလုပ်စလုပ်တယ်၊၊ function ကိုခေါ်တယ် ဆိုတာ function name ရယ် \"()\" ရယ်ရေးလိုက်ရုံပဲ\r\n\r\n    \r\n```js\r\nconst fn(){\r\n    // do something\r\n}\r\n\r\nfn() // invoking\r\n\r\n```\r\n\r\n---\r\n\r\n\r\n### **IIFE**\r\n\r\n    **Immediately Invoked Function Expression** လို့ခေါ်တယ်။\r\n    \r\n    function တစ်ခုကို declare ပြီးချက်ချင်း တန်းခေါ်တဲ့ expression ပါ\r\n\r\n```js\r\n\r\n(function immediatelyInvokeFunctionExpression(){\r\n    console.log('I am called immediately, no need to call me sperately\")\r\n})()\r\n\r\n```\r\n\r\n\r\n---\r\n\r\n### **returning values**\r\n\r\n    functions တွေကနေ task run ပြီးတာနဲ့ return values တွေပြန်ထုတ်လို့ရတယ်  **return** ဆိုတဲ့ keyword ကိုသုံးရတယ်. return \r\n\r\n    value က ကြိုက်တာဖြစ်လို့ရတယ်၊ string, number, boolean, objects, null, undefined etc..\r\n\r\n```js\r\nfunction returnValue(){\r\n    return \"I return as a value from this function\"\r\n}\r\n```\r\n\r\n----\r\n\r\n\r\n### **hoisting**\r\n\r\n    hoisting ဆိုတာ သူတို့ကို မဖန်တီးခင်ထဲကနေ သုံးလို့ရနေတာကိုပြောတာ၊ ဥပမာ လက်ရှိ javascript ရေးနေတဲ့ file ရဲ့ **အောက်ဆုံးမှာ \r\n\r\n    function တစ်ခုကို ဖန်တီးလိုက်မယ်**၊ ဒါပေမယ့် အဲဒီ function ကို **ကြိုပြီး အပေါ်မှာတည်းက** ခေါ်သုံးထားလို့ရတာကိုပြောတာပါ။\r\n\r\n**functions keyword နဲ့ declare လုပ်တဲ့ function တွေကပဲ hoist ပါတယ်၊ anonymous functions တွေက တော့ မ hoist ပါဘူး။**\r\n\r\n```js\r\niCanHoist();\r\n\r\nfunction iCanHoist(){\r\n    console.log('I am declared here but I can be called from above\")\r\n}\r\n\r\nconst ICantHoist = function(){\r\n    console.log('I am declared here but I can only be called at below\")\r\n}\r\nICantHoist()\r\n\r\n```\r\n    functions တွေအပြင်, var keyword နဲ့ create လုပ်ထားတဲ့ variable တွေမှာလဲ Hoist လို့ရပါတယ်၊သို့သော်\r\n\r\n    သူ့တို့ကို assign လုပ်တဲ့ value ကတော့ default value ဖြစ်တဲ့ undefined ပဲဖြစ်နေပါမယ်။ မဟုတ်ပဲ တခြား keyword နဲ့ declare \r\n\r\n    ထားတဲ့ variable တွေဆိုရင် အပေါ်မှာကြိုခေါ်ရင် error ပြပါလိမ့်မယ်။\r\n\r\n---\r\n### **arguments & parameters**\r\n\r\n\r\n    function တွေကို ခိုင်း‌စေတဲ့အခါ သူတို့ကို အသုံးပြုစေလိုတဲ့ အရာတွေကိုပါ ထည့်ပေးလို့ရပါတယ်၊ ဥပမာ ဒီဂဏန်းနဲ့ ဟိုဂဏန်းနဲ့ ပေါင်းပါ အစရှိသဖြင့်\r\n\r\n\r\n```js\r\n\r\nfunction sum(num1, num2){\r\n    return num1 + num2\r\n}\r\n\r\n```\r\n#### **Parameter vs argument**\r\n\r\n    အဓိပ္ပာယ် တစ်မျိုးထဲကိုပဲ ရည်ညွန်းပြောဆိုတာဖြစ်လို့ ဆိုလိုရင်းကတော့အတူတူပါပဲ၊ \r\n    \r\n- parameter ဆိုတာကတော့ အဲဒီ function ကို စတင် declare လုပ်ချိန်မှာ \"()\" variable အဖြစ်ပေးတဲ့ actual value ရဲ့ place holder ကိုပြောတာပါ၊\r\n\r\n- argument ဆိုတာ အဲဒီ သက်ဆိုင်ရာ function \r\nကို invoke စလုပ်တဲ့ သုံးဖို့စခေါ်တဲ့အခါ parentheses \"()\" ထဲမှာ ထည့်ပေးတဲ့ actual value ကိုပြောတာဖြစ်ပြီး အဲဒီ function \r\nကို အကြိမ်များစွာ ခေါ်သုံးနေရင် ခေါ်သုံးတဲ့ တစ်ခါတိုင်း အဲဒီ function တစ်ခုစီတိုင်းအတွက် argument တွေလဲ တစ်ခုစီရှိနေတာ \r\nမျိုးကိုပြောချင်တာပါ၊ \r\n\r\n```js\r\n\r\nfunction fnc(iAmAParameter){ // <- parameter\r\n\r\n    console.log(iAmAParameter)\r\n\r\n}\r\n\r\nconst iAmAnArgument1 = 1\r\nconst iAmAnArgument2 = \"world\"\r\nconst iAmAnArgument3 = \"hello\"\r\nconst iAmAnArgument4 = true\r\n\r\nfnc(iAmAnArgument1) // <- argument 1\r\nfnc(iAmAnArgument2) // <- argument 2\r\nfnc(iAmAnArgument3) // <- argument 3\r\nfnc(iAmAnArgument4) // <- argument 4\r\n\r\n```\r\n\r\n---\r\n\r\n### **getting arguments**\r\n\r\n#### arguments keyword \r\n\r\n- arguments ဆိုတဲ့ keyword  နဲ့ function တစ်ခုထဲကိုလာထည့်ထားတဲ့ arguments တွေကို အဲဒီ keyword သုံးပြီး ကြည့်လို့ရတယ်။\r\n\r\n- index based key,value pair ပုံစံနဲ့ Argument object ထဲမှာ ပြန်ပြပေးပါတယ်၊\r\n\r\n```js\r\n\r\nfunction fn(string){\r\n\r\n    console.log(arguments)\r\n}\r\n\r\nfn(\"hello world\", \"I am coding in javascript\", \"it is a really cool language\") \r\n\r\n/**\r\n * return\r\n * [Arguments] {\r\n  '0': 'hello world',\r\n  '1': 'I am coding in javascript',\r\n  '2': 'it is a really cool language'\r\n}\r\n/\r\n```\r\n\r\n#### rest operator\r\n\r\n    - arguments keyword အတိုင်း function တစ်ခုထဲကိုလာထည့်ထားတဲ့ arguments တွေကို ကြည့်ဖို့ပဲ ဒါပေမယ့် သူက array လိုက် return ပြန်ပေးတယ်။ \r\n\r\n    - arguments  \"n\" number အထိကြိုက်သလောက်ထည့်သူက အကုန်လုံးကို arrayထဲထည့်ပြီးပြပေးမှာပါ။\r\n\r\n    - သတိထားစရာသေးသေးလေးတစ်ခုကတော့ သူနဲ့ syntax အတူတူဖြစ်တဲ့ spread operator ဆိုတာလဲရှိပါသေးတယ်။ ၂ ခုလုံးကတော့ iterable object destructuring လုပ်တဲ့အခါသုံးတဲ့အတွက် naming ကတော့ interchangeable သုံးလို့ရပါတယ်။\r\n    \r\n```js\r\n\r\n// rest operator\r\nfunction fn(...number){\r\n\r\n    console.log()\r\n}\r\n\r\nfn(\"hello world\", \"I am coding in javascript\", \"it is a really cool language\")\r\n```\r\n\r\n-----\r\n\r\n\r\n### **default parameter**\r\n\r\n    function တစ်ခုကို စပြီးဖန်တီးတဲ့အခါ နောက်လာမယ့် function call တွေအတွက် argument နေရာမှာ default value ထားထားလို့ရပါတယ်။ \r\n\r\n    သူ့ကို invoke လုပ်တဲ့အခါ ဘာ argument မှမထည့်ပဲခေါ်သုံးရင် သူ့ရဲ့ default value ကိုယူသုံးမှာဖြစ်ပြီးတော့၊ ထည့်ထားရင်တော့ \r\n\r\n    ထည့်လိုက်တဲ့ value ကိုယူသုံးမှာပါ\r\n\r\n```js\r\nfunction doubleIt(num = 2){\r\n    return num * 2\r\n\r\n}\r\n\r\ndoubleIt() // 4\r\ndoubleIt(4) // 8\r\n\r\n```\r\n---\r\n\r\n### **callbacks & higher order functions**\r\n\r\n**callbacks တွေက JavaScript မှာ အရမ်း အရမ်းအရေးကြီးပါတယ်။ JavaScript program တွေရဲ့နေရာတိုင်းနီးပါးမှာ သူတို့ကိုသုံးပါတယ်။**\r\n\r\n    - callback ဆိုတာအရိုးရှင်းဆုံး ရှင်းပြရရင် function တစ်ခုရဲ့ parameter မှာ နောက်ထပ် function တစ်ခု ထည့်ပြီး\r\n\r\n    - ပထမ function run ပြီးသွားတဲ့ အချိန် အဲဒီထည့်ထားတဲ့ function ကိုဆက် run စေတာပါ\r\n\r\n    - higher order function ကတော့ callbacks တွေကို သူ့ parameter ထဲမှာလက်ခံပြီး run ပေးတဲ့ parent function တစ်ခုပါ\r\n\r\n```js\r\n\r\n// higher order function\r\nfunction firstFunction(secondFunction){\r\n    \r\n    console.log(\"I run first\")\r\n\r\n    secondFunction()\r\n}\r\n\r\n// callback function\r\nfunction anotherFunction(){\r\n    console.log(\"I run second, and I am a callback function.\")\r\n}\r\n\r\nfirstFunction(anotherFunction)\r\n\r\n```\r\n    အနောက်က callback function ထဲမှာ ကိုယ်လိုတဲ့ argument တွေထပ်ထည့်လို့ရသေးတယ်\r\n\r\n```js\r\n\r\nfunction firstFunction(secondFunction, name){\r\n    \r\n    secondFunction(name.toUpperCase())\r\n}\r\n\r\nfunction callback(name){\r\n    console.log(\"My name is\", name)\r\n}\r\n\r\nfirstFunction(callback, \"castro\")\r\n\r\n\r\n```\r\none more example..\r\n\r\n```js\r\n// ဒါတွေက callback functions တွေ\r\nfunction divide(number1, number2){\r\n    return number1 / number2\r\n}\r\n\r\nfunction multiply(number1, number2){\r\n    return number1 * number2\r\n}\r\n// ဒါက higher order function\r\nfunction calculate(num1, num2, operator){\r\n\r\n    return operator(num1, num2)\r\n}\r\n\r\n\r\n\r\n```\r\n\r\n---\r\n\r\n\r\n### **arrow functions**\r\n\r\n    - arrow functions တွေဆိုတာ normal function တွေလိုပါပဲ၊ ဒါပေမယ့် **function keyword** ကိုသုံးစရာမလိုပဲ ပုံမှန် variable declare လုပ်သလိုမျိုး ဖန်တီးနိုင်ပါတယ်။\r\n\r\n    - arrow functions တွေက ကြည့်ရတာ ပိုပြီး clean ဖြစ်ပါတယ်။\r\n    \r\n    - အကြီးမားဆုံးကွာခြားချက်က **this**  ဆိုတဲ့ keyword ကို အသုံးပြုဖို့လိုလာတဲ့ အချိန်မှပဲ ကွဲပြားချက်လေးတွေ ဖြစ်လာတာပါ. \r\n    (**this** keyword ကိုတော့ဒီ section မှာအကျယ်ရှင်းပြလို့မရသေးပါ. သို့သော် ဥပမာတွေတော့ ပါပါမယ်။ module 2မှာ ဆက်ပြီးတော့ အကျယ်ရှင်းပြသွားပါမယ်။)\r\n    \r\n    - arrow functions are **not** hoisted.\r\n\r\n```js\r\nconst arrowFn = () => {\r\n    console.log(\"I am an arrow function\")\r\n}\r\n\r\narrowFn()\r\n```\r\n\r\n\r\n#### one line return code\r\n```js\r\n// with arrow function,\r\n// you will need a parentheses for some case. but mostly it does't matter\r\nconst isOdd = num => num % 2 === 0\r\n\r\n// with normal function\r\nconst isOdd = function (num) {return num % 2 === 0;};\r\n\r\n\r\n```\r\n\r\n\r\n### what's coming more about functins in next module..\r\n- #### currying\r\n- #### closure\r\n- #### recursion\r\n- #### constructor functions and \"this\" keyword\r\n- #### thenables callbacks\r\n- #### async functions\r\n- #### custom methods"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "---"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Arrays\r\n\r\n- Array ဆိုတာ programming language တိုင်းမှာပါဝင်တဲ့ built-in data structure တစ်ခုပါ၊\r\n- Array တွေမှာ elements (data types) အမျိုးမျိုးကို ထည့်သွင်းနိုင်တယ်။\r\n- Array တွေကို loop ပတ်လို့ရတယ်၊\r\n- Array တွေကကြိုက်တဲ့နေရာကို **index**  နဲ့ access ဝင်လို့ရတယ်။\r\n- length ဆိုတဲ့ Property ရှိတယ်။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// object တစ်ခုက တကယ့် actual Array type ဖြစ်ရဲ့လားဆိုတာ စစ်ဆေးနည်း။\r\n\r\n\r\n/**\r\n * Array.isArray(putObjectHere)\r\n */\r\n\r\nconst string = \"hello\"\r\nconst obj = {a : 1, b : 2}\r\nconst array = [1,2,3]\r\nconsole.log(Array.isArray(string)) // false\r\nconsole.log(Array.isArray(obj)) // false\r\nconsole.log(Array.isArray(array)) // true"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// checking if something is an array\r\nconst iAmAnArray = [1,3,6,4,5, \"six\", \"seven\",true]\r\n// You can not use typeof keyword to check if it's an array because it will only show \"object\" because they actually are objects in javascript.\r\nconsole.log()"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// Arrays are built-in data structures in most programming languages including js, arrays\r\n\r\nconst elements = [\"dog\", \"cat\", true ]\r\n// Arrays can be accessed by index which are zero based.\r\nconsole.log(elements)\r\nconsole.log(elements[0])\r\nconsole.log(elements[1])\r\nconsole.log(elements[2])\r\nconsole.log(elements[3])"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## properties, destructing, assigning"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const originalArray = [\"dog\", \"cat\", \"fish\", \"bird\"]\r\n\r\noriginalArray[4] = \"rabbit\"\r\noriginalArray[5] = \"sloth\"\r\noriginalArray[6] = \"kangaroo\"\r\n\r\nconsole.log(originalArray)\r\n\r\n// you don't need to write a,b,c .. I wrote it here because the code interpreter is not working here.\r\nconst [ a, b, c,favoriteAnimal, d, e,f] = originalArray \r\n\r\nconsole.log(favoriteAnimal)\r\nconsole.log(favoriteAnimal.length)"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// getting the last element from an array no matter the array size\r\nconst array = [1,2,3,4,5]\r\n\r\nconsole.log(array[array.length -1 ])"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Array တစ်ခုထဲကို element အသစ်တွေကို index နဲ့ထည့်တဲ့အခါ အဲဒီ Array ရဲ့က length ကတစ်ခုတိုးသွားတာမျိုးမဟုတ်ပါဘူး \r\nတကယ်တော့ ကိုယ့်ထည့်လိုက်တဲ့ index အတိုင်းကို length တိုးသွားတာပါ၊ အောက်ကဥပမာကိုကြည့်ချင်းဖြင့် ပထမမှာ array ထဲမှာ element ၃ ခုပဲရှိလို့ သူ့ရဲ့ length က 3 ပါ။\r\nဒါပေမယ့် အဲဒီ array ရဲ့ index 100 မှာ element တစ်ခု ကိုထည့်လိုက်တော့ သူ့ရဲ့ length က 3 ကနေ 101 ဖြစ်သွားပါတယ်။\r\nကြားမှာ မရှိတဲ့ element တွေရဲ့ value တွေက အကုန် undefined တွေပါ"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// one of the famous interview question about array\r\nconst array = [1,2,3]\r\n\r\narray[100] = 100\r\n\r\n// what will it show?\r\nconsole.log(array.length)"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "---"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# loops\r\n\r\nLoop တွေက Programming world မှာ လုံးဝကိုအ‌ရေးပါတယ်၊ သင်ရတာတော့ မခက်ခဲသလိုပဲ ဒါပေမယ့် အရမ်းအ‌ရေးပါတဲ့ Task တွေကို ပြုလုပ်ပေးနိုင်တယ်။\r\nLoops တွေဆိုတာ repeated task တွေကို သက်မှတ်ထားတဲ့ အခြေအနေပေါ်မူတည်ပြီး memory handle လုပ်နိုင်သလောက် အကြိမ်အရေအတွက်အကန့်အသက်တစ်ခုထိ ပြုလုပ်တာပေးဖြစ်တယ်။ JavaScript မှာမကပဲ programming language တိုင်းမှာမဆို အခြေခံအားဖြင့် Loop ကို နည်းလမ်း ၂ မျိုးသုံးပြီး ပတ်နိုင်တယ်၊ အဲဒီနည်း ၂မျိုးလုံးက condition တစ်ခုပေါ်မှာ မူတည်ပြီး အဲဒီ condition ကို နဲ့ မဆန့်ကျင်မခြင်း ဆက်လုပ်နေမှာ ဖြစ်လို့ သုံးတဲ့ အခါ infinite loop မဖြစ်စေဖို့ break condition ပါဝင်ဖို့အထူးဂရုပြုရပါမယ်။\r\n\r\nloops တွေအပြင် တခြား **for of** နဲ့ **for in** statements တွေလဲရှိပါသေးတယ်၊ သူတို့ကိုတော့ iterable နဲ့ object တွေကိုလေ့လာပြီးမှ တစ်ဆင့်တက်ပါရန်။\r\n\r\n\r\n## loops\r\n\r\n1) for loop\r\n    ```js\r\n    for(initial; condition; afterThought){\r\n        <!-- task -->\r\n    }\r\n    ```\r\n    \r\n2) while loop\r\n    ```js\r\n    while(condition){\r\n        <!-- tasks -->\r\n    }\r\n    ```\r\n\r\n## iterators' statement\r\n\r\n3) for of\r\n\r\n4) for of"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const time = 3\r\n\r\nfor (let index = 0; index < time; index++) {\r\n    console.log(\"I am in a loop, I said it for\", time, \"times\")\r\n    \r\n}\r\n// assessing to an array\r\nconst array = [3,4,5,6,7]\r\nfor (let index = 0; index < array.length; index++) {\r\n    console.log(array[index])\r\n    \r\n}"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "\r\nlet initialValue = 0\r\nwhile(initialValue < 10){ // break point\r\n    console.log(\"I will be logged in the console for 9 times\", initialValue);\r\n    initialValue++ // change initial value\r\n\r\n    // initial value တစ်ခုကို loop တစ်ခေါက်ပတ်တိုင်း 1 စီတိုးသွားစေဖို့ syntax ကို အောက်ကအတိုင်းတွေလဲရေးလို့ရပါတယ်။\r\n\r\n    // initialValue = initialValue + 1 \r\n    // initialValue += 1\r\n}"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### skip the loop conditionally\r\n\r\n- တစ်ခါတစ်လေ iterable object(array) တစ်ခုမှာ ကိုယ်ကျော်သွားစေချင်တဲ့ element တွေရှိချင်ရှိနိုင်ပါတယ်၊\r\n- continue ဆိုတဲ့ keyword နဲ့ loop ရဲ့ iteration တစ်ခုကို conditionally skip လို့ရပါတယ်။\r\n- သတိထားရမှာလေးက while loop မှာဆိုရင် conditional block မှာ increment ကိုတိုးပေးရပါတယ်"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const myPersonal = [\"I play games a lot\", \"I wake up at 8am everyday\", \"I have a crush on a girl\", \"I like ramen\"]\r\n\r\n/**\r\n * myPersonal ဆိုတဲ့ အပေါ်က array ထဲက element တွေကို console ထုတ်မယ်၊\r\n * ဒါပေမယ့် အဲဒီ အထဲက index 2 element ကို console မှာ မပေါ်စေချင်ဘူး ဆိုပါစို့\r\n * ဆိုတော့ initial value က ကိုယ်ကျော်သွားစေချင်တဲ့ index ကို ရောက်တဲ့အခါ continue ဆိုတဲ့ keyword ကိုသုံးပါမယ်\r\n */\r\n\r\nfor (let index = 0; index < myPersonal.length; index++) {\r\n\r\n    if(index === 2) continue\r\n\r\n    console.log(myPersonal[index]);\r\n    \r\n}"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "I play games a lot",
                                "I wake up at 8am everyday",
                                "I like ramen",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "/**\r\n * same thing on while loop\r\n */\r\n\r\nconst myPersonal = [\"I play games a lot\", \"I wake up at 8am everyday\", \"I have a crush on a girl\", \"I like ramen\"]\r\nlet index = 0\r\n\r\nwhile(index < myPersonal.length){\r\n    if(index === 2){\r\n        index += 1\r\n        continue\r\n    }\r\n    console.log(myPersonal[index])\r\n    index += 1\r\n}"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "I play games a lot",
                                "I wake up at 8am everyday",
                                "I like ramen",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### break the loop conditionally\r\n\r\n- iterable object(array) တစ်ခုမှာ condition  တစ်ခုရောက်ရင် ရပ်လိုက်ချင်တဲ့ အခြေအနေတွေ ရှိချင်ရှိနိုင်ပါတယ်၊\r\n- **break** ဆိုတဲ့ keyword နဲ့ loop ရဲ့ iteration တစ်ခုကို conditionally ရပ် လို့ရပါတယ်။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const myPersonal = [\"I play games a lot\", \"I wake up at 8am everyday\", \"I have a crush on a girl\", \"I like ramen\"]\r\nfor (let index = 0; index < myPersonal.length; index++) {\r\n\r\n    if(index === 2) continue\r\n\r\n    console.log(myPersonal[index]);\r\n    \r\n}"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### nested loops\r\n\r\nloop တစ်ခုထဲမှာက တစ်ခုထက်ပိုတဲ့ တခြား nested loop တွေ ထည့်လို့ရပါသေးတယ်။ ကိုယ်လိုရာ အကြောင်းအရာပေါ်မူတည်ပြီး အသုံးပြုနိုင်ပါတယ်။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "for (let i = 1; i <= 5; i++) {\r\n    let stars = \"\";\r\n    for (let j = 1; j <= i; j++) {\r\n       stars += \"*\";\r\n    }\r\n    console.log(stars);\r\n }\r\n \r\n//  printing stars patterns\r\n\r\n/**\r\n    *\r\n    **\r\n    ***\r\n    ****\r\n    *****\r\n */"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# loop vs iteration\r\n\r\nမှတ်ချက်။ ။ object literal တွေကိုမသိသေးရင် [object](#objects) ကိုအရင်လေ့လာပါ\r\n\r\n### loop\r\n- tasks တစ်ခုကို recursively ထပ်ခါထပ်ခါ၊ ပေးထားတဲ့ break point condition အထိ မရောက်မချင်း ပြုလုပ်တာကို looping လို့ခေါ်တယ်\r\n- break point အတွက် initial value ကို မပြောင်းလဲရင်, program က infinite loop ထဲကိုရောက်သွားပြီး ဘယ်တော့ execute လုပ်လို့ပြီးတော့မှာမဟုတ်ပါ။\r\n\r\n### iteration\r\n- iterable object တစ်ခုထဲကို ဝင်ရောက်ပြီး သူ့ရဲ့ element တစ်ခုစီကို one at a time interact ပြုလုပ်တာကို iteration လို့သတ်မှတ်ပါတယ်။\r\n- iteration က iterable object ထဲကိုဝင်ပြီး traverse လုပ်ရုံပဲမို့ break point မပါပါဘူး၊ \r\n\r\n### for of, for in\r\n- အပေါ်မှာ for loop ကို ဥပမာပြခဲ့တုန်းက အဲဒီ operation ကို loop လုပ်တယ်ခေါ်ပါတယ်\r\n- javascript မှာ iterable ဖြစ်တဲ့ data structures တွေရှိပါတယ်၊\r\n    - array\r\n    - string etc..\r\n- သူတို့ရဲ့ အထဲကို တခြားအကူညီတွေမပါပဲ walkthrough လုပ်လို့ရတယ်။\r\n- for of နဲ့ for in တို့ဆိုတာ iterator တွေဖြစ်တယ်။ အရိုးရှင်းဆုံး ဘာသာပြန်ရင်တော့ သူတို့က array, string အစရှိတဲ့ iterate လုပ်လို့ရတဲ့အရာတွေကို ဝင်ပြီးမွှေလို့ရတယ်ပေါ့\r\n- for in က **key** တွေကို iterate လုပ်တယ်, သူ့ကို object literal \"{}\" တွေမှာသုံးလို့မရပါ၊ ဘာကြောင့်ဆိုတော့ object literal တွေက built-in iterator မပါလို့၊ အသေးစိတ်ကို module-2 မှာ ဆက်လေ့လာပါ။\r\n- for of ကတော့ **value** တွေကို iterate လုပ်တယ်\r\n- for in က **value** for of က **key** ရဲ့ ဆိုလိုရင်းက, ဥပမာ array တစ်ခုကို for in နဲ့ iterate လုပ်ရင် အဲဒီ array ရဲ့ element တွေကိုရမယ်, for of နဲ့ iterate လုပ်ရင် သူ့ထဲက element တွေရဲ့ index ကိုရမယ်။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const array = [\"‌a\", \"b\", \"c\", \"d\", \"e\", \"f\"];\r\n\r\nfor (const element of array) {\r\n    console.log(element);\r\n }\r\n\r\nfor (const index of array) {\r\n    console.log(index);\r\n }"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const obj = { a: 1, b: 2, c: 3, d: 4 };\r\n\r\n\r\nfor (const key in obj) {\r\n    console.log(key);\r\n}"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "---"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Objects"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "//  Objects\r\n\r\nconst person = {\r\n    name : \"emily\",\r\n    age : 38,\r\n    married : true,\r\n}\r\n\r\nconsole.log(person)\r\nconsole.log(\"person name\",person.name)\r\nconsole.log(\"person age\",person.age)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "{ name: 'emily', age: 38, married: true }",
                                "person name emily",
                                "person age 38",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## complex objects and **this** keyword"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const person = \"smith\";\r\nconst shopping = {\r\n   person,\r\n   items: [\"fruit\", \"milk\", \"vegetables\", \"meat\"],\r\n   shopName: \"city mart\",\r\n   purchasedDate: \"23/4/23\",\r\n   introduce: function () {\r\n      return `hello I am ${this.person}, I bought ${\r\n         this.items.length\r\n      } items from ${this.shopName} on ${this.purchasedDate}, items are ${[\r\n         ...this.items,\r\n      ]}`;\r\n   },\r\n   introduce2: () => {\r\n    return `hello I am ${this.person}, I bought ${\r\n       this.items.length\r\n    } items from ${this.shopName} on ${this.purchasedDate}, see you can not use this keyword in an arrow function.`;\r\n },\r\n\r\n};\r\n\r\nconsole.log(shopping.introduce());\r\nconsole.log(shopping.introduce2());\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Accessing objects"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// Object Destructuring\r\n// level 1 destructuring\r\nconst obj = {name : \"joe\", age : 23}\r\n\r\nconst {age} = obj\r\n\r\nconsole.log(\"person age is\",age) // \"23\"\r\n\r\n// level 2 destructuring and so on..\r\n\r\nconst students = {name : \"freya\", age : 33, scores : {math : 49, english : 77, biology : 66}}\r\n\r\nconst {scores : {math}} = students\r\n\r\nconsole.log(math) // 49"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Assigning objects"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const obj = {a : 'apple'}\r\n\r\nconst someVariable = null\r\n\r\nobj[\"b\"] = \"ball\"\r\nobj[\"c\"] = \"car\"\r\nobj[\"d\"] = 123\r\nobj[\"e\"] = {anotherObject : {name : \"ryan\", age : 12}}\r\nobj[\"f\"] = someVariable || \"this is an unknown variable\"\r\n\r\nconsole.log(obj)"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## deleting property from an object\r\n- delete keyword\r\n    - return boolean\r\n- destructuring\r\n    - return removed property"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const obj = {name : \"joe\", age : 45, isPresident : true}\r\n\r\ndelete obj.isPresident\r\nconsole.log(obj)"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Objects to arrays\r\n    Object တစ်ခုကို array သို့ပြောင်းနည်း\r\n- Object.entries\r\n- Object.keys\r\n- Object.values"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const object = { a: 1, b: 2, c: 3, d: 4 };\r\n\r\n// destructuring on the fly\r\nObject.entries(object).forEach(([key, value]) => {\r\n   console.log(key, value); // a,1 b,2 c,3, d,4\r\n});\r\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const object = {a : \"apple\", b : \"ball\", c : \"car\"}\r\n\r\nObject.keys(object).forEach((key) => {\r\n    console.log(key); // a, b , c\r\n });\r\n\r\nObject.values(object).forEach((values) => {\r\n    console.log(values); // apple, ball, car\r\n });\r\n "
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Shallow copy ဆိုတာ object တစ်ခုထဲက nested object တစ်ခု ကိုcopy ယူလာတဲ့အခါ အဲဒီ object လိုက်ကို ပွားလိုက်တာမျိုးမဟုတ်ပဲ သူ့ရဲ့ memory reference ကိုပဲပွားယူလာတာမျိုးကိုဆိုတာတာပါ, အဲလိုဘာဖြစ်တက်လဲပေါ့နော် အဲလိုဆိုရင် ခုနက shallow copy နဲ့ ပွားလာတဲ့ object ထဲက nested object တစ်ခုကို အပြောင်းအလဲလုပ်တိုင်း သူ့ရဲ့ original object ကပါလိုက်ပြောင်းပါတယ်၊ ဥပမာအနေနဲ့..."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// Original object တစ်ခုရှိမယ်\r\nconst originalObject = {\r\n    a: \"apple\",\r\n    b: { 1: \"ball\", 2: \"banana\" },\r\n};\r\n\r\n// အဲဒီ Original object ကို spread operator နဲ့သုံးပြီး အသစ်တစ်ခုပွားလိုက်မယ်။\r\nconst copyObject = { ...originalObject };\r\n\r\n// ပွားလိုက်တဲ့ object အသစ်ကို အပြောင်းအလဲ changes လေးအနည်းငယ်လုပ်မယ်။\r\ncopyObject.a = \"airplane\";\r\ncopyObject.b[2] = \"bed\";\r\n\r\nconsole.log(\"original object before\", originalObject);\r\nconsole.log(\"copy object\", copyObject);\r\nconsole.log(\"original object after\", originalObject);\r\n//  console ထုတ်ကြည့်တဲ့အချိန်မှာ original object ရဲ့ ပထမ property nested မဟုတ်တဲ့ တစ်ခုက ကမပြောင်းလဲပဲတည်ရှိနေပြီး \r\n//  ဒုတိယ properties nested object ကတော့ origianl မှာလိုက်ပြောင်းသွားတာကိုတွေ့ရပါမယ်"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Deep copy ကတော့  ရှင်းပါတယ် Object တစ်ခုကို လုံးဝကို အသစ်ပွားလိုက်တာ ဖြစ်ပြီးတော့ အဲဒီပွားလိုက်တဲ့ အသစ်မှာ changes တွေဖြစ်တိုင်းသူ့ရဲ့ original object ကိုလုံးဝသွားမပြောင်းပါဘူး။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "\r\nconst originalObject = {\r\n    a: \"apple\",\r\n    b: { 1: \"ball\", 2: \"banana\" },\r\n };\r\n\r\n // ၂ ခု compare လုပ်ကြည့်ရအောင် မဖျက်ပဲထားထားတာပါ\r\n // const copyObject = { ...originalObject };\r\n // javascript မှာ structureClone global function တစ်ခုရှိပါတယ်, သူကို object တွေကို deep copy ဖို့အတွက်အသုံးပြုနိုင်ပါတယ်။\r\n const copyObject = structuredClone(originalObject);\r\n \r\n console.log(\"original object before\", originalObject);\r\n copyObject.a = \"airplane\";\r\n copyObject.b[2] = \"bed\";\r\n console.log(\"copy object\", copyObject);\r\n//  အပေါ်မှာ copy object ကို changes တွေပြုလုပ်တယ် ဒါပေမယ့် original မှာတော့ လိုက်မပြောင်းတော့ပါဘူး\r\n console.log(\"original object after\", originalObject);\r\n "
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Shallow copy, deep copy က မှတ်သားလောက်စရာကောင်းတဲ့ concept တစ်ခုဖြစ်ပါတယ်၊ အဲ့လို case မျိုးတွေကို array method တွေသုံးပြီး array တွေကို အပြောင်းအလဲလုပ်ကြတဲ့အခါမှာ တွေ့မြင်နိုင်ပါတယ်။ array တွေဆိုတာ data types မျိုးစုံကို သိုလှောင်ထားတာကြောင့် မိမိအနေနဲ့ nested object တွေပါလာရင် ဂရုပြုမိတက်စေဖို့အ‌ရေးကြီးပါတယ်။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// shallow copy\r\nconst array = [1, 2, 3, 4, 5, { a: { apple: { fruit: \"apple is sweet\" } } }];\r\n\r\nconst newArray = array.slice();\r\n\r\nnewArray[0] = \"one\";\r\nnewArray[1] = \"two\";\r\nnewArray[5].apple = \"object is nested\";\r\n\r\nconsole.log(\"original\",array);\r\nconsole.log(\"copy\",newArray);\r\n\r\n\r\n// this is neither a deep copy nor a shallow copy just demo\r\n// const array = [1, 2, 3, 4, 5, {a : {apple : { fruit : \"apple is sweet\"}}}];\r\n\r\n// const newArray = array;\r\n\r\n// newArray[0] = \"one\";\r\n// newArray[5].apple = \"object is nested\";\r\n\r\n// console.log(array);\r\n// console.log(newArray);\r\n\r\n\r\n// for deep copy you can use structureClone\r\nconst newArray = structuredClone(array);\r\n\r\nnewArray[0] = \"one\";\r\nnewArray[5] = \"object is changed\";\r\n\r\nconsole.log(array[5]);\r\nconsole.log(newArray);"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "---"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# String Methods\r\n\r\n- [strings details](#deep-dive-into-strings)\r\n- [startsWith](#startswith)\r\n- [endsWith](#endswith)\r\n- [localCompare](#localcompare)\r\n- [split](#split)\r\n- [slice](#slice)\r\n- [replace](#replace)\r\n- [toLowerCase & toUpperCase](#lowercase--uppercase)\r\n- [concat](#stringconcat)\r\n- [match](#match)\r\n- [matchAll](#matchall)\r\n- Regex\r\n- [trim](#trim)\r\n- [includes](#includes)\r\n- [charAt](#charat)\r\n- charCodeAt\r\n- fromCharCode\r\n- [indexOf](#stringindeof)\r\n- optional chaining"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Deep dive into strings \r\n\r\n1) string တွေကို index နဲ့ဝင်လို့ရတယ်။\r\n\r\n2) length ဆိုတဲ့ proerty ရှိတယ်။\r\n\r\n3) string တွေက iterable ဖြစ်တယ်။\r\n\r\n4) immutability\r\n\r\n4) template literal feature ပါတယ်။\r\n\r\n5) \"+\" ကိုသုံးပြီး string တစ်ခုနဲ့တစ်ခု concat လုပ်လို့ရတယ်\r\n\r\n5) regular expression\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## string တွေက iterable ဖြစ်တယ်။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const string = \"hello world\"\r\nfor (const str of string) {\r\n    console.log(str)\r\n}\r\n\r\n/**\r\nh\r\ne\r\nl\r\nl\r\no\r\n \r\nw\r\no\r\nr\r\nl\r\nd\r\n */"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "length property ရှိပြီး, သူတို့ကို 0 based index နဲ့ဝင်လို့ရတယ်။ ဆိုလိုတာက index 0 ဆိုတဲ့နေရာက ရှေ့ဆုံးစာလုံး ကနေစရေတာပါ။\r\nဒီတော့ index 0 ဆိုတဲ့နေရာက ရှေ့ဆုံးစာလုံးနဲ့ ညီပါတယ်။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const string = \"Happy-coding\"\r\n\r\n\r\nfor(let i =0; i<string.length;i++){\r\n    console.log(string[i])\r\n}\r\n\r\n/**\r\n * H\r\na\r\np\r\np\r\ny\r\n-\r\nc\r\no\r\nd\r\ni\r\nn\r\ng\r\n\r\n */"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "string တွေက mutable မဖြစ်ပါ၊ immutable ပါ။\r\n\r\nအပေါ်မှာပြောခဲ့တဲ့အတိုင်း string တွေမှာ သူ့တို့ရဲ့ ကိုယ်ပိုင် index နေရာတွေကနေတစ်ဆင့် ဝင်လို့ရတယ်ဆိုပေမယ့်။ သူတို့ကို တခြားတန်ဖိုးတစ်ခု ပြောင်းလို့တော့မရဘူး။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const string = \"I am a string.\"\r\n\r\nstring[0] = \"w\"\r\nstring[1] = \"'\"\r\nstring[2] = \"r\"\r\nstring[3] = \"e\"\r\nstring[4] = \"\"\r\n\r\nconsole.log(string)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "I am a string.",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "\"+\" သုံးပြီး တစ်ခုနဲ့တစ်ခု concat လုပ်လို့ရတယ်။ ပေါင်းလို့ရတာကိုပြောပါ။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const a = \"hello\"\r\nconst b = \"world\"\r\n\r\nconsole.log(a+\" \"+b) // hello world"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "regular expression \r\n\r\n### Regular expression တွေဆိုတာ \r\n\r\njavascript မှာတော့ object data type တစ်မျိုး ဖြစ်ပါတယ်။ သူက တကယ်တော့ javascript နဲ့ဘာမှမသက်ဆိုင်တဲ့အရာပါ၊ regex တွေကို ဘယ် programming မှာမဆို အသုံးပြုနိုင်ပါတယ်။ သူရဲ့ လုပ်ဆောင်ချက်ကတော့ string data တွေကို ကိုယ်ကြိုက်သလို မွှေနှောက်ရှာဖို့၊ programming language ရဲ့အကူညီနဲ့ စာတွေကို လိုသလိုပြုပြင်ဖို့၊ စစ်ဆေးဖို့ အစရှိတဲ့ powerful ဖြစ်တဲ့ operation တွေကို လုပ်ဆောင်နိုင်ပါတယ်။\r\n\r\n\r\n### အပေါ်မှာ ပြောခဲ့တဲ့အတိုင်း Regex ကိုအသုံးပြုပြီး ဆိုတာနဲ့ ရည်ရွယ်ချက်က ပုံမှန်အားဖြင့် ၃ ခုပဲရှိပါတယ်။\r\n\r\n- string တစ်ခုထဲက တစ်ချို့ sub string တစ်စုကို ဆွဲထုတ်ဖို့\r\n- string ကို modify ဖို့\r\n- string တစ်ခုက သတ်မှတ် Pattern နဲ့ကိုက်လားဆိုတာ စစ်ဖို့\r\n\r\ndatabase တွေ၊ blog post တွေလို string အကြီးကြီး တွေမှာ၊ ကိုယ် လိုချင်တဲ့ သတင်းအချက်လက် အစိတ်အပိုင်းတွေပါလားဆိုတာစစ်တာမျိုး၊ <br/>\r\n\r\nemail validation, password validation, searching patterns အစရှိတဲ့ string checking operation တွေမှာ ပေးထားတဲ့ pattern နဲ့မကိုက်ညီမညီ စစ်တာမျိုး၊ <br/>\r\n\r\nstring method တွေရဲ့ အကူညီနဲ့ ကိုယ်ပြောင်းချင်တဲ့ စာတွေကို သွားပြောင်းတာမျိုး အစရှိတာတွေ လုပ်ဆောင်ဖို့ပါ။\r\n\r\nမှတ်ချက်။ ။ Regex တွေကိုတော့ အချိန်သီးသန့်ပေးပြီးတော့လေ့လာနိုင်သလို, Regex generator တွေနဲ့ Chatgpt ကိုအသုံးပြုတော့လဲ အလွယ်တကူရရှိနိုင်ပါတယ်။ <br/>\r\n\r\n\r\nအောက်မှာတော့ အသုံးဝင်ပြီးမှတ်ရလွယ်တဲ့ regex basic လေးတွေကို ဥပမာနဲ့ သုံးပြသွားပါမယ်။"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "<h3 align=\"center\" style=\"color: blue;\">အပေါ်က code တွေကို ကိုယ့် ဥပမာနဲ့ ကိုယ်ပြန်ရေးကြည့်ပါ</h3>"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# startsWith\r\n\r\nmetod နာမည်အတိုင်းပဲ string တစ်ခုက character တစ်ခုနဲ့ စလားဆိုတာကို စစ်ဖို့သုံးတဲ့ query method လေးတစ်ခု ဖြစ်ပါတယ်။\r\n\r\nလက်တွေ့ ဥပမာအနေနဲ့ backend development မှာ cookie token နာမည်တွေကို ဒါလေးနဲ့သုံးပြီး စစ်ကြတယ်။ case sensitive ဖြစ်လို့ input ကိုဂရုစိုက်ထည့်ဖို့လိုပါတယ်။\r\n\r\nမှတ်ချက်။ ။ Regex နဲ့တော့သုံးလို့မရပါ\r\n\r\n## syntax\r\n\r\n```js\r\n    startsWith(stringToSearch, startPosition)\r\n```"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const string = \"The string that starts with 'the'\";\r\n\r\nconsole.log(string.startsWith(\"The\")); // true\r\nconsole.log(string.startsWith(\"T\")); // true\r\nconsole.log(string.startsWith(\"the\")); // false"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "သူ့ကို ကိုယ်စရှာစေလိုတဲ့နေရာကနေ စရှာခိုင်းလို့လဲရတယ်"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const string = \"The string that starts with 'the'\";\r\n\r\nconsole.log(string.startsWith(\"T\", 4)); // false\r\nconsole.log(string.startsWith(\"s\", 4)); // true\r\nconsole.log(string.startsWith(\"The\",0 )); // true"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# endsWith\r\n\r\nstartsWith နဲ့ပြောင်းပြန် string ရဲ့နောက်မှာ ဆုံးတဲ့ character က ပေးထားတဲ့ argument ထဲကအတိုင်းဟုတ်လားဆိုတာကိုစစ်ပေးတာပါ။\r\n\r\n## syntax\r\n\r\n```js\r\n    endsWith(stringToSearch, startPosition)\r\n```"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const string = \"The string that ends with something!\";\r\n\r\nconsole.log(string.endsWith(\"g\")); // false\r\nconsole.log(string.endsWith(\"!\")); // true\r\nconsole.log(string.endsWith(\"ing!\")); // true\r\n\r\n// string length ထက်ကြီးတာ ကြိုက်သလောက်ပေးလို့ရတယ်\r\nconsole.log(string.endsWith(\"!\", 36)); // true\r\nconsole.log(string.endsWith(\"!\", 360)); // also true\r\n\r\n// last index ကိုအမြဲရနေမယ့်နည်းလမ်း, သူ့ကိုထောက်ပြီး ကိုယ်ပြန်ညွှန်းချင်တဲ့နေရာကို ပြန်ညွှန်းလို့ရတယ်။\r\nကိုယ်console.log(string.endsWith(\"!\", string.length)); // true"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# localCompare\r\nlocalCompare က en alphabetical order မှာ ဘယ်ဟာကအရင်လာလဲဆိုတာကို compare လုပ်တဲ့အခါသုံးတာပါ\r\n- သူက အရင်လာတဲ့ character ကို \">\" grater than လို့သက်မှတ်ပြီး နောက်လာတဲ့ character ကို \"<\" less than လို့သက်မှတ်တာပါ \r\n- alphabetically a က b ထက်အရင်လာတယ်ဆိုတော့ a နဲ့ b compare ရင် for example -> (a - b)  -1 return ပြန်ပေးမှာဖြစ်ပြီး  \r\n- b နဲ့ a ဆိုရင်တော့ 1 ပြန်ပေးမှာပါ for example -> (b - a)\r\n- မှတ်ချက်။ ။ us/en english characters တွေမှာ unexpected behavior တွေမရှိပါဘူး။ တခြား latin language တွေမှာတော့ option parameter မှာ အနည်းငယ် ချိန်ညှိပေးရပါတယ်။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const string = \"a\";\r\nconst string2 = \"b\";\r\n\r\nconsole.log(string.localeCompare(string2)); // -1\r\nconsole.log(string2.localeCompare(string)); // 1"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const string = \"apple\";\r\nconst string2 = \"apron\";\r\n\r\nconsole.log(string.localeCompare(string2)); // -1\r\nconsole.log(string2.localeCompare(string)); //1"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Split"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const string = \"The quick brown fox jumps over the lazy dog\";\r\nconst string2 = \"The,quick,brown,fox,jumps,over,the,lazy,dog\";\r\nconst string3 = \"The,quick,brown-fox,jumps,over,the,lazy,dog\";\r\n\r\nconsole.log(string.split(''))\r\nconsole.log(string2.split(','))\r\nconsole.log(string3.split('-'))\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# slice\r\n\r\n```js\r\nstring.slice(startIndex, endIndex : optional)\r\n```\r\n\r\n- string တစ်ခုကို ကိုယ်စပေးတဲ့နေရာကနေ ဖြတ်ပြီး ဖြတ်လိုက်တဲ့ string အပိုင်း လေးကို return ပြန်ပေးတာပါ\r\n- endIndex ကမထည့်ပေးလဲရတယ်၊ မထည့်ပေးရင် startIndex ကနေ စဖြတ်မှာပါ၊ ထည့်ပေးရင်တော့ ပေးတဲ့ endIndex အထိပဲ ဖြတ်ပေးမှာပါ\r\n- negative index ဆိုရင်အနောက်ကနေ စရေမှာဖြစ်ပါတယ်။ အနောက် ကနေဆိုရင် -1 ကနေစပါတယ်။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "\r\nconst fruit = \"may force be with you apple.\";\r\n\r\nconsole.log(\"0 -> 10\",fruit.slice(10));\r\nconsole.log(\"0 -> 3\",fruit.slice(0, 3));\r\nconsole.log(\"0 -> 21\",fruit.slice(0, 21));\r\nconsole.log(\"0 -> -5\",fruit.slice(0, -7));\r\nconsole.log(\"-2 to -1\",fruit.slice(-5, -1));\r\nconsole.log(\"-2 to -1\",fruit.slice(-5, -2));\r\n\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# match\r\n\r\nRegex ကိုအသုံးပြုပြီ ဆိုတာနဲ့ ရည်ရွယ်ချက်က ပုံမှန်အားဖြင့် ၃ ခုပဲရှိပါတယ်။\r\n\r\n- string တစ်ခုထဲက တစ်ချို့ sub string တစ်စုကို ဆွဲထုတ်ဖို့\r\n- string တစ်ခုက သတ်မှတ် Pattern နဲ့ကိုက်လားဆိုတာ စစ်ဖို့\r\n- string ကို modify ဖို့\r\n\r\nဒီ match, matchAll method တွေက string pattern တွေက သက်မှတ် pattern ထဲမှာဖြစ်ရဲ့လားဆိုတာကိုစစ်ဆေးတာပါ၊ Regular expression နဲ့ပဲတွဲပြီးအသုံးပြုပါတယ် normal string search လဲရပါတယ် ဒါပေမယ့် best use case တော့မဟုတ်ပါဘူး regex နဲ့သုံးတာပဲ best use case ပါ။ ပေးထားတဲ့ pattern နဲ့မညီရင် null return ပြန်ပြီးတော့၊ ညီရင်တော့ Pattern နဲ့ကိုက်တဲ့ subarray data တွေကို array နဲ့ပြပေးတယ်  <br/>\r\n\r\nvs code မှာ ဒီ extension လေးကိုအသုံးပြုပြီးတော့လဲ အသုံးများ regex pattern တွေ generate လုပ်နိုင်ပါတယ်။\r\n> extension id : Monish.regexsnippets"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### string တစ်ခုထဲကနေ ကိုယ်လိုချင်တာတွေ ဆွဲထုတ်ခြင်း"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// use with non regex \r\nconst string = \"I am a string\"\r\n\r\nconsole.log(string.match(\"str\")) // [ 'str', index: 7, input: 'I am a string', groups: undefined ]"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[ 'str', index: 7, input: 'I am a string', groups: undefined ]",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "// use with regex but only first occurrence\r\nconst string = \"Sally sells seashells down by the seashore. The shells she sells are surely SEASHELLS. So if she sells shells on the seashore, I'm sure she sells seashore shells\"\r\n\r\nconsole.log(string.match(/sea/)) \r\n// output ကပြနေတဲ့ အဓိပ္ပာယ်က \"sea\" ဆိုတဲ့ စာလုံးလေးကို index 12 မှာတွေ့ပါတယ်။\r\n// မင်းပေးတဲ့ input ကတော့ ဒါပါ။ \r\n// group တွေကတော့ မင်းရဲ့ input regex pattern ထဲမှာ ဘာမှမရေးထားလို့ undefined ပါလို့ပြနေတာပါ။\r\n\r\n// group ဆိုတာဘာကြီးလဲဆိုတာကိုတော့ လောလောဆယ်မှာ အာရုံမထားပါနဲ့ဦးနော်.."
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[",
                                "  'sea',",
                                "  index: 12,",
                                "  input: \"Sally sells seashells down by the seashore. The shells she sells are surely SEASHELLS. So if she sells shells on the seashore, I'm sure she sells seashore shells\",",
                                "  groups: undefined",
                                "]",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "အပေါ်က example မှာ regex pattern ကိုရှာတဲ့အချိန်မှာ သူက first occurence (first match) ကိုပဲရှာပေးတာပါ။ All occurence ကိုရှာချင်ရင် Regex မှာ global flag လို့ခေါ်တဲ့ \"g\" flag လေးရှိတယ်၊ သူ့ကို သုံးရင် string တစ်ခုရဲ့ sub string တစ်ခုရဲ့ occurrence အကြိမ်စုစုပေါင်းကို သိနိုင်တယ်။\r\nregex flag ပြောင်းသွားတာနဲ့ output လဲပြောင်းသွားတယ်။ \"g\" flag ကတော့ case sensitive ဖြစ်ပါတယ်။ uppercase, lowercase တွေအားလုံး match ဖြစ်ချင်ရင် \"ig\" flag ကိုသုံးနိုင်ပါတယ်။"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### flags\r\n\r\nflag တွေကတော့ regex single search တွေမှာ ဘယ်ဟာကို, ဘယ်လောက်, ဘယ်လိုရှာဆိုတဲ့ညွှန်ကြားချက်လေးတွေ ပေးတာပါပဲ။ တခြား flags တွေအများကြီးရှိပါသေးတယ် update လုပ်ပေးသွားပါမယ်။ \r\n\r\nမှတ်ချက်။ ။ function parameter တွေလိုမျိုး dynamically ထည့်ဖို့လိုတဲ့နေရာတွေမှာ regex pattern တွေအတိုင်းထည့်လို့မရပါဘူး။ RegEx contructor ကိုသုံးရပါတယ်။\r\n\r\n```js\r\nnew RegEx(stringToSearch, flag)\r\n```\r\n- /i \r\n    - case အားလုံးကိုရှာတာပါ, single search မှာသူမပါရင် သူပေးထားတဲ့ case (uppercase or lowercase) နဲ့ match ဖြစ်တဲ့ sub string ကိုပဲပြပါလိမ့်မယ်, သူပါရင် all case ကိုပြပါမယ်။\r\n- /g \r\n    - string တစ်ခုရဲ့ all occurrence ကိုရှာတာပါ,\r\n    - single search မှာသူမပါရင် first match ကိုပဲပြပါလိမ့်မယ်, သူပါရင် all matches ကိုပြပါမယ်။\r\n\r\n### Character classes\r\n\r\n- /d\r\n    - digit number  တွေ ပါမပါကိုရှာတာပါ\r\n- /D\r\n    - digit number  တွေ မဟုတ်တဲ့ဟာ ပါမပါကိုရှာတာပါ\r\n- /w\r\n    - စကားလုံး words တွေရှာတာပါ\r\n- /W\r\n    - စကားလုံး words မဟုတ်တဲ့ဟာ တွေရှာတာပါ\r\n- /S\r\n    - whitespace  တွေကိုရှာတာပါ, whitespace ဆိုတာ space တွေခြားထားတာကိုပြောပါ\r\n\r\n### \r\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "console.log(string.match(/sea/g)) // \"sea\" occurrence is 4 times in the given example string."
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[ 'sea', 'sea', 'sea', 'sea' ]",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "console.log(string.match(/sea/ig)) // \"sea\" occurrence is 5 times in the given example string including all cases."
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[ 'sea', 'sea', 'SEA', 'sea', 'sea' ]",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "| ဒါလေးကိုသုံးပြီး တစ်ခုထက်မက match ကိုရှာမယ်။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const person =\r\n   \"mr James, mr Washington and mr Gorge are all in a room talking about politics and ms Elizabeth and ms smith were in ball room with ms white.\";\r\n\r\nconst regex = /mr|ms/g;\r\n\r\nconsole.log(\r\n   person.replace(\r\n      regex,\r\n      (match) => match.charAt(0).toUpperCase() + match.charAt(1) + \".\"\r\n   )\r\n);\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "Mr. James, Mr. Washington and Mr. Gorge are all in a room talking about politics and Ms. Elizabeth and Ms. smith were in ball room with Ms. white.",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "string ထဲက number တွေဆွဲထုတ်မယ်"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const stringWithNumbers = \"hello123\"\r\nconst stringWithoutNumbers = \"helloworld\"\r\n\r\n// + မပါရင် တစ်လုံးချင်းစီ match မှာပါ\r\n\r\nconsole.log(stringWithNumbers.match(/\\d/g)); // [1,2,3]\r\n\r\n// + ပါရင် အစုလိုက်စီ match မှာပါ\r\nconsole.log(stringWithNumbers.match(/\\d+/g)); // [123]\r\nconsole.log(stringWithoutNumbers.match(/\\d+/g)); // null"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "string ထဲက မဆိုင်တဲ့ characters တွေ, punctuation တွေ symbols တွေ, white spaces တွေကိုဖယ်ထုတ်မယ်။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const string = \"I-am-89-years old,I--have--()=>a-dog/and-4=daughters,\"\r\n\r\nconst regex = /\\w+/g\r\n\r\nconsole.log(string.match(regex))"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const whiteSpaces =\r\n   \"      I    have   a   lot of      white-spaces      in my    string    \";\r\nconst regex = /\\S+/g;\r\n\r\nconsole.log(whiteSpaces.match(regex)); // output -> [ 'I', 'have', 'a', 'lot', 'of', 'white-spaces', 'in', 'my', 'string' ]"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "using a regex as a parameter inside a function\r\n\r\nfunction argument တွေထဲမှာ regex တွေတိုက်ရိုက်ထည့်လို့မရပါဘူး။ အဲလိုထည့်ချင်ရင်\r\n\r\n```js\r\nnew RegExp()\r\n```\r\n\r\nဆိုတဲ့ constructor function ထဲကိုထည့်ရေးရပါတယ်။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "function replace(rgx, str, replace){\r\n    const regex = new RegExp(rgx)\r\n    return str.replace(regex, replace)\r\n}\r\n\r\nconsole.log(replace(/s/g,\"she sells seashells on the seashore\", \"c\") ) // che cellc ceachellc on the ceachore"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// group\r\nconst regex = /(\\d{2})\\/(\\d{2})\\/(\\d{4})/;\r\nconst dateStr = \"09/25/2023\";\r\nconst match = dateStr.match(regex);\r\n\r\nconsole.log(match)"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// no group\r\nconst regex = /\\d{2}\\/\\d{2}\\/\\d{4}/;\r\nconst dateStr = \"09/25/2023\";\r\nconst match = dateStr.match(regex);\r\n\r\nconsole.log(match)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[ '09/25/2023', index: 0, input: '09/25/2023', groups: undefined ]",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# matchAll\r\n\r\nmatch နဲ့ က matchAll အတူတူပဲဖြစ်ပါတယ်။\r\n- matchAll ကတော့ \"g\" flag ထည့်ပေးမှ အလုပ်လုပ်တာဖြစ်ပြီးတော့ မထည့်ပေးရင် error ပြပါလိမ့်မယ်,\r\n- match မှာလို ပုံမှန် array ပြန်ပေးတာမဟုတ်ပဲ iterator object return ပြန်ပေးပါတယ်။\r\n- iterator ကိုအသုံးပြုဖို့လိုရင် ဥပမာ ထွက်လာတဲ့ match တွေကို iterate လုပ်ပြီး တစ်ခုစီအတွက် တခြား task တွေဆက်လုပ်မယ်ဆို matchAll သုံးသင့်ပြီး, single matching operation လောက်ပဲဆိုရင်တော့ match ပဲသုံးပါ။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/g\r\n\r\nconst email = \"zawinaing.devvv@gmail.com\"\r\n\r\nconsole.log(email.matchAll(emailRegex)) // return an array \r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "Object [RegExp String Iterator] {}",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/g\r\n\r\nconst email = \"zawinaing.devvv@gmail.com\"\r\n\r\nconst res = email.matchAll(emailRegex)\r\n\r\nconsole.log([...res])\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[",
                                "  [",
                                "    'zawinaing.devvv@gmail.com',",
                                "    index: 0,",
                                "    input: 'zawinaing.devvv@gmail.com',",
                                "    groups: undefined",
                                "  ]",
                                "]",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "const tweet = \"Check out my #JavaScript code! #Coding #Programming\";\r\nconst hashtagRegex = /#(\\w+)/g;\r\nconst hashtagMatch = tweet.matchAll(hashtagRegex);\r\n\r\nconsole.log([...hashtagMatch]);"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Regex\r\n\r\n### string တစ်ခုက ကိုယ်လိုချင်တာ Pattern ထဲဝင်ရဲ့လား စစ်ဆေးခြင်း w/ Regex object\r\n\r\nတစ်ခါတစ်လေ တချို့ string တွေက သတ်မှတ် ထားတဲ့ pattern ပုံစံဝင်ရဲ့လားဆိုတာကိုစစ်ဆေးဖို့အတွက်ဆိုရင်၊ regex ကိုယ်ပိုင် method တစ်ခုဖြစ်တဲ့ **test** ကိုသုံးနိုင်ပါတယ်။\r\n\r\nmatch, matchAll တို့က string method တွေဖြစ်ကြပါတယ်။ အပေါ်မှာပြောခဲ့တဲ့အတိုင်း သတ်မှတ် ထားတဲ့ pattern ဝင်ရဲ့လားဆိုတာကိုပဲစစ်ရုံပဲ၊ အဲဒီ string ထဲက ဘာမှပြန်ထွက်လာစေဖို့ မလိုအပ်ရင် ဒီ method က သုံးဖို့အသင့်တော်ဆုံးပါ။\r\n\r\nတကယ် real world မှာလည်း form validation တွေမှာ အများဆုံးပါတဲ့၊ password, email, user name validation တွေမှာ အဓိကသုံးပါတယ်။\r\n\r\n‌နောက်ထပ်အသုံးဝင်တဲ့ regex method **exec** သူကတော့ အပေါ်က string method တွေလို match ဖြစ်တဲ့ pattern တွေကိုပြန်ထုတ်ပေးတာပါ။\r\n\r\n1) .test()\r\n3) .exec()"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "regular expression // ရဲ့ကိုယ်ပိုင် method ဖြစ်လို့, regex ပုံစံ string ရဲ့နောက်မှာ dot notation ကပ်ပေးလိုက်ရုံပါပဲ\r\n\r\n```js\r\nconst regexString = /i am a regex/\r\nconst normalString = \"i am a regex\"\r\nconst normalString2 = \"i am a \"\r\n\r\nregexString.test(normalString) // true\r\nregexString.test(normalString) // true\r\nregexString.test(normalString2) // false\r\n```"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// generated by Chatgpt\r\n// checking the input value is a valid email\r\nconst regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\r\n\r\nconst email1 = \"fish\";\r\nconst email2 = \"www.google.com\";\r\nconst email3 = \"zawinaing.devvv@gmail.com\";\r\n\r\nconsole.log(regex.test(email1)); // false\r\nconsole.log(regex.test(email2)); // false\r\nconsole.log(regex.test(email3)); // true"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\r\n\r\nconst email1 = \"fish\";\r\nconst email2 = \"www.google.com\";\r\nconst email3 = \"zawinaing.devvv@gmail.com\";\r\n\r\nconsole.log(regex.exec(email1)); // null\r\nconsole.log(regex.exec(email2)); // null\r\nconsole.log(regex.exec(email3)); \r\n// [\r\n//     'zawinaing.devvv@gmail.com',\r\n//     index: 0,\r\n//     input: 'zawinaing.devvv@gmail.com',\r\n//     groups: undefined\r\n// ]"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# lowerCase & uppercase\r\n\r\nstring တွေရဲ့ case တွေကိုပြောင်းတာပါ၊"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const uppercase = \"APPLE\";\r\nconsole.log(uppercase.toLowerCase());\r\nconsole.log(fruit.toUpperCase());"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# replace\r\n\r\nနာမည်အတိုင်းပဲ string တစ်ခုထဲက ကိုယ်ပြောင်းချင်တဲ့ sub string တွေကို ပြောင်းချင်တဲ့အခါသုံးတာပါ။ သူရဲ့ default behavior က normal string နဲ့ရှာမယ်ဆိုရင် ပထမဆုံး match ဖြစ်တဲ့ တစ်ခုကိုပဲ ပြောင်းတာပါ နောက်ဟာတွေမပြောင်းပါ။ ပိုပြီး powerful ဖြစ်ဖြစ် replace လုပ်ဖို့ဆိုရင်တော့ regex ကိုသုံးရပါတယ်။\r\nသူက original string ကိုမပြောင်းပါဘူး၊ new copy string တစ်ခု ပြန်ပေးတာပါ။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const string = \"The quick brown fox jumps over the lazy dog\";\r\n\r\nconsole.log(string.replace(\"fox\", \"horse\")); // The quick brown horse jumps over the lazy dog."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const string2 = \"The quick brown fox jumps over the lazy dog fox\";\r\n\r\nconsole.log(string2.replace(\"fox\", \"horse\")); // The quick brown horse jumps over the lazy dog fox."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const string3 = \"The quick brown fox jumps over the lazy dog fox\";\r\n\r\n// g flag လေးလဲထည့်ဖို့မမေ့ပါနဲ့..\r\nconsole.log(string3.replace(/fox/g, \"horse\")); // The quick brown horse jumps over the lazy dog fox horse."
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "The quick brown horse jumps over the lazy dog horse",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "replace လုပ်မယ့် ဟာတွေကို အခြား string method တွေသုံးချင်ရင် callback function parameter ထည့်ပြီး ပြောင်းလို့ရပါတယ်။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const string  = \"u Tun, u  Mg Mg and u Min are having conversation in a room.\"\r\n\r\nconst upperCase = string.replace(/u/g, (s) => s.toUpperCase());\r\n\r\nconsole.log(upperCase)// U Mya, U Mg Mg and U Min are having conversation in a room."
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "<h3 align=\"center\" style=\"color: blue;\">Feel free to try with other string methods</h3>"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "အရမ်းရှပ်ထွေးတဲ့ string တွေရဲ့ whitespace တွေကို remove ဖို့ဆိုရင် regular expression ကိုသုံးရပါတယ်။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const string = \"      he l lo   \";\r\nconst string2 = \"      he l      lo   \";\r\nconst string3 = \"        h e    ll   o     \";\r\n\r\n// regex\r\nconsole.log(string.replace(/\\s+/g, \"\"));\r\nconsole.log(string2.replace(/\\s+/g, \"\"));\r\nconsole.log(string3.replace(/\\s+/g, \"\"));"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# string.concat"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "string တွေကို ဆက်တာက \"+\" လေးသုံးပြီးတော့လဲ ဆက်လို့ရသေးတယ်။\r\n\r\nအရမ်းကြီး ရှုပ်တဲ့ concatenation တွေမဟုတ်ရင် \"+\" ကိုသုံးတာပိုကောင်းပါတယ်။\r\n\r\n```js\r\nconst a = \"hello\"\r\nconst b = \"world\"\r\nconsole.log(a+\" \"+b+ \".\") // hello world.\r\n```"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const firstString = \"hello\";\r\nconst secondString = \"world\";\r\nconsole.log(firstString.concat(\" \", secondString));\r\n// method chaining\r\nconsole.log(firstString.concat(\" \", secondString).toUpperCase());"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# trim\r\n\r\n- string တစ်ခုမှာ whitespace လို့ခေါ်တဲ့ space တွေကိုဖြတ်ပေးတာပါ။\r\n- ဒါပေမယ့် padding လို့ခေါ်တဲ့ ဘေးတစ်ဖက်စီက whitespace တွေကိုပဲဖြတ်ပေးပြီးတော့ စာလုံးတွေကြားက whitespace တွေကိုမဖြတ်ပေးပါဘူး။\r\n- အဲဒီအတွက် string.replace ကိုသုံးနိုင်ပါတယ်။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const hello1 = \"  hello   \";\r\nconst hello2 = \"   h e llo     \";\r\n\r\nconsole.log(hello1.trim());\r\nconsole.log(hello2.trim());\r\nconsole.log(hello1.replace(\"\", \"\").trim());\r\nconsole.log(hello2.replace(\"\", \"\").trim());\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "hello",
                                "h e llo",
                                "hello",
                                "h e llo",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# string.includes\r\n\r\nstring တစ်ခုမှာ ရှာချင်တဲ့ စာလုံးတစ်လုံး ပါလားဆိုတာကို စစ်တာပါ case sensitive ဖြစ်တဲ့အတွက်၊ ရှာချင်တဲ့ case နဲ့ source နဲ့ အမြဲ case တွေကိုစစ်ဆေးသင့်ပါတယ်။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const person = \"Joe biden\";\r\n\r\n// case sensitive\r\nconsole.log(person.includes(\"j\"));\r\nconsole.log(person.includes(\"j\".toUpperCase()));\r\nconsole.log(person.includes(\"J\"));\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "false",
                                "true",
                                "true",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# charAt\r\n- string တွေကို zero based index စနစ်နဲ့ ဝင်လို့ရပါတယ်။\r\n- မရှိတဲ့ index တွေကို ဝင်ရင် empty string ပြန်ပေးပါတယ်။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const person = \"Ashley Graham\";\r\nconsole.log(person.charAt(0));\r\nconsole.log(person.charAt(1));\r\nconsole.log(person.charAt(2));\r\nconsole.log(person.charAt(200));\r\nconsole.log(person.charAt(0).includes(\"a\".toUpperCase()));\r\n\r\nconsole.log(person[2]) // this also works"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# string.indeof\r\n\r\nstring တစ်ခုထဲက substring တစ်ခုရဲ့နေရာကိုရှာတဲ့အခါသုံးတာပါ"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const person = \"Leon S. Kennedy\";\r\n\r\nconsole.log(person.indexOf(\"K\")); // 8"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "---"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Built-in Utility objects & functions\r\n\r\n- Dealing with numbers\r\n\r\n    - parseInt\r\n\r\n    - parseInt\r\n\r\n    - Number\r\n\r\n- Math\r\n\r\n- Date\r\n\r\n- JSON\r\n\r\n    - stringify\r\n    \r\n    - parse\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "parseInt နဲ့ Number ၂ ခုလုံးက string တွေထဲကနေ number တွေကို prase ထုတ်လို့ ရတဲ့ global functions တွေဖြစ်ပါတယ်။ ပုံမှန် case တွေမှာ interchangeably သုံးလို့ရပေမယ့်၊ တချို့ case တွေမှာ ရလဒ် အနည်းငယ်ကွဲပြားပါတယ်။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "\r\nconst a = \"1\";\r\nconst parseInteger = parseInt(a);\r\nconst number = Number(a);\r\n\r\nconsole.log(typeof parseInt(a), parseInteger); // number 1\r\nconsole.log(typeof Number(a), number); // number 1"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const b = \"1abc\";\r\nconst parseInteger = parseInt(b);\r\nconst number = Number(b);\r\n\r\nconsole.log(typeof parseInt(b), parseInteger); // number\r\n// Number returns \"Not a Number\"\r\nconsole.log(typeof Number(b), number); // number NaN\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "ဒီနေရာမှာကိုယ်တိုင်ကြုံတွေ့ဖူးတဲ့ တွေ့အကြုံတစ်ခုကို တစ်ခုလောာက် ပြောပြချင်ပါတယ်။ \r\n\r\n```js\r\ntypeof number == \"number\"\r\n\r\n```\r\n\r\nဆိုတဲ့ if statement လေးတ်ခုရှိတယ်ဆိုပါစို့ Nan ဆိုတာလဲ တစ်ကယ်တော့ number data type ပဲဖြစ်လို့၊ သူ့ကို typeof နဲ့ စစ်ရင်လဲ \"number\" လို့ပဲပေါ်လို့ အဲဒီ statement ကမှန်တော့ အောက်က code တွေကို ဆက်ပြီး execute ဆက်လုပ်တော့ error တွေတက်ကုန်တာမျိုးကြုံဖူးပါတယ်။ အဲလို ဖြစ်ရပ်မျိုးကို ကာဖို့အတွက် **isNan** ကိုသုံးလို့ရပါတယ်။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const value = NaN;\r\nconst check = typeof value === \"number\" && !isNaN(value); // false\r\nconsole.log(check);"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Math ဆိုတဲ့ Global function က Mathematic operation တွေပြုလုပ်ဖို့အတွက်သုံးတာပါ\r\nnon-mathematic daily use မှာတော့ random number တွေ ထုတ်တာ, demical number တွေကိုကိန်းပြည့်ပြန်ပြောင်းတာတွေအတွက်အသုံးပြုကြပါတယ်။ Daily program တွေမှာတော့ အောက်က method လေးတွေကို အများဆုံး အသုံးများကြပါတယ်။\r\n\r\n- Math.round\r\n- Math.floor\r\n- Math.ceil\r\n- Math.random\r\n- Math.max, min\r\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// Math.round ဒသာမဂဏန်းတစ်ခုကို ဒသာမနောက်က ဂဏန်း၅ကျော်တာနဲ့ အရှေ့ကဂဏန်းကို ၁ တိုးပေးတယ်, မကျော်ရင် မတိုးဘူး\r\n\r\nconsole.log(Math.round(34.45))\r\nconsole.log(Math.round(34.55))\r\n// Math.floor ကတော့ အနည်းဆုံးဂဏန်းကိုယူပေးတယ် နောက်ကဂဏန်းက ၉အထိဖြစ်နေလဲ အနည်းဆုံးကိုပဲယူတယ်\r\nconsole.log(\"Floor\",Math.floor(23.49))\r\nconsole.log(\"Floor\",Math.floor(21.99))\r\n\r\n// Math.ceil ကတော့ အများဆုံးကိုပဲယူပါတယ်။\r\nconsole.log(\"Ceil\",Math.ceil(23.49));\r\nconsole.log(\"Ceil\",Math.ceil(21.69));\r\nconsole.log(\"Ceil\",Math.ceil(21.99));\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "34",
                                "35",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "Random integer တွေဘယ်လိုဖန်တီးလဲ? အောက်က code လေးမှာ \r\n\r\n```js\r\n    Math.random()\r\n```\r\n\r\n    ဆိုပြီးတော့ random floating point (ဒသာမကိန်း) တစ်ခုကို ဖန်တီးလိုက်တယ်၊\r\n\r\n    ပြီးတော့ အဲဒီ ဂဏန်းကို ကိန်းပြည့်တစ်ခုနဲ့ မြှောက်လိုက်တယ်၊\r\n\r\n    မြှောက်လိုက်တော့ ဒသာမကိန်း တစ်ခုထွက်လာတယ်\r\n\r\n    ထွက်လာတဲ့ ဒသာမကိန်းကို \r\n\r\n ```js\r\n    Math.floor()\r\n ```\r\n\r\n    ဆိုပြီးတော့ အနီးစပ်ဆုံး အနည်းဆုံးကိန်းကိုယူလိုက်တော့ random ကိန်းပြည့်တစ်ခုရလာပါတယ်။\r\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "\r\n// creating random integers in javascript\r\n// Math.random method က random 1 excluded floating-point တွေကို generate လုပ်ပေးတယ်\r\nconst randomFloatingNumber = Math.random()\r\nconsole.log(\"first\",randomFloatingNumber) // output -> 0.38524382387881717\r\n\r\n// အဲတာကို interger တစ်ခုနဲ့မြှောက်လိုက်ရင် ‌ရှေ့မှာ interger part တစ်ခုရလာမယ် တစ်ခုရလာမယ်။\r\nconsole.log(\"second\",randomFloatingNumber * 10) // output -> 3.8524382387881717 \r\n\r\n// အဲလိုထွက်လာတဲ့ decimal number တွေကို Floor or ceil or maybe round  နဲ့ wrap ပေးလိုက်ရင် random integer တစ်ခုကိုရပါတယ်။\r\nconst randomInteger = Math.floor(randomFloatingNumber * 10)\r\nconsole.log(randomInteger) // output -> 3\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Maximum to Minimum range ကိုပါ ထည့်ချင်ရင် ဒီ equation လေးကို အသုံးပြုနိုင်ပါတယ်။ဒီ equation လေးမှာတော့ ကိုယ်ထည့်ထားတဲ့ range ထဲကပဲ random number တွေထွက်နေမှာပါ။\r\n\r\n> Math.floor(Math.random() * (maximum, minimum + 1) - minimum)"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "\r\nfunction randomNumberGenerator(max, min){\r\n    return Math.floor(Math.random() * (max -  min + 1) + min)\r\n}\r\n\r\n\r\nconsole.log(randomNumberGenerator(5, 10))\r\nconsole.log(randomNumberGenerator(5, 10))\r\nconsole.log(randomNumberGenerator(5, 10))\r\nconsole.log(randomNumberGenerator(5, 10))"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Date\r\nDate object ကို နေ့စွဲတွေ, အချိန်ကာ‌လတွေ, timestamp တွေ ဖန်တီးဖို့အတွက်အသုံးပြုတာပါ။\r\n\r\n- parsing string to data format\r\n\r\n    - new Date()\r\n\r\n    - Date.prase()\r\n\r\n- useful data methods\r\n\r\n- calendar year"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const today = new Date()\r\n\r\nconsole.log(today.toLocaleDateString()) // today date\r\n\r\nconsole.log(today.toLocaleString()); // 10/7/2023, 6:05:46 PM\r\n\r\nconsole.log(today.getDay()) // current nth day of the week, eq: Monday = 1, Tuesday = 2 etc...\r\n\r\nconsole.log(today.getDate()) // today nth day of the month\r\n\r\nconsole.log(today.getFullYear()) // this year\r\n\r\nconsole.log(today.getHours()) // current\r\n\r\nconsole.log(today.toDateString()); // Sat Oct 07 2023\r\n\r\nconsole.log(today.toTimeString()); // 18:05:46 GMT+0630 (Myanmar Time)\r\n\r\nconsole.log(today.toLocaleTimeString()); // 7:20:51 PM\r\n\r\nconsole.log(today.toUTCString()); // Sat, 07 Oct 2023 11:35:46 GMT\r\n\r\nconsole.log(`It's ${today.getHours()}:${today.getMinutes()} o'clock`); // It's _ _:_ _ O'Clock\r\n\r\n// အခြေအနေ ပေါ်မူတည်ပြီးတော့ တခြား အသုံးဝင်တဲ့ methods တွေလည်းများစွာရှိပါသေးတယ်။"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Raw date string တွေကို ပြန် parse မယ်"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const date = \"12-11-2009\";\r\nconst date2 = \"12/11/2009\";\r\nconst date3 = \"12,11,2009\";\r\nconst date4 = \"Sat, 07 Oct 2023 11:35:46 GMT\"\r\nconst date5 = \"10/7/2023, 6:05:46 PM\"\r\n\r\nconst unparsedDateString = \"2023-april-01\"\r\nconst unparsedDateString2 = \"10-12-12\"\r\n\r\n\r\nconsole.log(new Date(date));\r\nconsole.log(new Date(date2));\r\nconsole.log(new Date(date3));\r\nconsole.log(new Date(date4).toLocaleString());\r\nconsole.log(new Date(date5).toDateString());\r\n\r\nconsole.log(new Date(unparsedDateString))\r\nconsole.log(new Date(unparsedDateString).toLocaleDateString())\r\nconsole.log(new Date(unparsedDateString).toDateString())\r\nconsole.log(new Date(unparsedDateString2).toLocaleDateString())\r\nconsole.log(new Date(unparsedDateString2).toDateString())"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# JSON\r\n\r\n- JSON ဆိုတာ **Javascript Object Notation** ကို အတိုခေါက်ခေါ်ပါတယ်။\r\n- JSON data တွေက computer တွေအတွက်ရော human တွေအတွက်ရော readable လဲဖြစ် lightweight လဲဖြစ်တဲ့ data အမျိုးအစားတစ်ခုဖြစ်လို့၊ အင်မတန် အသုံးဝင်တဲ့ data အမျိုးအစားဖြစ်ပါတယ်။\r\n- computer တွေအတွက် readable ဖြစ်တယ်ဆိုတာက သူ့ကို parse ဖို့ဆို computer တွေကတခြား heavy tasks တွေ မ run ရဘဲ အလွယ်တကူ ဖတ်လို့ ရတာကိုဆိုလိုတာပါ။\r\n- JSON data တွေဆိုတာ Api data တွေရဲ့ပုံစံဖြစ်ပါတယ်။\r\n- server ကနေ client ကို data တွေပို့လိုက်ရင်  JSON data တွေအဖြစ်အမြဲပို့ပါတယ်။\r\n- ပုံမှန် javascript object literal တွေနဲ့ ပုံစံတူပါတယ်။\r\n\r\n### Json data format\r\n\r\n```json\r\n{\r\n    \"person\" : {\r\n        \"name\" : \"Leon\",\r\n        \"age\" : 77\r\n    }\r\n}\r\n\r\n```\r\n\r\n### Javascript object literal format\r\n\r\n```js\r\n\r\nconst person = {\r\n    name : \"Leon\",\r\n    age : 77\r\n}\r\n\r\n```\r\n\r\nJSON object ထဲမှာအရမ်းအသုံးဝင်တဲ့ method တွေရှိပါတယ်။\r\n\r\n- stringify\r\n    - serialization လို့လဲခေါ်ပါတယ်။ \r\n    - object or value တစ်ခုကို arguement အဖြစ်ထည့်ပေးလိုက်တဲ့အခါ json string အဖြစ်ပြောင်းပေးပါတယ်။\r\n    - Backend ကို data တွေပို့တဲ့အခါ request ရဲ့ body ထဲမှာ အဲဒီ data တွေကို serialize လုပ်ပြီးပို့တဲ့အခါ သုံးတယ်\r\n    - browser ထဲက localstorage ထဲမှာ data သွားသိမ်းတဲ့အခါ အစရှိသည်တို့မှာ အဓိကအသုံးပြုပါတယ်။\r\n\r\n- parse\r\n    - သူကတော့ ပြောင်းပြန်ဖြစ်ပါတယ်, stringify လုပ်ထားတဲ့ data တွေကို ပြန်ဖြည်တာဖြစ်ပါတယ်။ \r\n    - backend to frontend, frontend to backend data တွေအပေးအယူလုပ်ကြတဲ့အခါ, ဒီနည်းလမ်းကို အသုံးပြုပါတယ်။\r\n    - အထူးသတိပြုဖို့လိုတာကတော့ parse လုပ်တဲ့အခါ parse လုပ်မယ့် data က undefined မဖြစ်ဖို့လိုပါတယ်။\r\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const obj = { name : \"leo\", age : 99}\r\n\r\nconst stringify = JSON.stringify(obj)\r\n\r\nconsole.log(\"serialize\",stringify)\r\nconsole.log(\"parse\",JSON.parse(stringify))"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "---"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Array methods\r\n\r\n> Array methods တွေက arrays တွေမှာပဲ အလုပ်လုပ်ပါတယ်၊ အများသော method တွေရဲ့ paramter ထဲမှာ callback function အမြဲထည့်ပေးရပါတယ်၊ callback function တွေကို 90% သောအကြိမ်တိုင်းမှာ clean code ဖြစ်ဖို့ arrow functions တွေကိုပဲအသုံးများကြပါတယ်။ callback မလိုပဲ value ပဲလိုတဲ့ဟာတွေလဲရှိပါတယ်, ဘာ argument မှမလိုတာလဲရှိပါတယ်။ တချို့က boolean statement တွေ ပဲထည့်ပေးရပါတယ်။ တချို့ကတော့ အထဲမှာ run မယ့် task တွေထည့်လို့ရပါတယ်။ array return ပြန်ပေးတဲ့ method တွေထဲမှာ new copied array return တာရယ် original array ကိုသွားပြောင်းတာရယ် ၂ မျိုးရှိပါတယ်။ new copy array ဆိုတာ အမြဲ **shallow copy** ပဲဖြစ်ပါတယ်။ deep copy မရနိုင်ပါ။ shallow copy, deep copy အ‌ကြောင်းကို ရှင်းပြပေးထားပါတယ်။\r\n\r\n-  [push](#push)\r\n-  [pop](#pop)\r\n-  [shift](#shift)\r\n-  [unshift](#unshift)\r\n-  [foreach](#foreach)\r\n-  [map](#map)\r\n-  [find](#find)\r\n-  [findIndex](#findindex)\r\n-  [indexOf](#indexOf)\r\n-  [filter](#filter)\r\n-  [sort](#sort)\r\n-  [slice](#slice)\r\n-  [splice](#splice)\r\n-  [reverse](#reverse)\r\n-  [indexof](#indexof)\r\n-  [some](#some)\r\n-  [every](#every)\r\n-  [join](#join)\r\n-  [concat](#concat)\r\n-  [flat](#flat)\r\n-  [reduce](#includes)\r\n-  [includes](#includes)\r\n- [challenges](#challenges)"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# push\r\n\r\n>- array တစ်ခုကို နောက်ဆုံး index ကနေ element ကို ထည့်တယ်။\r\n>- အဲဒီ နောက်ဆုံးဖြစ်သွားတဲ့ index ကို return ပြန်ပေးတယ်။\r\n>- ကိုယ်ထည့်မယ့် element ကို argument တစ်ခုအနေနဲ့ထည့်ပေးရတယ်။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const originalArray = [1,2,3,4,5,6]\r\n\r\nconst push = originalArray.push(\"new value\");\r\nconst push2 = originalArray.push(\"new value\");\r\nconsole.log(push) // returns the last index\r\nconsole.log(push2) // returns the last index\r\nconsole.log(originalArray)"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# pop\r\n>- array တစ်ခုရဲ့ နောက်ဆုံး index က element ကို ဖြုတ်တယ်\r\n>- အဲဒီဖြုတ်လိုက်တဲ့ element ကို return ပြန်တယ်။\r\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const originalArray = [1,2,3,4,5,6]\r\n\r\nconst pop = originalArray.pop(\"new value\");\r\nconst pop2 = originalArray.pop(\"new value\");\r\nconsole.log(pop) \r\nconsole.log(pop2)\r\nconsole.log(originalArray)"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# unshift\r\n\r\n>- array တစ်ခုရဲ့ ‌ရှေ့ဆုံး index က element ကို ထည့်တယ်\r\n>- အဲဒီ array ရဲ့ နောက်ဆုံး ဖြစ်သွားတဲ့ length ကို return ပြန်တယ်။\r\n>- ကိုယ်ထည့်မယ့် element ကို argument တစ်ခုအနေနဲ့ထည့်ပေးရတယ်။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const originalArray = [1,2,3,4,5]\r\nconst unshift = originalArray.unshift(\"new value\")\r\nconsole.log(originalArray)\r\nconsole.log(unshift)"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# shift\r\n>- array တစ်ခုရဲ့ ‌ရှေ့ဆုံး index က element ကို ဖြုတ်တယ်\r\n>- အဲဒီဖြုတ်လိုက်တဲ့ element ကို return ပြန်တယ်။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const originalArray = [1,2,3,4,5]\r\nconst shift = originalArray.shift()\r\nconst shift2 = originalArray.shift()\r\nconst shift3 = originalArray.shift()\r\nconst shift4 = originalArray.shift()\r\nconst shift5 = originalArray.shift()\r\nconst shift6 = originalArray.shift()\r\nconst shift7 = originalArray.shift()\r\nconsole.log(shift)\r\nconsole.log(shift2)\r\nconsole.log(shift3)\r\nconsole.log(shift4)\r\nconsole.log(shift5)\r\nconsole.log(shift6)\r\nconsole.log(shift7)\r\nconsole.log(originalArray)"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# foreach\r\n### အသုံးပြုပုံ\r\n>- array တစ်ခုကို function တစ်ခုနဲ့ loop ပတ်တယ်\r\n>- ပထမ Parameter မှာ callback function တစ်ခုမဖြစ်မနေထည့်ပေးရတယ်။\r\n>- ဒုတိယ မှာ optionally **this** argument ထည့်လို့ရတယ်။\r\n### အသုံးဝင်ပုံ\r\n>- ပုံမှန် iteration tasks တွေအပြင်\r\n>- Asynchronous task တွေကိုလဲလုပ်နိုင်ပါတယ်\r\n\r\n```js\r\narray.forEach(callbackFunction, thisArg)\r\n```\r\nthis argument ကိုသုံးဖို့လိုရင် arrow function ထည့်လို့မရဘူး, normal function (anonymous function) ပဲရတယ်။\r\nအသုံးမလိုရင်တော့ clean code ဖြစ်ဖို့ arrow function (anonymous function) ကိုသုံးစေခြင်ပါတယ်။\r\n\r\nအဲဒီ့ function ရဲ့ Parameter ထဲမှာ ပထမ arg မှာ array ရဲ့ element တစ်ခုစီ ဝင်မယ်။ \r\nဒုတိယမှာ index ဝင်မယ်။\r\n\r\n```js\r\narray.forEach((element, index) => {  }, _)\r\n```\r\nမှက်ချက်။ ။ Original array ကို modify လုပ်မယ်ဆိုရင် forEach မသုံးရန်\r\n\r\n\r\n- Skipping Elements: When you remove an element from the array using splice during the forEach iteration, it can cause the array indices to shift. This means that elements might be skipped or processed multiple times, leading to unexpected behavior.\r\n\r\n- Index Mismatch: The index provided as the second argument to the callback function (forEach takes a callback with three arguments: element, index, and array) does not get updated to reflect the changes made to the array. This can lead to incorrect elements being processed or removed.\r\n\r\n- Incomplete Iteration: If you remove elements from the array, it can affect the length of the array, potentially causing the iteration to end prematurely, leaving some elements unprocessed.\r\n\r\n- Inefficient: Using splice to remove elements from the middle of an array is an inefficient operation, especially when done repeatedly, as it involves shifting all elements after the removed one.\r\n\r\n- Due to these issues, it's generally not recommended to use forEach when you need to modify the array being iterated over in a way that changes its length or structure. Instead, using a for loop with a reverse order or creating a new array with the filtered elements, as demonstrated in previous examples, is a more predictable and safer approach for this specific task."
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# map\r\n- forEach လိုပဲ array တစ်ခုကို function တစ်ခုနဲ့ loop ပတ်တယ်\r\n- ပထမ Parameter မှာ callback function တစ်ခုမဖြစ်မနေထည့်ပေးရတယ်။\r\n- ဒုတိယ မှာ optionally **this** argument ထည့်လို့ရတယ်။\r\n\r\n```js\r\narray.map(callbackFunction, thisArg)\r\n```\r\n```js\r\narray.map((element, index) => {  }, thisArg)\r\n```\r\n\r\n**map vs forEach**\r\n\r\n1) map က new array တစ်ခုပြန်ထုတ်ပေးတယ်\r\nforEach က undefined ပဲပြန်ထွက်တယ်\r\n\r\n2) forEach က return value မလိုတဲ့ operation တွေမှာအတွက်သုံးတယ်။ \r\n3) Map ကတော့ အထဲက element တွေကို manipulate လုပ်ပြီး new array ပြန်ထွက်လာလိုရင်သုံးတယ်။\r\n4) side effect နဲ့, async call တွေအတွက် Map မှာသုံးလို့အဆင်မပြေပါဘူး။\r\n\r\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const array = [1,2,3,4,5,6,7,8]\r\n\r\nconst forEachReturn = array.forEach((num) => num < 4)\r\nconst mapReturn = array.map((num) => num < 4 )\r\n\r\nconsole.log(forEachReturn)\r\nconsole.log(mapReturn)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "undefined",
                                "[",
                                "  true,  true,",
                                "  true,  false,",
                                "  false, false,",
                                "  false, false",
                                "]",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "const originalArray = [{id : 1, quantity : 2}, {id : 2, quantity : 0}, {id : 3, quantity : 1}]\r\n\r\nconst newArray = originalArray.map((element) => element.id === 2 ? {...element, quantity : element.quantity + 1} :  element )\r\n\r\nconsole.log(originalArray)\r\nconsole.log(newArray)"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# find\r\n- array တစ်ခုထဲက element တစ်ခုကို **callback function** တစ်ခုနဲ့ iterate ပြီး condition နဲ့ကိုက်ညီတဲ့ element ကိုရှာတဲ့အခါသုံးတယ်\r\n    - **callback function** ရဲ့ ပထမ Parameter အဲဒီ array ထဲက element တစ်ခုစီ ကိုကိုယ်စားပြုတဲ့ variable တစ်ခုပါမယ် နာမည်ကိုကြိုက်တာပေးလို့ရတယ်။ object ဆို destructure လုပ်လို့ရတယ်။\r\n    - ဒုတိယ Parameter မှာ  index ကို optionally ထည့်လို့ရတယ်။\r\n    \r\n- find method ဒုတိယ Parameter မှာ optionally **this** argument ထည့်လို့ရတယ်။ အများအားဖြင့် အဲဒီလို ဘယ်သူမှ သိပ်မသုံးကြပါဘူး။\r\n\r\n- သူက given condition နဲ့ကိုက်ညီတဲ့ **ပထမဆုံး element** ကို return ပြန်တာဖြစ်တယ်၊ အကယ်၍ တခြား element တွေက ကိုက်ညီနေသေးရင်ဂရုမစိုက်ပဲ ပထမဆုံး ကိုက်တဲ့ တစ်ခုကိုသာ return value ပြန်ပေးတယ်။ \r\n\r\n```js\r\narray.find(callbackFunction, thisArg)\r\n```"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const array = [1,2,3,4,5,6,7,8]\r\nconst find = array.find((num) => num < 4)\r\nconsole.log(find)"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const array = [{id : 1, name : \"karl\"}, {id : 2, name : \"leo\"}, {id : 3, name : \"mark\"}]\r\n\r\nconst find = array.find(({name}) => name === \"karl\")\r\n\r\nconsole.log(find)"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# findIndex\r\n- findIndex လိုမျိုးပဲ သူက given condition နဲ့ကိုက်ညီတဲ့ **ပထမဆုံး element** ရဲ့ **index** ကို return ပြန်ပေးတယ်၊။\r\n\r\n```js\r\narray.findIndex(callbackFunction, thisArg)\r\n```"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const array = [{id : 1, name : \"karl\"}, {id : 2, name : \"leo\"}, {id : 3, name : \"mark\"}]\r\n\r\nconst find = array.findIndex(({name}) => name === \"karl\")\r\n\r\nconsole.log(find) // 0"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# filter\r\n- array တစ်ခုထဲက element တွေထဲက given condition နဲ့ကိုက်ညီတဲ့ element ကိုတွေအားလုံးကို ရှာတဲ့အခါမှာသုံးတယ်\r\n\r\n- သူက callback function ရဲ့ given condition နဲ့ကိုက်ညီတဲ့ true or false boolean statement ကိုယူပြီး true ဖြစ်တဲ့ **element တွေအားလုံး** ကို **array လိုက် return** ပြန်တာဖြစ်တယ်၊ \r\ngiven condition နဲ့ မကိုက်ရင် [] empty array ပြန်ထွက်လာပြီးတော့၊ true or false boolean statement မဟုတ်ရင် array ထဲက element အကုန်ပြန်ထွက်လာမယ်။\r\n\r\n```js\r\narray.filter(callbackFunction, thisArg)\r\n```"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const array = [4,5,7,8,2,8]\r\nconst filter = array.filter((value) => value > 5);\r\nconst filter2 = array.filter((value) => value === 3);\r\nconst filter3 = array.filter((value) => value * 5);\r\nconsole.log(filter)\r\nconsole.log(filter2)\r\nconsole.log(filter3)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[ 7, 8, 8 ]",
                                "[]",
                                "[ 4, 5, 7, 8, 2, 8 ]",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# sort\r\n- array တစ်ခုရဲ့ element ကြီးစဥ်ငယ်, ငယ်စဥ်ကြီး စီပေးတယ်\r\n- သတိထားရမှာက sorting function မပေးထားရင် alphabetically အလိုက်ပဲ sort မှာဖြစ်တယ်။\r\n- alphabet တွေကိုပဲ a to z စီဖို့ဆိုရင်တော့ သိပ်ပြသာနာမရှိပေမယ့်၊ alphabets တွေကိုပဲ reverse order နဲ့  numbers, objects တွေကိုစီရင်တော့ sorting function ထည့်ပေးရပါတယ်။\r\n- new array return မပြန်ပါ, original ကိုပြောင်းတာပါ\r\n- အလုပ်လုပ်ပုံက ရှေ့နောက် နှိူင်းယှဥ်ပြီး ကြီးရင်‌ရှေ့မှာထား ငယ်ရင်နောက်မှာထား ဆိုတဲ့ပုံစံနဲ့ စီသွားတာပါ\r\n- underlying layer မှာအလုပ်လုပ်ပုံတူသော်ငြားလည်း javascript engine တွေအလိုက် ကိုယ်ပိုင် sorting algorithms တွေရှိတာမို့ ဘယ် sorting algorithms ကိုအသုံးပြုလဲဆိုတာကိုတော့ ဘယ် documention မှာမှအတိအကျ မဖော်ပြထားပါ။\r\n\r\n## _syntax_\r\n\r\n> ```js\r\n> array.sort(sortingFunction)\r\n> ```\r\n\r\n## sorting function\r\n\r\n#### Number တွေအတွက်\r\n\r\n    > (a, b) => a - b\r\n\r\n    a နဲ့ b က array ထဲက element တွေပါ အပေါ်က example ကြည့်ရင် a ထဲက b ကို နှုတ်လိုက်လို့ \r\n    - \"-\" ထွက်ရင် b က a ထက်ကြီးတဲ့ သဘောဆိုတဲ့အတွက် b ကို a အ‌ရှေ့မှာထားလိုက်တယ်။\r\n    - \"+\" ထွက်ရင် a က b ထက်ကြီးတဲ့ သဘောဆိုတဲ့အတွက် a ကို b အ‌ရှေ့မှာထားလိုက်တယ်။ \r\n    - \"0\" ထွက်ရင် a နဲ့ b ကညီတယ်ဆိုတဲ့ သဘောဖြစ်တဲ့အတွက် order ကိုမပြောင်းပဲထားလိုက်တယ်။ \r\n    - a ဆိုတာ လက်ရှိရောက်နေတဲ့ ဂဏန်းကိုဆိုလိုတာပါ\r\n    - b ဆိုတာ လက်ရှိရောက်နေတဲ့ ဂဏန်းရဲ့ နောက် ဂဏန်းကိုဆိုလိုတာပါ\r\n    - currentValue နဲ့ nextValue လို့လဲ မြင်နိုင်ပါတယ်။\r\n\r\n\r\n    ```js\r\n        array.sort((a,b) => a - b) // descending order\r\n        array.sort((a,b) => b - a) // descending order\r\n    ```\r\n    --or--\r\n\r\n    ```js\r\n        array.sort((currentValue,nextValue) => a - b)\r\n    ```\r\n\r\n#### string တွေအတွက်\r\n\r\n    > array.sort() // default\r\n\r\n    > (a, b) => a.localCompare(b) // custom\r\n\r\n\r\n    - default က a to z စီပေးပါတယ်။\r\n\r\n    - z-a order အတွက်  string method တစ်ခုဖြစ်တဲ့ **localCompare** ကိုအသုံးပြုနိုင်ပါတယ်။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const alphabets = [\"orange\", \"banana\", \"durian\", \"mango\", \"apple\", \"strawberry\"]\r\n\r\nconsole.log(alphabets.sort())"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[ 'apple', 'banana', 'durian', 'mango', 'orange', 'strawberry' ]",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "ပုံမှန်အတိုင်း array.sort() ဆိုပြီး numbers တွေကိုသွားပြီး sorting လုပ်ခိုင်းလို့မရပါဘူး။ sorting callback function မပါရင်\r\nsorting algorithm က numbers တွေကို string တွေလို့ default အရ သတ်မှတ်ပြီး သူတို့ရဲ့ first character ကိုပဲကြည့်လို့ပါ"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const unsortedArray = [15, 23, 38, 59, 11, 76, 9, 81, 4];\r\n\r\nconsole.log(unsortedArray.sort());\r\n\r\n/**\r\n\"15\" ရဲ့ first character က \"1\".\r\n\"23\" ရဲ့ first character က \"2\".\r\n\"38\" ရဲ့ first character က \"3\".\r\n\"59\" ရဲ့ first character က \"5\".\r\n\"11\" ရဲ့ first character က \"1\" \r\n\"1\" ခြင်း \"1\" တူတော့ အပေါ်က \"15\" ရဲ့နောက်က \"5\" နဲ့ သွားနှိုင်းတယ်. \"1\" နဲ့ \"5\" နဲ့ \"1\" က ငယ်တော့ \"1\" ကို‌ရှေ့ပို့လိုက်တယ်။\r\n\"76\" ရဲ့ first character က \"7\".\r\n\"9\" က \"9\" ပဲ.\r\n\"81\" ရဲ့ first character က \"8\".\r\n\"4\" က \"4\" ပဲ.\r\nအပေါ်က first character ဂဏန်းတွေကို ငယ်စဥ်ကြီးလိုက်ပြန်စီလိုက်တော့\r\nresult -> [11, 15, 23, 38, 4,59, 76, 81, 9]\r\n */\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[",
                                "  11, 15, 23, 38, 4,",
                                "  59, 76, 81,  9",
                                "]",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "const array = [2, 3, 4, 6, 7, 9, 12, 56, 45, 59, 20, 22];\r\n\r\nconsole.table(array.sort((a, b) => a - b)); // ascending order\r\nconsole.table(array.sort((a, b) => b - a)); // descending order"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "ဒီအောက်က ဥပမာလေးက sorting algorithm ရဲ့အလုပ်လုပ်ပုံကို imaginary အနီးစပ်ဆုံး ပုံဖော်ပြထားတာပါ၊\r\nတကယ့် algorithm အစစ်ကို ပြထားတာမဟုတ်လို့ case တိုင်းမှာ expect ထားတဲ့အတိုင်း အလုပ်လုပ်နေမှာတော့ မဟုတ်ပါဘူး..\r\nတကယ့် underlying layer algorithm ကတော့အများကြီးပိုနက်နဲပါတယ်။ knowledge အတွက်ပဲ console ထုတ်ပြီးထွက်လာတဲ့ element အစဥ်လိုက်ကို visualize လုပ်ကြည့်ရုံပါ။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// /**\r\n//  * uses tim sort algorithm\r\n//  * tim sort is a hybrid sorting algorithm and\r\n//  *  can be seen as shallow combination of\r\n//  *    - merge sort\r\n//  *    - infection sort\r\n//  * https://v8.dev/blog/array-sort#timsort\r\n//  */\r\nconst array = [5, 3, 6, 1, 7, 8];\r\nconst sortingFunction = (a, b) => {\r\n   console.log(a, b); // console  မှာထွက်လာတဲ့ ဂဏန်းတွေကိုပဲကြည့်ပြီး visulize လုပ်ထားတာပါ\r\n   console.log(\"--\");\r\n   return a - b;\r\n};\r\n\r\nconsole.log(array.sort(sortingFunction))\r\n/**\r\n* 1)\r\n* [5, 3, 6, 1, 7, 8]\r\n*  |  |\r\n*   a = 3\r\n*   b = 5\r\n*   return = -2\r\n*   [3, 5, 6, 1, 7, 8] <- swap 3 and 5\r\n*   ---\r\n\r\n* 2)\r\n* [3, 5, 6, 1, 7, 8]\r\n*  |     |\r\n*    a = 6\r\n*    b = 3\r\n*    return = 3\r\n*  [3, 5, 6, 1, 7, 8] <- no need to swap\r\n*  ---\r\n\r\n* 3)\r\n* [3, 5, 6, 1, 7, 8]\r\n*     |  |\r\n*    a = 6\r\n*    b = 5\r\n*    return = 1\r\n*  [3, 5, 6, 1, 7, 8] <- no need to swap\r\n\r\n* 4)\r\n* [3, 5, 6, 1, 7, 8] <- ** here's is the magic happens\r\n*     |     |\r\n*  a = 1\r\n*  b = 5\r\n*  return -4\r\n* ❌ [3, 1, 6, 5, 7, 8] <- it actually should look likes this but the algorithm knows it already compares 5 & 6 so it keeps the order\r\n* ✅ [3, 1, 5, 6, 7, 8] <- send 1 to 5's place\r\n* 5)\r\n\r\n* [3, 1, 5, 6, 7, 8] <- this is called back tracking\r\n*  |  |\r\n*  a = 1\r\n*  b = 3\r\n*  return = -2\r\n*  [1, 3, 5, 6, 7, 8]\r\n*  ---\r\n*   6)\r\n\r\n*  3 & 6 are already compared so pointer moves forward\r\n* [1, 3, 5, 6, 7, 8]\r\n*        |     |\r\n*    a = 7\r\n*    b = 5\r\n*    return = 2\r\n*  [1, 3, 5, 6, 7, 8] <- no swap\r\n*   4)\r\n\r\n* [1, 3, 5, 6, 7, 8]\r\n*           |  |\r\n*    a = 7\r\n*    b = 6\r\n*    return = 1\r\n*  [1, 3, 5, 6, 7, 8] <- no swap\r\n\r\n*   5)\r\n* [1, 3, 5, 6, 7, 8]\r\n*        |        |\r\n*    a = 8\r\n*    b = 5\r\n*    return = 3\r\n*  [1, 3, 5, 6, 7, 8] <- no swap\r\n\r\n*   6)\r\n* [1, 3, 5, 6, 7, 8]\r\n*              |  |\r\n*    a = 8\r\n*    b = 7\r\n*    return = 1\r\n*  [1, 3, 5, 6, 7, 8] <- no swap\r\n* index = length of array - 1 sorting ends\r\n*/\r\n// let index = 1;"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Multi condition sorting\r\n\r\nအောက်က ထဲက လူတွေထဲမှာ ဦးနဲ့စတဲ့လူ ဒေါ်နဲ့စတဲ့လူ မောင်/မ အစရှိသဖြင့် လူတွေရှိတာကို ယောကျာ်းတွေအရင်စီ (သို့မဟုတ်) မိန်းမတွေအရင်စီ ချင်တယ်၊ ဒါမှမဟုတ် အသက်အရွယ်လိုက်စီ အစရှိတဲ့ operation လေးတွေလုပ်ကြည့်ကြမယ်။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const people = [\r\n    \"Daw Hla\",\r\n    \"U Kaung\",\r\n    \"Daw Mya\",\r\n    \"U Bo\",\r\n    \"Daw Kyi\",\r\n    \"Mg zaw\",\r\n    \"Daw Phyu\",\r\n    \"Ma Sapel\",\r\n    \"Ma Hnin\",\r\n    \"Mg kyaw\",\r\n    \"U Paing\",\r\n    \"Mg Aung\",\r\n    \"Ma kay\",\r\n ];\r\n "
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "အောက်က ဥပမာမှာ gender အလိုက်အရင်စီမယ် ယောကျာ်းတွေကို အရင်စီကြည့်မယ်။ \"ဦး\" နဲ့စတာအရင်လာမယ်၊ ပြီးရင် \"ဒေါ်\" နဲ့စတာလာမယ်၊ ပြီးရင် ပြီးရင် \"မောင်\" , ပြီးရင် \"မ\" နဲ့စတာဆက်လာမယ်။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const sortPeopleMaleFirst = (person1, person2) => {\r\n    if (person1.startsWith(\"U\") && !person2.startsWith(\"U\")) {\r\n       return -1;\r\n    } else if (!person1.startsWith(\"U\") && person2.startsWith(\"U\")) {\r\n       return 1;\r\n    } else if (person1.startsWith(\"Mg\") && !person2.startsWith(\"Mg\")) {\r\n       return -1;\r\n    } else if (!person1.startsWith(\"Mg\") && person2.startsWith(\"Mg\")) {\r\n       return 1;\r\n    } else {\r\n       return 0;\r\n    }\r\n };\r\n console.table(people.sort(sortPeopleMaleFirst));   "
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "ဒီအောက်က ဥပမာမှာတော့ အသက်အရွယ်လိုက်ရယ်, gender လိုက်ရယ် condition ၂ မျိုးနဲ့ စီမယ်၊ ယောကျာ်းတွေကို အရင်စီမယ်။ \"ဦး\" နဲ့စတာအရင်လာမယ် ပြီးရင် \"မောင်\" , ပြီးရင်မိန်းမတွေကို ဆက်ပြီးစီမယ် \"ဒေါ်\" နဲ့စတာအရင်လာမယ်၊ ပြီးရင် \"မ\" နဲ့စတာဆက်လာမယ်။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const sortPeopleElderFirst = (person1, person2) => {\r\n    if (person1.startsWith(\"U\") && !person2.startsWith(\"U\")) {\r\n       return -1;\r\n    } else if (!person1.startsWith(\"U\") && person2.startsWith(\"U\")) {\r\n       return 1;\r\n    } else if (person1.startsWith(\"Daw\") && !person2.startsWith(\"Daw\")) {\r\n       return -1;\r\n    } else if (!person1.startsWith(\"Daw\") && person2.startsWith(\"Daw\")) {\r\n       return 1;\r\n    } else if (person1.startsWith(\"Mg\") && !person2.startsWith(\"Mg\")) {\r\n       return -1;\r\n    } else if (!person1.startsWith(\"Mg\") && person2.startsWith(\"Mg\")) {\r\n       return 1;\r\n    } else {\r\n       return 0;\r\n    }\r\n };\r\n console.table(people.sort(sortPeopleElderFirst)); "
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### array ထဲက object တွေ\r\n\r\nReal world မှာ JSON (Javascript object notation) format data တွေကိုပဲအသုံးပြုကြပါတယ်၊ JSON format data တွေဆိုတာ အောက်ကဥပမာတွေအတိုင်း ပုံစံတွေ အတိုင်းဖြစ်ပါတယ်၊ တကယ်တော့ array of objects တွေပါပဲ။ array of objects တွေကို Multi condition sorting လုပ်ရင် တစ်ခုသတိထားရမှာက condition တစ်ခုနဲ့တစ်ခု independent ဖြစ်ရပါမယ်။ ဆိုလိုတာက age အလိုက် sorting လုပ်ပြီးသားကို first name လိုက်ထပ်ပြီး စီလို့မရပါဘူး၊\r\n\r\n\r\nOk so..\r\n\r\nဆက်ကြည့်လိုက်ကြရအောင်\r\n\r\nအောက်ကဥပမာတွေမှာ array of object တွေကို sorting လုပ်သွားမယ်။\r\n\r\n- ပထမ ဥပမာမှာ\r\n    ယောကျာ်းတွေကို အရင်စီ, ပြီးရင် စီလိုက်တဲ့လူတွေကို အသက်အရွယ် ဂဏန်းအတိအကျနဲ့ထပ်စီမယ်။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "\r\nconst people = [\r\n    { name: \"Daw Hla\", age: 45 },\r\n    { name: \"U Kaung\", age: 77 },\r\n    { name: \"Daw Mya\", age: 34 },\r\n    { name: \"U Bo\", age: 59 },\r\n    { name: \"Daw Kyi\", age: 67 },\r\n    { name: \"Mg zaw\", age: 18 },\r\n    { name: \"Daw Phyu\", age: 55 },\r\n    { name: \"Ma Sapel\", age: 18 },\r\n    { name: \"Ma Hnin\", age: 21 },\r\n    { name: \"Mg kyaw\", age: 19 },\r\n    { name: \"U Paing\", age: 66 },\r\n    { name: \"Mg Aung\", age: 17 },\r\n    { name: \"Ma kay\", age: 22 },\r\n ];\r\n \r\n const sortPeopleMaleFirst = (person1, person2) => {\r\n    if (person1.name.startsWith(\"U\") && !person2.name.startsWith(\"U\")) {\r\n       return -1;\r\n    } else if (!person1.name.startsWith(\"U\") && person2.name.startsWith(\"U\")) {\r\n       return 1;\r\n    } else if (person1.name.startsWith(\"Mg\") && !person2.name.startsWith(\"Mg\")) {\r\n       return -1;\r\n    } else if (!person1.name.startsWith(\"Mg\") && person2.name.startsWith(\"Mg\")) {\r\n       return 1;\r\n    } else if (person1.age < person2.age) {\r\n       return 1;\r\n    } else if (person1.age > person2.age) {\r\n       return -1;\r\n    } else {\r\n       return 0;\r\n    }\r\n };\r\n \r\n console.table(people.sort(sortPeopleMaleFirst));\r\n "
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "nested if else တွေများလာတော့ clean ဖြစ်အောင် switch statement ကိုအသုံးပြုနိင်ပါတယ်။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "\r\nconst sortPeopleMaleFirstUsingSwitch = (person1, person2) => {\r\n    switch (true) {\r\n       case person1.name.startsWith(\"U\") && !person2.name.startsWith(\"U\"):\r\n          return -1;\r\n       case !person1.name.startsWith(\"U\") && person2.name.startsWith(\"U\"):\r\n          return 1;\r\n       case !person1.name.startsWith(\"Mg\") && person2.name.startsWith(\"Mg\"):\r\n          return 1;\r\n       case person1.age < person2.age:\r\n          return 1;\r\n       case person1.age > person2.age:\r\n          return -1;\r\n       default:\r\n          return 0;\r\n    }\r\n };\r\n "
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Sorting by dates"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Date အလိုက် object တွေကိုဘယ်လို sort မလဲ?\r\n\r\n    ပုံမှန်အားဖြင့်တော့ year နဲ့စတဲ့ date string တွေကို casually sort လုပ်လို့ရပါတယ်။အောက်က ဥပမာအတိုင်းဆို string နှစ်ခု compare တော့ ရှေ့ဆုံး \"2002\" နဲ့ \"2001\" ကို compare လုပ်ကြည့်တော့ အလုပ်ဖြစ်သလိုတော့ထင်ရပါတယ်။\r\n\r\n```js\r\nconsole.log(\"2002-5-12\" > \"2001-12-22\"); // true\r\n```\r\n\r\n    more examples\r\n\r\n```js\r\nconsole.log(\"2022-12-01\" > \"2022-09-01\"); // true\r\nconsole.log(\"2022-12-01\" > \"2022-12-12\"); // false\r\n```"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const people = [\r\n    { name: \"Karl\", dateOfBirth: \"1986-12-01\" },\r\n    { name: \"Joe\", dateOfBirth: \"1986-01-06\" },\r\n    { name: \"Henry\", dateOfBirth: \"1966-18-04\" },\r\n    { name: \"Leo\", dateOfBirth: \"1996-09-97\" },\r\n    { name: \"Ellie\", dateOfBirth: \"1996-18-02\" },\r\n    { name: \"Andrew\", dateOfBirth: \"1946-18-04\" },\r\n    { name: \"Sue\", dateOfBirth: \"1956-11-07\" },\r\n    { name: \"Bill\", dateOfBirth: \"1986-18-12\" },\r\n    { name: \"Freya\", dateOfBirth: \"1956-18-04\" },\r\n    { name: \"Dave\", dateOfBirth: \"1986-03-09\" },\r\n    { name: \"Peter\", dateOfBirth: \"1756-09-04\" },\r\n ];\r\n\r\n const sortByDate = (a, b) => {\r\n    if (a.dateOfBirth < b.dateOfBirth) {\r\n       return 1;\r\n    } else if (a.dateOfBirth > b.dateOfBirth) {\r\n       return -1;\r\n    } else {\r\n       return 0;\r\n    }\r\n };\r\n \r\n console.log(people.sort(sortByDate));\r\n "
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "ဒီအောက်က ဥပမာတွေမှာ user တွေရယ် joined date တွေရယ်ဆိုပြီးရှိတယ်၊ joined တွေမှာ လ နာမည်တွေနဲ့ပေးထားတယ်၊ အဲတာကို ဘယ်လိုစီမလဲဆိုတော့၊ javascript မှာ Date month name ကိုစီလို့ရတဲ့ method ဆိုတာတော့သီးသန့်မရှိဘူး ဒါပေမယ့် အောက်ကအတိုင်း ကိုယ်ပိုင်တော့ဖန်တီးလို့ရတယ်။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const people = [\r\n    { name: \"Karl\", joined: \"2023-april-01\" },\r\n    { name: \"Joe\", joined: \"2023-february-06\" },\r\n    { name: \"Henry\", joined: \"2023-january-24\" },\r\n    { name: \"Leo\", joined: \"2023-april-17\" },\r\n    { name: \"Ellie\", joined: \"2023-march-02\" },\r\n    { name: \"Andrew\", joined: \"2023-april-08\" },\r\n    { name: \"Sue\", joined: \"2023-january-17\" },\r\n    { name: \"Bill\", joined: \"2023-december-22\" },\r\n    { name: \"Freya\", joined: \"2023-march-14\" },\r\n    { name: \"Dave\", joined: \"2023-october-19\" },\r\n    { name: \"Peter\", joined: \"2023-january-24\" },\r\n ];\r\n \r\n const sortByMonthName = (a, b) => {\r\n    const monthOrder = [\r\n       \"january\",\r\n       \"february\",\r\n       \"march\",\r\n       \"april\",\r\n       \"may\",\r\n       \"june\",\r\n       \"july\",\r\n       \"august\",\r\n       \"september\",\r\n       \"october\",\r\n       \"november\",\r\n       \"december\",\r\n    ];\r\n    return (\r\n       monthOrder.indexOf(a.joined.split(\"-\")[1]) -\r\n       monthOrder.indexOf(b.joined.split(\"-\")[1])\r\n    );\r\n };\r\n \r\n console.log(people.sort(sortByMonthName)); "
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "အပါ်က example မှာတော့ Month name တွေအလိုက်တော့ စီသွားတယ်၊ ဒါပေမယ့် Day တွေကတော့ အစဥ်လိုက်မဖြစ်သေးဘူး"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const people = [\r\n    { name: \"Joe\", joined: \"2023-february-06\" },\r\n    { name: \"Karl\", joined: \"2023-april-01\" },\r\n    { name: \"Joe\", joined: \"2023-february-01\" },\r\n    { name: \"Jillian\", joined: \"2023-february-01\" },\r\n    { name: \"Joe\", joined: \"2023-february-26\" },\r\n    { name: \"Emma\", joined: \"2023-march-15\" },\r\n    { name: \"Henry\", joined: \"2023-january-24\" },\r\n    { name: \"Lanny\", joined: \"2023-march-01\" },\r\n    { name: \"Leonardo\", joined: \"2023-april-17\" },\r\n    { name: \"Elliot\", joined: \"2023-march-02\" },\r\n    { name: \"Henry\", joined: \"2023-january-22\" },\r\n    { name: \"Andrei\", joined: \"2023-april-02\" },\r\n    { name: \"Harry\", joined: \"2023-january-06\" },\r\n    { name: \"Andrew\", joined: \"2023-april-08\" },\r\n    { name: \"Peter\", joined: \"2023-january-24\" },\r\n    { name: \"Emily\", joined: \"2023-march-11\" },\r\n    { name: \"Andrew\", joined: \"2023-april-16\" },\r\n    { name: \"Sue\", joined: \"2023-january-17\" },\r\n    { name: \"Henry\", joined: \"2023-january-04\" },\r\n    { name: \"Andrew\", joined: \"2023-april-29\" },\r\n    { name: \"Bob\", joined: \"2023-december-22\" },\r\n    { name: \"Bill\", joined: \"2023-december-12\" },\r\n    { name: \"Joe\", joined: \"2023-february-16\" },\r\n    { name: \"Freya\", joined: \"2023-march-14\" },\r\n    { name: \"Dave\", joined: \"2023-october-19\" },\r\n    { name: \"Anne\", joined: \"2023-october-02\" },\r\n    { name: \"Micheal\", joined: \"2023-october-22\" },\r\n ];\r\n \r\n const monthOrder = [\r\n    \"january\",\r\n    \"february\",\r\n    \"march\",\r\n    \"april\",\r\n    \"may\",\r\n    \"june\",\r\n    \"july\",\r\n    \"august\",\r\n    \"september\",\r\n    \"october\",\r\n    \"november\",\r\n    \"december\",\r\n ];\r\n const sortByMonthName = (a, b) => {\r\n \r\n    const [_, aJoinedMonth, aJoinedDay] = a.joined.split(\"-\");\r\n    const [__, bJoinedMonth, bJoinedDay] = b.joined.split(\"-\");\r\n \r\n    if (\r\n       monthOrder.indexOf(aJoinedMonth) - monthOrder.indexOf(bJoinedMonth) >\r\n       0\r\n    ) {\r\n       return 1;\r\n    } else if (\r\n       monthOrder.indexOf(aJoinedMonth) - monthOrder.indexOf(bJoinedMonth) <\r\n       0\r\n    ) {\r\n       return -1;\r\n    } else if (aJoinedDay < bJoinedDay) {\r\n       return -1;\r\n    } else if (aJoinedDay > bJoinedDay) {\r\n       return 1;\r\n    } else {\r\n       return 0;\r\n    }\r\n };\r\n \r\n console.log(people.sort(sortByMonthName));\r\n "
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "ဒါပေမယ့် ပိုရှုပ်ထွေးတဲ့ Date string တွေအတွက်တော့ Date object ကိုသုံးမှ အဆင်ပြေမှာပါ။ ကိုယ့်စီရောက်လာတဲ့ \r\ndata ပုံစံကိုပဲကြည့်ပြီး ဆုံးဖြတ်ရမှာပါ။\r\n\r\n```js\r\nnew Date()\r\n```\r\n\r\n### sorty by raw date strings\r\n\r\n    javascript ရဲ့ new Date Object က date format အတိုင်း valid ဖြစ်တဲ့ raw date string တွေကို ပြန် parse ပေးနိုင်တယ်။\r\n\r\n    သူနဲ့တွဲသုံးရလို့ရတဲ့ **valueOf()** ဆိုတဲ့ static method တစ်ခုရှိတယ်။ သူ့ရဲ့ syntax က \r\n    \r\n    အောက်ကအတိုင်းဖြစ်တယ်။ valueOf() ဆိုတဲ့ဟာက Jan 1 1970 ကနေစပြီး ထည့်လိုက်တဲ့ date အထိရှိတဲ့ \r\n    \r\n    millisecond ပေါင်းကို timestamp format နဲ့ return ပြန်ပေးတယ်။\r\n \r\n```js\r\n// month-day-year\r\nconst rawDateString = \"12-02-2023\"\r\n\r\nnew Date(rawDateString).valueOf() // return 1701451800000\r\n\r\n```\r\n\r\n    valid date format ဆိုတာလေးကိုလဲ သိဖို့လိုပါသေးတယ်။ သူ့ရဲ့ raw date string format က.. \r\n    \r\n- \"လ-ရက်-နှစ်\" \"10-15-2023\" or\r\n\r\n- \"-နှစ်-လ-ရက်\" \"2023-10-15\"\r\n\r\n\r\n    အဲဒီပုံစံဝင်မှ ရပါမယ်။ အဲဒီပုံစံ မဝင်ရင် **new Date()** စခေါ်ချိန်မှာ \"Invalid Date\" လို့ပေါ်မှာဖြစ်ပြီး၊ **valueOf** ခေါ်လိုက်ရင် \r\n\r\n    Nan (Not a Number) လို့ return ပြန်မှာပါ။\r\n\r\n\r\n\r\nမှတ်ချက်။ ။ အောက်မှာပြသွားမယ့် ဥပမာတွေ မှာ \"Date-only format string\" တွေကိုပဲပြသွားမှာပါ ဥပမာ၊ \"10-15-2023\"။ ပိုရှုပ်ထွေးတဲ့ \"Date-time format\" တွေ \"Date-time-millisecond\" တွေကိုတော့ ရှုပ်ထွေးမှူ မဖြစ်စေလိုတာကြောင့် မထည့်ထားတာပါ၊ အလုပ်လုပ်ပုံကတော့ အတူတူပဲဖြစ်တာရယ်ကြောင့်ပါ။ Date-time format example \"2023-01-01-10T13:05:14\" etc.."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const people = [\r\n    { name: \"Jonahs\", joined: \"2013-2-06\" },\r\n    { name: \"Karl\", joined: \"2020-04-01\" },\r\n    { name: \"Joe\", joined: \"2013-02-01\" },\r\n    { name: \"Jillian\", joined: \"2020-02-01\" },\r\n    { name: \"Tom\", joined: \"2014-02-26\" },\r\n    { name: \"Frank\", joined: \"2021-12-06\" },\r\n    { name: \"Emma\", joined: \"2007-03-15\" },\r\n    { name: \"Hems\", joined: \"2004-01-24\" },\r\n    { name: \"Lanny\", joined: \"2012-03-01\" },\r\n    { name: \"Leonardo\", joined: \"2023-04-17\" },\r\n    { name: \"Elliot\", joined: \"2023-03-02\" },\r\n    { name: \"Henry\", joined: \"2023-01-22\" },\r\n    { name: \"Phillip\", joined: \"2023-04-07\" },\r\n    { name: \"Andrei\", joined: \"2013-05-02\" },\r\n    { name: \"Harry\", joined: \"2005-11-13\" },\r\n    { name: \"Micheal\", joined: \"2022-10-22\" },\r\n    { name: \"Andrew\", joined: \"2002-14-08\" },\r\n    { name: \"Ivan\", joined: \"2006-04-16\" },\r\n    { name: \"Peter\", joined: \"2008-07-24\" },\r\n    { name: \"Emily\", joined: \"2011-03-11\" },\r\n    { name: \"Bill\", joined: \"2013-12-12\" },\r\n    { name: \"Sue\", joined: \"2023-01-17\" },\r\n    { name: \"Hillary\", joined: \"2020-05-04\" },\r\n    { name: \"Morgan\", joined: \"2023-04-09\" },\r\n    { name: \"Andrew\", joined: \"2015-02-29\" },\r\n    { name: \"Bob\", joined: \"2023-12-22\" },\r\n    { name: \"Julia\", joined: \"2003-02-16\" },\r\n    { name: \"Freya\", joined: \"2016-03-14\" },\r\n    { name: \"Dave\", joined: \"2020-10-19\" },\r\n    { name: \"Anne\", joined: \"2022-10-02\" },\r\n ];\r\n \r\n const sortByDate = (person1, person2) => {\r\n    if (\r\n       new Date(person1.joined).valueOf() > new Date(person2.joined).valueOf()\r\n    ) {\r\n       return -1;\r\n    } else if (\r\n       new Date(person1.joined).valueOf() < new Date(person2.joined).valueOf()\r\n    ) {\r\n       return 1;\r\n    } else {\r\n       return 0;\r\n    }\r\n };\r\n \r\n console.table(people.sort(sortByDate)); "
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### sort by time\r\n\r\nJavascript မှာ time နဲ့ sorting လုပ်လို့ရတဲ့ feature မျိုးတော့ default မပါပါဘူး ကိုယ်ပိုင်ပဲ implement လုပ်ရပါမယ်။\r\n\r\nအောက်က example code မှာလိုမျိုး \"12:00 am\" တွေပါလာခဲ့ရင်လဲ ပုံမှန်အတိုင်း စဥ်းစားရုံပါပဲ။\r\n\r\nပုံမှန်အတိုင်းဆိုတော့ valid date string အပြည့်အစုံတစ်ခုရှိမယ်ဆိုရင် ဘယ်ဟာလာလာ parse ရင် parse, မဟုတ်ရင် valueOf() method \r\n\r\nနဲ့ခေါ်သုံးလို့ရတာကြောင့်၊ အရင်ဆုံး valid ဖြစ်တဲ့ raw date string တစ်ခုဖြစ်အောင်ပဲတည်ဆောက်လိုက်မယ်။\r\n\r\nvalid ဖြစ်တဲ့ date string အပြည်အစုံဆိုရင် \"10/7/2023, 6:05:46 PM\" ဒီလိုလေးဆိုရပြီမို့ အဲဒီအတိုင်းပဲ ရအောင် တည်ဆောက်ရုံပါပဲ။\r\n\r\nအဲလိုရပြီဆိုရင် **Date.prase()** ကိုသုံးရင်သုံး **valueOf()** ကိုလဲသုံးချင်သုံး timestamp တွက်လို့ရပြီဆိုတော့ compare လို့ရပါပြီ။\r\n\r\nအောက်က code မှာ am pm အချိန် string တွေပါတဲ့ array of objects တွေရှိမယ်။ သူတို့ကို am to pm time အလိုက်ပြန်စီမယ်။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const students = [\r\n    { name: \"Jonahs\", arrived: \"12:15 pm\" },\r\n    { name: \"Tom\", arrived: \"04:05 am\" },\r\n    { name: \"Karl\", arrived: \"04:05 am\" },\r\n    { name: \"Joe\", arrived: \"06:15 am\" },\r\n    { name: \"Jillian\", arrived: \"09:15 pm\" },\r\n    { name: \"Frank\", arrived: \"01:15 pm\" },\r\n    { name: \"Emma\", arrived: \"03:45 pm\" },\r\n    { name: \"Hems\", arrived: \"06:49 pm\" },\r\n    { name: \"Lanny\", arrived: \"07:25 pm\" },\r\n    { name: \"Leonardo\", arrived: \"03:18 pm\" },\r\n    { name: \"Elliot\", arrived: \"08:19 am\" },\r\n    { name: \"Henry\", arrived: \"05:19 pm\" },\r\n    { name: \"Phillip\", arrived: \"08:15 am\" },\r\n    { name: \"Andrei\", arrived: \"06:26 pm\" },\r\n    { name: \"Harry\", arrived: \"09:44 pm\" },\r\n    { name: \"Micheal\", arrived: \"07:05 pm\" },\r\n ];\r\n \r\n const sortByDate = (person1, person2) => {\r\n    const person1ArrivedTime = `${new Date().toLocaleDateString()} ${person1.arrived.slice(\r\n       0,\r\n       -2\r\n    )} ${person1.arrived.slice(-2)}`;\r\n    const person2ArrivedTime = `${new Date().toLocaleDateString()} ${person2.arrived.slice(\r\n       0,\r\n       -2\r\n    )} ${person2.arrived.slice(-2)}`;\r\n \r\n    if (Date.parse(person1ArrivedTime) > Date.parse(person2ArrivedTime)) {\r\n       return 1;\r\n    } else if (Date.parse(person1ArrivedTime) < Date.parse(person2ArrivedTime)) {\r\n       return -1;\r\n    } else {\r\n       return 0;\r\n    }\r\n };\r\n \r\n console.table(students.sort(sortByDate));\r\n "
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# slice\r\n- array တစ်ခုကို paramenter မှာပေးထားတဲ့ start index, end index တွေအတိုင်း ဖြတ်ပေးပြီးတော့ new **shallow copied array** တစ်ခုပြန်ပေးတယ်။\r\n- array တစ်ခုကို copy လို့လဲရတယ် shallow copied array တစ်ခုပြန်ပေးတယ်။\r\n- \"-\" index ဆိုရင်နောက်ဆုံးကနေစရေတယ် -1 ဆိုရင် တစ်ခု -2 ဆိုရင်နောက်ဆုံး ၁ ခုရဲ့ရှေ့က\r\n\r\n```js\r\narray.slice(startIndex, endIndex)\r\n```"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const array = [1,2,3,4,5,6,7,8,9,10]\r\nconst slice = array.slice(1, 4);\r\nconst sliceFromThree = array.slice(3);\r\nconst lastThreeElements = array.slice(-3);\r\nconst threeElementsFromIndexFromLast = array.slice(-4, -1);\r\nconst copy = array.slice();\r\n\r\nconsole.log(\"from 1 until 4\", slice);\r\nconsole.log(\"From 3 to end\", sliceFromThree);\r\nconsole.log(\"last 3 elements\", lastThreeElements);\r\nconsole.log(\"three elements from last\", threeElementsFromIndexFromLast);"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# splice\r\n- array တစ်ခုက element တွေထဲက given condition နဲ့ကိုက်ညီတဲ့ element ကိုတွေအားလုံးကို ရှာတဲ့အခါမှာသုံးတယ်။\r\n- Splice က **new array return မပြန်ပါဘူး**။ original array ကို **modify** တာပါ၊ foreach method နဲ့တွဲသုံးတဲ့အခါ သတိထားပါ။\r\n\r\n```js\r\n// deleting\r\narray.splice(startIndex, endIndex)\r\n// replacing\r\narray.splice(startIndex, numberOfElementsToReplace, newElementToReplace)\r\n```"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// simple deleting 4 elements from index 0\r\nconst array = [1,2,3,4,5,6]\r\n\r\nconsole.log(array.splice(4))"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[ 5, 6 ]",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "// deleting with startIndex, number of elements\r\nconst array = [1,2,3,4,5,6,7]\r\n\r\n// startIndex = 0, number of elements = 2\r\n// starts from index 0 and delete 2 elements\r\narray.splice(0, 2);\r\n\r\nconsole.log(array); // [3,4,5,6,7]\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[ 3, 4, 5, 6, 7 ]",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "// replacing\r\nconst array = [1,2,3,4,5,6,7]\r\n\r\n// from index 0, until index 3 (ie: start from index 3), replace all elements with \"one\"\r\nconsole.log(\"before splice\",array.length); // 7\r\narray.splice(0, 3, \"one\");\r\n\r\nconsole.log(\"after splice\",array.length); // 5\r\nconsole.log(array); // [\"one\", 4,5,6,7]"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// more replacing exercises\r\nconst array = [1, 2, 3, 4, 5, 6];\r\n\r\n// code explain:  from index 1, I will replace next 2 places with \"some items\" \r\nconst a = array.splice(\r\n   1,\r\n   2,\r\n   \"replaced index 2 and insert new\",\r\n   \"me too\",\r\n   \"me too here\",\r\n   \"here too\"\r\n);"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// more exercises\r\nconst array = [1,3,5,5,7,8,9,11,33,45,51,37]\r\n//  modify the array\r\n// \r\nconst splice = array.splice(1, 4); // after-> [ 1,  8,  9, 11,33, 45, 51, 37 ]\r\n\r\n// just like slice\r\nconst spliceFromIndex = array.splice(2)\r\nconsole.log(spliceFromIndex)\r\n\r\n// if nothing was inside the param there will be an empty array\r\nconst splice2 = array.splice();\r\n\r\nconsole.log(\"1 to 5\", splice);\r\nconsole.log(\"\");\r\nconsole.log(\"After->\", array);\r\nconsole.log(\"empty\", splice2);\r\n\r\n// starting from index 0 replace all elements with \"18\" until index 4\r\nconst replace = array.splice(0, 4, 18);\r\n\r\n// return all replaced elements\r\nconsole.log(replace);\r\nconsole.log(array)\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# reverse\r\n- array ၁ ခုကို ပြောင်းပြန်လှန်ပေးတယ်၊ original array ကို modify လုပ်တာဖြစ်တယ်၊ copy array return မပြန်ပါဘူး။\r\n\r\n```js\r\narray.reverse()\r\n```"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const originalArray = [1,2,3,4,5]\r\n\r\nconst reversedArray = originalArray.reverse()\r\nreversedArray[0] = \"one\"\r\nconsole.log(\"original\",originalArray)\r\nconsole.log(\"reversed\",reversedArray)\r\n// same memory reference"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# concat\r\n- array ၂ ခုကို ဆက်ပေးတာပါ, ၂ ခုထက်မကလဲဆက်လို့ရပါတယ်။\r\n- ဆက်ပြီးတော့ new shallow copy array ကိုပြန်ပေးပါတယ်။\r\n\r\n```js\r\narray.concat(...otherArrays)\r\n```"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const array1 = ['a', 'b', 'c'];\r\nconst array2 = ['d', 'e', 'f'];\r\nconst array3 = array1.concat(array2);\r\n\r\nconsole.log(array3);"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const num1 = [1, 2, 3];\r\nconst num2 = [4, 5, 6];\r\nconst num3 = [7, 8, 9];\r\n\r\nconst numbers = num1.concat(num2, num3);\r\n\r\nconsole.log(numbers);"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const letters = [\"a\", \"b\", \"c\"];\r\n\r\nconst alphaNumeric = letters.concat(1, [2, 3]);\r\n\r\nconsole.log(alphaNumeric);"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const num1 = [[1]];\r\nconst num2 = [2, [3]];\r\n\r\nconst numbers = num1.concat(num2);\r\n\r\nconsole.log(\"new array\",numbers);\r\n\r\n\r\nnum1[0].push(4);\r\n\r\nconsole.log(numbers);"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# flat\r\n- array ထဲက sub တွေကို တစ်ခုထဲဖြစ်အောင်ဆက်ပေးတာပါ,\r\n- ဆက်ပြီးတော့ array အသစ်တစ်ခု ကိုပြန်ပေးပါတယ်။\r\n\r\n```js\r\narray.flat(level)\r\n```"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const ar = [0, 1, [2, [3, [4, 5]]]];\r\n\r\nconsole.log(\"level depth 1 default\",ar.flat())\r\nconsole.log(\"level depth 3\",ar.flat(3))\r\nconsole.log(\"level depth infinity\",ar.flat(Infinity))"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# join\r\n- array ၁ ခု element တွေအားလုံးကိုပေါင်းပြီး string ပြောင်းပစ်တာ။\r\n\r\n```js\r\narray.join()\r\n```"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "\r\nconst array = [1,2,3,4,5,6,7]\r\nconst array2 = [\"apple\", \"banana\", \"chocolate\", \"durian\"]\r\n\r\nconsole.log(array.join())\r\nconsole.log(array2.join())"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "1,2,3,4,5,6,7",
                                "apple,banana,chocolate,durian",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# includes\r\n- array ၁ခု ထဲမှာ parameter ထဲမှာပေးထားတဲ့ element ပါလားမပါလားဆိုတာကို စစ်တဲ့အခါသုံးတယ်။\r\n- args ၂ ခု ထဲကမှ startIndex မပေးထားရင် default အားဖြင့် အစ index 0 ကနေ စရှာမှာဖြစ်ပြီးတော့, ပေးထားရင်တော့ ပေးထားတဲ့ index ကနေ စရှာမှာပါ။\r\n- startIndex က given array length ထက် ကြီးနေရင်, false return ပြန်ပေးပြီးတော့ ဘာမှကိုလဲ မရှာတော့ပါဘူး\r\n- startIndex က - ဖြစ်နေတိုင်း နောက်ဆုံးကနေ စပြီးရှာမှာမဟုတ်ပါဘူး သူရဲ့ formula ဒီလိုလေးပါ ဥပမာ array length 6 ရှိတဲ့ array တစ်ခုမှာ ရှာဖို့ -1 ပေးလိုက်တယ်ဆိုပါစို့ **6 + (-1) = 5** ဆိုတော့ index 5 \r\nကနေစရှာမှာပါ။\r\n\r\n- ပါရင် true မပါရင် false return ပြန်ပေးတယ်။\r\n- empty slot တွေကိုလဲရှာလို့ ရပါတယ်\r\n\r\n```js\r\narray.includes(element, startIndex)\r\n```"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const array = [\"apple\", \"banana\", \"car\", \"dog\", \"ear\"]\r\nconst arrayWithSomeEmptySlots = [\"fish\", , \"horse\",, \"joker\"]\r\n\r\nconst isIncludesFrom0 = array.includes(\"car\")\r\nconst isIncludesFrom4 = array.includes(\"car\", 4)\r\nconst isEmptySlot = arrayWithSomeEmptySlots.includes(undefined)\r\n\r\nconst isIncludes = array.includes(\"fish\")\r\n\r\nconsole.log(isIncludesFrom0)\r\nconsole.log(isIncludesFrom4)\r\nconsole.log(isIncludesFromLast)\r\nconsole.log(isIncludes)\r\nconsole.log(isEmptySlot)"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const array = [1,2,3,4,5,6,7, \"here\",8,9,10]\r\n\r\nconsole.log(array.includes(\"here\", -2)) // 11 -1 = 10 -> false\r\nconsole.log(array.includes(\"here\", -3)) // 11 -3 = 9 -> false\r\nconsole.log(array.includes(\"here\", -4)) // 11 -4 = 7 -> true\r\n\r\n\r\nconst array2 = [\"apple\", \"banana\", \"car\", \"dog\", \"ear\"]\r\n\r\nconsole.log(array2.includes(\"car\", -1)) // 5 - 1 = 4 -> false\r\nconsole.log(array2.includes(\"car\", -2)) // 5 - 2 = 3 -> true\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# indexOf\r\n\r\narray တစ်ခုထဲမှာ callback ထဲက ပေးထားတဲ့ condition နဲ့ကိုက်ညီတဲ့ element တစ်ခုပါလားဆိုတာကို စစ်ပေးတာ၊\r\n- ပါရင် အဲဒီ element ရဲ့ index ကို return ပြန်ပေးတယ်၊ မပါရင် - 1 return ပြန်ပေးတယ်။\r\n- includes မှာလိုမျိုးပဲ စရှာစေချင်တဲ့ startIndex ပေးလို့ရတယ်။ အလုပ်လုပ်ပုံ အတူတူပဲဖြစ်ပါတယ်။\r\n- empty slot တွေကိုတော့ရှာလို့မရပါဘူး အဲဒီအတွက်ဆို includes ကိုပဲသုံးပါ\r\n\r\nအသုံးဝင်ပုံကတော့ element တစ်ခုကအဲဒီ array ထဲမှာ ရှိမရှိဆိုတာ သိချင်ရုံပဲ, အဲဒီ element ကို return ပြန်ထွက်လာစေချင်တာမျိုးမဟုတ်တဲ့အခြေအနေမျိုးမှာ အဆင်ပြေတယ်\r\n\r\ncondition statement နဲ့သုံးရင် return value က 0 ထက်ကြီးလား၊ငယ်လားနဲ့ စစ်လို့ရတယ်\r\n\r\n\r\n#### syntax\r\n\r\n```js\r\narray.indexOf(element, startIndex)\r\n```\r\n\r\n#### example\r\n\r\n```js\r\n\r\nconst findIndex = someArray.indexOf(\"some value\")\r\n\r\nif(findIndex > 0){\r\n    // \r\n}else{\r\n    // \r\n}\r\n\r\n```"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const array = [\"apple\", \"banana\", \"car\", \"dog\", \"ear\"]\r\nconst arrayWithSomeEmptySlots = [\"fish\", , \"horse\",, \"joker\"]\r\n\r\nconst isIncludesFrom0 = array.indexOf(\"car\")\r\nconst isIncludesFrom4 = array.indexOf(\"car\", 4)\r\nconst isIncludesFromLast = array.indexOf(\"car\", -1)\r\nconst isEmptySlot = arrayWithSomeEmptySlots.indexOf(undefined)\r\n\r\nconst isIncludes = array.indexOf(\"fish\")\r\n\r\nconsole.log(isIncludesFrom0)\r\nconsole.log(isIncludesFrom4)\r\nconsole.log(isIncludesFromLast)\r\nconsole.log(isIncludes)\r\nconsole.log(isEmptySlot)"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "indexOf နဲ့ array of objects တွေမှာဘယ်လိုဝင်ရှာမလဲ\r\n\r\nပုံမှန် အတိုင်းဆိုရင်တော့ indexOf ကိုသုံးပြီး array of objects ထဲ value တွေကို key နဲ့ဝင်ရှာလို့မရပါဘူး။\r\nသူက **standalone** ကိုပဲလက်ခံတာဖြစ်တာကြောင့် indexOf ကိုသုံးပြီး array of objects တွေထဲမှာ ကိုယ်ရှာချင်တဲ့ဟာရှိလားဆိုတာရှာဖို့ အတွက် standalone value တွေဖြစ်အောင်အရင်ပြောင်းပြီးမှ **method chaining** ကိုအသုံးပြုပြီးရှာလို့ရပါတယ်။\r\n\r\nဆိုတော့ standalone တွေရအောင်ပြောင်းဖို့ဆိုရင် new array တစ်ခု ပြန်ပေးတဲ့ method တစ်ခုသုံးရပါမယ်။ သူကတော့ **map** ပါ။ map ကနေကိုယ်ရှာချင်တဲ့ key ရဲ့ value တွေကိုဆွဲထုတ်လာမယ်။ ပြီးရင် **method chaining** သုံးပြီး **indexOf** နဲ့ကပ်ပေးလိုက်မယ်၊ ဒါဆိုရပါပြီ။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// ဒီလိုလုပ်လို့မရပါဘူး\r\n\r\nconst arrayOfObjects = [\r\n    { name: \"James\", age: 88 },\r\n    { name: \"Emily\", age: 91 },\r\n    { name: \"George\", age: 89 },\r\n    { name: \"Harry\", age: 40 },\r\n ];\r\n \r\n console.log(arrayOfObjects.indexOf({ name: \"Emily\" })); // -1\r\n "
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// ဒီလိုလုပ်ရပါမယ်\r\n\r\nconst arrayOfObjects = [\r\n    { name: \"James\", age: 88 },\r\n    { name: \"Emily\", age: 91 },\r\n    { name: \"George\", age: 89 },\r\n    { name: \"Harry\", age: 40 },\r\n ];\r\n \r\n console.log(arrayOfObjects.map((person) => person.name).indexOf(\"Emily\")); // 1 "
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# some\r\n- array ၁ခု ထဲမှာ သတ်မှတ် condition နဲ့ ကိုက်ညီတဲ့ element အနည်းဆုံး ၁ ခုပါတဲ့နဲ့ true ပြန်ပေးတယ်\r\n- given condition အခြေအနေနဲ့ကိုက်ညီတဲ့ element တွေကိုရှာတာမို့ true / false operation only အတွက်ပဲအသုံးပြုပါတယ်။ \r\n\r\n```js\r\narray.some(callbackFunction, thisArg : optional)\r\n```"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const numbers = [2, 3, 4, 6, 7, 8];\r\n\r\nconsole.log(\"Array.Some ->\",numbers.some((num) => num > 7));"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "Array.Some -> true",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# every\r\n- array ၁ခု ထဲက element တွေအားလုံး သတ်မှတ် condition နဲ့ ကိုက်ညီမှ true ပြန်ပေးတယ်၊ တစ်ခုလွဲတာနဲ့ false ပြန်တယ်။\r\n- given condition အခြေအနေနဲ့ကိုက်ညီတဲ့ element တွေကိုရှာတာမို့ true / false operation only အတွက်ပဲအသုံးပြုပါတယ်။ \r\n\r\n```js\r\narray.every(callbackFunction, thisArg : optional)\r\n```"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const numbers = [2, 3, 4, 6, 7, 8];\r\n\r\nconsole.log(\"Array.every ->\",numbers.every((num) => num > 7));"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "Array.every -> false",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# reduce\r\n- reduce ရဲ့ အသုံးဝင်ပုံက အနည်းကျယ်ပြန့်တယ် အကြမ်းဖျင်းအားဖြင့်တော့ given array ထဲက element တွေအားလုံးရဲ့ စုစုပေါင်း တန်ဖို့းကို ထုတ်ပေးတာပါပဲ။\r\n\r\n```js\r\narray.reduce(callback, initialValue : optional)\r\n```\r\n\r\n- callback function ထဲမှာ previous value ရယ်, လက်ရှိရောက်နေတဲ့ current value ရယ်ဆိုပြီး argument ၂ ခုထည့်ပေးရတယ်။\r\n- previous value ဆိုတာကတော့ ကနေစလို့ လက်ရှိ ပေါင်းလာတဲ့ လတ်တလော စုစုပေါင်း ရလဒ်ကိုဆိုလိုတာပါ\r\n- current value ကတော့ လက်ရှိ previous value ကိုထပ်ပေါင်းထည့်မယ့် value (element) ပါ\r\n- previous ကို accumulator လို့လဲခေါ်ကြပါတယ်။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const shopping = [\r\n   {\r\n      item: \"shirt\",\r\n      price: 21,\r\n      qty: 2,\r\n      promo: false,\r\n   },\r\n   {\r\n      item: \"pant\",\r\n      price: 18,\r\n      qty: 3,\r\n      promo: 12,\r\n   }, // 42+18 = 60\r\n   {\r\n      item: \"jacket\",\r\n      price: 55,\r\n      qty: 1,\r\n      promo: false, // 60 + 55 = 115\r\n   },\r\n   {\r\n      item: \"shoe\",\r\n      price: 54,\r\n      qty: 3,\r\n      promo: 12, //126 + 115 = 241 <-\r\n   },\r\n];\r\n\r\n// calculate total price\r\n\r\nconst totalPrice = shopping.reduce((prev, curr) => {\r\n   console.log(prev, curr.price);\r\n\r\n   let total = prev + curr.price;\r\n\r\n   return total;\r\n}, 0);\r\n\r\nconsole.log(totalPrice);"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// calculate including promo prices\r\nconst afterPromoPrice = shopping.reduce((prev, curr) => {\r\n    let total;\r\n    if (curr.promo) {\r\n       total = prev + (curr.price - curr.promo);\r\n    } else {\r\n       total = prev + curr.price;\r\n    }\r\n \r\n    return total;\r\n }, 0);\r\n \r\n console.log(afterPromoPrice);"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "\r\n// calculate all the items with qty\r\n\r\nconst allItems = shopping.reduce((prev, cur) => {\r\n    let total = 0;\r\n \r\n    if (cur.promo) {\r\n       total = prev + (cur.price - cur.promo) * cur.qty;\r\n    } else {\r\n       total = (prev + cur.price) * cur.qty;\r\n    }\r\n \r\n    return total;\r\n }, 0);\r\n 2;"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# fill, of, from\r\n\r\nArray.from ဆိုတာ ဘာမှမဟုတ်ဘူးထင်ရပေမယ့်, တကယ်တော့ javascript မဟုတ်တဲ့ တခြား Array like data structure တွေကို Javascript \r\nနဲ့ သုံးလို့ရအောင် လုပ်တဲ့နေရာမှ အရမ်း useful ဖြစ်ပါတယ်။\r\n\r\n- Array.of\r\n    > argument param ထဲမှာ ပေးထားတဲ့ အရာတွေကနေ ဖန်တီးပေးတယ်။\r\n- Array.from\r\n    > iterable ဖြစ်တဲ့ object တစ်ခုကနေ array တစ်ခုကိုဖန်တီးပေးတယ်။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const empty = Array(3)\r\nconsole.log(empty) // <3 empty items >\r\n\r\nconst arrayOf = Array.of(4,5,6) \r\nconsole.log(arrayOf) // [4,5,6]\r\n\r\nconst arrayFrom = Array.from([4,9,6,7,10]) \r\nconsole.log(arrayFrom) // [4,9,6,7,10]"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Set\r\n- Set ဆိုတာ array တွေလို built-in data structure တစ်ခုပါပဲ။ သူက unique values တွေကိုပဲ သိမ်းတယ်။\r\n- primitives or reference ဘာပဲဖြစ်ဖြစ် အမြဲ unique values တွေပဲ store တယ်\r\n- Set တွေက array တွေနဲ့ အမြဲတွဲတယ်၊ အခြား iterable object တွေနဲ့လဲတွဲလို့ရတယ်။\r\n- Set တွေမှာ တခြား object တွေလို  literal syntax မရှိဘူး။\r\n\r\n```js\r\n    new Set()\r\n```\r\n### Properties and methods\r\n- size\r\n- has\r\n- add\r\n- delete\r\n- clear\r\n- foreach"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const set = new Set([1, 2, 3, 4, 3, 4, 5, 5, 3]);\r\n\r\nset.add(\"hello\");\r\nconst has = set.has(55);\r\n\r\nconsole.log(set);\r\nconst dl = set.delete(5);\r\nconsole.log(has);\r\nconsole.log(dl);\r\nconsole.log(set);\r\nconsole.log(set.clear())\r\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// just like normal array method\r\nconst set = new Set([1, 2, 3, 4, 3, 4, 5, 5, 3]);\r\n\r\n\r\nset.forEach((s) => {\r\n    console.log(s)\r\n})"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "\r\n<h1 align=\"center\"> <b> Coding Challenges [PART-1]<b><span style=\"color: gray; font-weight: light; font-size:20px\">(Brute force)</span></h1> \r\n\r\n# Test your Javascript skill by solving the following problems.\r\n\r\n### [Get a maximum and minimum number in an array](#maximum--minimum-number-in-an-array) 🌶\r\n### [Swap two elements](#swap-two-indexes-from-an-aray) 🌶\r\n### [Get a nth of factorial](#nth-factorial) 🌶\r\n### [Build a multiplication table for a given number and range](#multiplication-table) 🌶\r\n### [Sum up](#sum-up) 🌶\r\n### [Is Prime](#is-prime-number) 🌶\r\n### [Add to array and increase](#add-to-array-and-increase) 🌶🌶\r\n### [Count the number of occurrence of a given string](#count-occurrence-of-a-string) 🌶\r\n### [Longest word in a string](#longest-word)\r\n### [Prettify an ugly string](#prettify-an-ugly-string-🌶) 🌶🌶\r\n### [How many Prime numbers](#how-many-prime-numbers-below-the-given-prime-number) 🌶🌶🌶\r\n### [Combine duplicates](#combine-duplicates) 🌶🌶\r\n### [Top 3 highest income job](#highest-income-professions-by-year) 🌶🌶\r\n### [Remove if grater than n](#remove-grater-than) 🌶🌶\r\n### [Custom filter callback](#custom-filter-callback) 🌶🌶\r\n### [Palindrome using regex](#palindrome-using-regex-🌶🌶) 🌶🌶\r\n### [Array sum max](#maximum-sum-of-an-array) 🌶🌶\r\n### [Students scores after semesters](#average-scores-of-each-student-after-3-semesters) 🌶🌶🌶\r\n### [Exam results](#exam-results) 🌶🌶🌶\r\n### [array-form integer - easy](#add-an-integer-to-an-array-form-integer---easy) 🌶🌶\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Maximum & Minimum number in an array\r\n\r\narray ထဲက အကြီးဆုံးဂဏန်း နဲ့ အငယ်ဆုံး ဂဏန်း ၂ ခုတို့ရဲ့ **index** တွေကို object key-value pair ပုံစံနဲ့ return ပြန်ပေးပါ။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "\r\nconst array = [5, 7, 2, 4, 8, 10, 43];\r\nconst array2 = [5, 7, 1, 4, 8, 80, 43];\r\nconst array3 = [-12, -2, -32, 1, 8, 80, -1];\r\n\r\nconst minmaxNumberInAnArray = () => {\r\n    \r\n   //  your code\r\n }; \r\n\r\nconsole.log(minmaxNumberInAnArray(array)) // { max: 6, min: 2 }\r\nconsole.log(minmaxNumberInAnArray(array2)) // { max: 5, min: 2 }\r\nconsole.log(minmaxNumberInAnArray(array3)) // { max: 4, min: 1 }\r\nconsole.log(minmaxNumberInAnArray(23)) // null"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Swap two indexes from an aray"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const array = [3, 5, 12, 15, 6, 7, 8, 12];\r\n\r\nconst swapIndex = () => {\r\n   // your code \r\n}\r\n   \r\n\r\nconsole.log(swap(array, 1, 3)); // [3, 15, 12, 5, 6, 7, 8, 12]\r\n// index 18 does not exist\r\nconsole.log(swapIndex(array, 0, 18)); // [3, 5, 12, 15, 6, 7,  8, 12 ]\r\nconsole.log(swapIndex(array, 0, 7)); // [12, 5, 12, 15, 6, 7, 8, 3]\r\nconsole.log(array); // [12, 15, 12, 5, 6, 7,  8, 3]"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Is prime number\r\n\r\nprime number တွေဆိုတာ ဘာနဲ့စားစား သုံညမကြွင်းတဲ့ ဂဏန်းတွေပါ၊ သူတို့ကိုယ်တိုင်တော့ ပြန်စားလို့မရပါ။\r\n\r\n5 -> ဘာနဲ့စားစား သုညမကြွင်းဘူး၊ 5 နဲ့ကလွဲလို့\r\n\r\n4 -> 2/2 = 4"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "\r\nconst isPrimeNumber = () => {\r\n   //  your code \r\n };\r\n \r\n console.log(isPrimeNumber(2)); // true\r\n console.log(isPrimeNumber(3)); // true\r\n console.log(isPrimeNumber(5)); // true\r\n console.log(isPrimeNumber(6)); // false\r\n console.log(isPrimeNumber(11)); // true\r\n console.log(isPrimeNumber(12)); // false\r\n console.log(isPrimeNumber(\"hello world\")); // null"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# nth factorial"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const nFactorial = (num) => {\r\n   // your code\r\n };\r\n \r\n console.log(nFactorial(3)); // 6\r\n console.log(nFactorial(4)); // 24\r\n console.log(nFactorial(\"hello\")); // null\r\n "
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "6",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# Multiplication table"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const multiplicationTable = () => {\r\n   // your code  \r\n};\r\n\r\n\r\nconsole.log(multiplicationTable(3));\r\n/**\r\n * Target output\r\n * {\r\n  '3 x 1': 3,  \r\n  '3 x 2': 6,  \r\n  '3 x 3': 9,  \r\n  '3 x 4': 12, \r\n  '3 x 5': 15, \r\n  '3 x 6': 18, \r\n  '3 x 7': 21, \r\n  '3 x 8': 24, \r\n  '3 x 9': 27, \r\n  '3 x 10': 30,\r\n  '3 x 11': 33,\r\n  '3 x 12': 36 \r\n}\r\n */\r\n\r\n\r\nconsole.log(multiplicationTable(4,5));\r\n\r\n/**\r\n * {\r\n  '4 x 1': 4, \r\n  '4 x 2': 8, \r\n  '4 x 3': 12,\r\n  '4 x 4': 16,\r\n  '4 x 5': 20 \r\n}\r\n */\r\n\r\nconsole.log(multiplicationTable(0,10)); // null"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# Count occurrence of a string"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const countOccurrence = () => {\r\n    const searchPattern = new RegExp(searchString, \"ig\");\r\n    // your code here\r\n    \r\n }; \r\n\r\nconst string1 = \"she sells seashells on a seashore. sea has a lot of water\";\r\nconst string2 = \"Black bug bleeds blue blood, what color blood does a blue bug bleed?\";\r\n\r\nconsole.log(countOccurrence(string1, \"sea\")); // 3\r\nconsole.log(countOccurrence(string1, \"she\")); // 2\r\nconsole.log(countOccurrence(string1, \"sell\")); // 1\r\nconsole.log(countOccurrence(string2, \"bl\")); // 7\r\nconsole.log(countOccurrence(string2, \"doesn't exists\")); // null"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# sum up"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "function sumUp() {\r\n   //  your code here\r\n} \r\n\r\n\r\nconsole.log(sumUp(4, 6, 8, 9)); // 27\r\nconsole.log(sumUp(4, 6)); // 10\r\nconsole.log(sumUp(4, 6, \"hello\")); // null"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Longest word"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const string = \"A quick brown fox jumps over a lazy dog\";\r\nconst string2 = \"Among the string i am lonnnnnnngest one\";\r\nconst string3 =\r\n   \"Schizophrenia is a chronic brain disorder that affects less than one percent of the U.S. population\";\r\n\r\nfunction longestWord() {\r\n      // your code here\r\n}\r\nconsole.log(longestWord(string)); //  { length: 5, string: 'jumps' }\r\nconsole.log(longestWord(string2)); // { length: 13, string: 'lonnnnnnngest' }\r\nconsole.log(longestWord(string3)); // { length: 13, string: 'Schizophrenia' }\r\nconsole.log(longestWord(123)); // null\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# String prettier"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const string1 =\r\n\"---****  @%$*     I*%%    have=   a   lot of      white-spaces      in, my    string()    \";\r\n\r\nconst string2 = \"  I===am**not%%%that--ugl***but\";\r\n\r\nfunction stringPrettier() {\r\n   // your code here\r\n}\r\n\r\n\r\nconsole.log(stringPrettier(string1)) // \"I have a lot of white spaces in my string.\"\r\nconsole.log(stringPrettier(string2)) // \"I am not that ugl but.\""
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# Check if a string is a palindrome"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const string1 = \"a man a plan a canal panama\";\r\nconst string2 = \"mr owl ate my metal worm\";\r\nconst string3 = \"i am not a palindrome\";\r\nconst string4 = \"A man, a plan, a canal, Panama!\";\r\nconst string5 = \"Mr. Owl ate my metal worm.\";\r\nconst string6 = \"Was it a car or a cat I saw?\";\r\nconst string7 = \"No lemon, no melon.\";\r\nconst string8 = \"Not lemon, no melon.\";\r\nconst string9 = \"evilisanameofafoemanasilive\"\r\n\r\nfunction isPalindrome() {\r\n   // your code here\r\n}\r\n\r\nconsole.log(isPalindrome(string1)); // true\r\nconsole.log(isPalindrome(string2)); // true\r\nconsole.log(isPalindrome(string3)); // false\r\nconsole.log(isPalindrome(string5)); // true\r\nconsole.log(isPalindrome(string6)); // true\r\nconsole.log(isPalindrome(string7)); // true\r\nconsole.log(isPalindrome(string8)); // false\r\nconsole.log(isPalindrome(string9)); // true\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# remove if grater than n\r\n\r\ninput -> [2,4,4,5,6,7], 4\r\noutput -> [2,4,4]\r\nexplanation -> remove all numbers which are grater than the given number"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const input = [3, 5, 5, 3, 3, 6, 7, 3, 9, 2, 9, 2, 1, 1, 13, 19, 10]\r\n\r\n\r\nconst removeIfGreaterThan = () => {\r\n      //  your code here\r\n };\r\n \r\n\r\n console.log(removeIfGreaterThan(input, 6)) \r\n // return [3, 5, 5, 3, 3, 6, 7, 3, 9, 2, 9, 2, 1, 1]\r\n\r\n console.log(removeIfGreaterThan(input, 6)) \r\n // return [3, 5, 5, 3, 3,6, 3, 2, 2, 1,1]\r\n\r\n console.log(removeIfGreaterThan(input, 6))\r\n// return [3, 5, 5, 3, 3,6, 3, 2, 2, 1,1]\r\n\r\n console.log(removeIfGreaterThan(input, 2)) \r\n // return [ 2, 2, 1, 1 ]\r\n\r\n console.log(removeIfGreaterThan(input, 1)) \r\n // return [1,1]\r\n\r\n console.log(removeIfGreaterThan(input, \"hello\")) \r\n // null"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Add to array and increase"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const items = [\r\n   { item: \"potato\", qty: 1 },\r\n   { item: \"tomato\", qty: 1 },\r\n   { item: \"chillies\", qty: 1 },\r\n   { item: \"green-pepper\", qty: 1 },\r\n];\r\n\r\nfunction addToArrayAndIncrease() {\r\n   //  your code here\r\n}\r\n\r\naddToArrayAndIncrease(items, \"potato\");\r\naddToArrayAndIncrease(items, \"banana\");\r\naddToArrayAndIncrease(items, \"mango\");\r\naddToArrayAndIncrease(items, \"Potato\");\r\naddToArrayAndIncrease(items, \"Strawberry\");\r\naddToArrayAndIncrease(items, \"Strawberry\");\r\n\r\n\r\nconsole.log(items)\r\n\r\n/**\r\n * expected result\r\n * [\r\n  { item: 'strawberry', qty: 2 }, \r\n  { item: 'mango', qty: 1 },      \r\n  { item: 'banana', qty: 1 },     \r\n  { item: 'potato', qty: 3 },     \r\n  { item: 'tomato', qty: 1 },     \r\n  { item: 'chillies', qty: 1 },   \r\n  { item: 'green-pepper', qty: 1 }\r\n]\r\n */"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Combine duplicates "
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const duplicates = [\r\n    { item: \"apple\", quantity: 2 },\r\n    { item: \"orange\", quantity: 5 },\r\n    { item: \"apple\", quantity: 1 },\r\n    { item: \"apple\", quantity: 2 },\r\n    { item: \"pineapple\", quantity: 3 },\r\n    { item: \"strawberry\", quantity: 7 },\r\n    { item: \"orange\", quantity: 1 },\r\n    { item: \"grape\", quantity: 7 },\r\n    { item: \"mango\", quantity: 1 },\r\n ];\r\n \r\n const combineDuplicates = () => {\r\n   //  your code here\r\n };\r\n\r\n\r\nconsole.log(combineDuplicates(duplicates));\r\n\r\n /**\r\n  * {apple: 5,orange: 6, pineapple: 3, strawberry: 7, grape: 7, mango: 1}\r\n  */"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# How many prime numbers below the given prime number\r\n\r\nprime number တစ်ခုထည့်ပေးလိုက်မယ်။ အဲဒီ ရဲ့အောက်မှာ နောက်ထပ် တခြား prime number တွေကိုလိုချင်တာပါ။ ထည့်ပေး လိုက်တဲ့ ဂဏန်းက prime number မဟုတ်ရင် null ပြန်ပေးပါ။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "function howManyPrime() {\r\n\r\n   // your code\r\n\r\n}\r\n\r\nconsole.log(howManyPrime(2)); // output -> 2\r\nconsole.log(howManyPrime(11)); // output -> [2, 3, 5, 7 ]\r\nconsole.log(howManyPrime(17)); // output -> [2, 3, 5, 7, 11, 13 ]\r\nconsole.log(howManyPrime(23)); // output -> [2,  3,  5,  7,11, 13, 17, 19]\r\nconsole.log(howManyPrime(73)); // output -> [2,  3,  5,  7, 11, 13, 17,19, 23, 29, 31, 37, 41, 43,47, 53, 59, 61, 67, 71]\r\nconsole.log(howManyPrime(\"hello\")); // null"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Custom filter callback\r\n\r\nအပေါ်က function 1 ထဲကို တခြား function 2 ၁ ခုထည့်လိုက်လို့ အဲဒီထည့်လိုက်တဲ့ function 2 ကနေပြန်ထွက်လာမယ့် result တွေကို function 1 ကနေပြန်ထုတ်ပေးစေချင်တာပါ။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const numbers = [3, 4, 5, 6, 7, 8, 12, 19, 22, 33];\r\n\r\nfunction higherOrderFilter() {\r\n   // your code here\r\n}\r\n\r\nfunction greaterThan() {\r\n   // your code\r\n}\r\n\r\nfunction evenNumbers() {\r\n   // your code\r\n}\r\n\r\nconst greaterThanFive = higherOrderFilter(numbers, greaterThan); \r\nconst evenNum = higherOrderFilter(numbers, evenNumbers); \r\nconsole.log(greaterThanFive); // [6,7, 8, 12, 19, 22, 33]\r\nconsole.log(evenNum); // [ 4, 6, 8, 12, 22 ]"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Maximum sum of an array\r\n\r\narray တစ်ခုထဲက အကြီးဆုံးဂဏန်းတစ်ခုက ကျန်ဂဏန်းတွေရဲ့ပေါင်းခြင်းနဲ့ညီလားဆိုတာကို စစ်ဖို့ပါ။\r\nဥပမာ ။ ။ \r\n\r\n```js\r\n[4,2,1,1] = true\r\n```\r\nbecause 4 is the largest number\r\n2+1+1 = 4"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const array1 = [2, 3, 4, 5, 14];\r\nconst array2 = [3, 22, 4, 5, 14];\r\nconst array3 = [3, 22, 4, 5, 10];\r\nconst array4 = [3, 22, 4, 5, 10, 5, 7];\r\n\r\nfunction maxSumArray() {\r\n   // your code here\r\n}\r\n\r\nconsole.log(maxSumArray(array1)); // true\r\nconsole.log(maxSumArray(array2)); // false\r\nconsole.log(maxSumArray(array3)); // true\r\nconsole.log(maxSumArray(array4)); // false"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Highest income professions by year\r\nJSON data တစ်ခုရှိတယ်ဆိုပါစို့။ အဲဒီ data ထဲကနေ profession တွေရယ်သူတို့ရတဲ့လစာတွေကို နှစ်အလိုက် ဖော်ပြပေးထားတယ်။\r\n\r\nအဲဒီထဲကမှ ကိုယ်လိုချင်တဲ့ နှစ်အလိုက်ကို ရိုက်ထည့်လိုက်တာနဲ့ ကိုယ်လိုချင်တဲ့ object key-value pair ပုံစံနဲ့ ထွက်လာစေချင်တယ်။\r\n\r\n```js\r\nconst input = \"2022\"\r\n// {profession : \"doctor\", income : 3234 }\r\n```"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const people = [\r\n   {\r\n      profession: \"doctor\",\r\n      avgIncome: [\r\n         { year: \"2020\", income: 8000 },\r\n         { year: \"2021\", income: 10000 },\r\n         { year: \"2022\", income: 9000 },\r\n         { year: \"2023\", income: 12000 },\r\n      ],\r\n   },\r\n   {\r\n      profession: \"web designer\",\r\n      avgIncome: [\r\n         { year: \"2020\", income: 10000 },\r\n         { year: \"2021\", income: 7000 },\r\n         { year: \"2022\", income: 9500 },\r\n         { year: \"2023\", income: 7800 },\r\n      ],\r\n   },\r\n   {\r\n      name: \"Leo\",\r\n      profession: \"fisherman\",\r\n      avgIncome: [\r\n         { year: \"2020\", income: 12000 },\r\n         { year: \"2021\", income: 5000 },\r\n         { year: \"2022\", income: 8500 },\r\n         { year: \"2023\", income: 7000 },\r\n      ],\r\n   },\r\n   {\r\n      profession: \"surgeon\",\r\n      avgIncome: [\r\n         { year: \"2020\", income: 30000 },\r\n         { year: \"2021\", income: 20000 },\r\n         { year: \"2022\", income: 9000 },\r\n         { year: \"2023\", income: 10000 },\r\n      ],\r\n   },\r\n   {\r\n      profession: \"nurse\",\r\n      avgIncome: [\r\n         { year: \"2020\", income: 10500 },\r\n         { year: \"2021\", income: 9500 },\r\n         { year: \"2022\", income: 10000 },\r\n         { year: \"2023\", income: 9000 },\r\n      ],\r\n   },\r\n   {\r\n      profession: \"fashion designer\",\r\n      avgIncome: [\r\n         { year: \"2020\", income: 3000 },\r\n         { year: \"2021\", income: 8000 },\r\n         { year: \"2022\", income: 9000 },\r\n         { year: \"2023\", income: 10000 },\r\n      ],\r\n   },\r\n   {\r\n      profession: \"game developer\",\r\n      avgIncome: [\r\n         { year: \"2021\", income: 5000 },\r\n         { year: \"2021\", income: 13000 },\r\n         { year: \"2022\", income: 12000 },\r\n         { year: \"2023\", income: 10000 },\r\n      ],\r\n   },\r\n\r\n   {\r\n      profession: \"comedian\",\r\n      avgIncome: [\r\n         { year: \"2020\", income: 4000 },\r\n         { year: \"2021\", income: 10000 },\r\n         { year: \"2022\", income: 9000 },\r\n         { year: \"2023\", income: 12000 },\r\n      ],\r\n   },\r\n   {\r\n      profession: \"web developer\",\r\n      avgIncome: [\r\n         { year: \"2020\", income: 13000 },\r\n         { year: \"2021\", income: 8000 },\r\n         { year: \"2022\", income: 9500 },\r\n         { year: \"2023\", income: 12000 },\r\n      ],\r\n   },\r\n   {\r\n      profession: \"e sport player\",\r\n      avgIncome: [\r\n         { year: \"2020\", income: 500 },\r\n         { year: \"2021\", income: 2000 },\r\n         { year: \"2022\", income: 9000 },\r\n         { year: \"2023\", income: 15000 },\r\n      ],\r\n   },\r\n   {\r\n      profession: \"civil engineer\",\r\n      avgIncome: [\r\n         { year: \"2020\", income: 15000 },\r\n         { year: \"2021\", income: 10000 },\r\n         { year: \"2022\", income: 9000 },\r\n         { year: \"2023\", income: 12000 },\r\n      ],\r\n   },\r\n   {\r\n      profession: \"mechanical engineer\",\r\n      avgIncome: [\r\n         { year: \"2020\", income: 17000 },\r\n         { year: \"2021\", income: 10000 },\r\n         { year: \"2022\", income: 9000 },\r\n         { year: \"2023\", income: 12000 },\r\n      ],\r\n   },\r\n];\r\n\r\nfunction filterByYear() {\r\n   // your code here\r\n\r\n}\r\n\r\nconsole.table(filterByYear(\"2022\"));\r\n/**\r\n * [\r\n  { profession: 'game developer', income: 12000 },    \r\n  { profession: 'nurse', income: 10000 },\r\n  { profession: 'web designer', income: 9500 },       \r\n  { profession: 'web developer', income: 9500 },      \r\n  { profession: 'doctor', income: 9000 },\r\n  { profession: 'surgeon', income: 9000 },\r\n  { profession: 'fashion designer', income: 9000 },   \r\n  { profession: 'comedian', income: 9000 },\r\n  { profession: 'e sport player', income: 9000 },     \r\n  { profession: 'civil engineer', income: 9000 },     \r\n  { profession: 'mechanical engineer', income: 9000 },\r\n  { profession: 'fisherman', income: 8500 }\r\n]\r\n */\r\n\r\n   \r\nconsole.table(filterByYear(\"2021\"));\r\n/**\r\n * [\r\n  { profession: 'surgeon', income: 20000 },\r\n  { profession: 'doctor', income: 10000 },\r\n  { profession: 'comedian', income: 10000 },\r\n  { profession: 'civil engineer', income: 10000 },     \r\n  { profession: 'mechanical engineer', income: 10000 },\r\n  { profession: 'nurse', income: 9500 },\r\n  { profession: 'fashion designer', income: 8000 },    \r\n  { profession: 'web developer', income: 8000 },       \r\n  { profession: 'web designer', income: 7000 },        \r\n  { profession: 'fisherman', income: 5000 },\r\n  { profession: 'game developer', income: 5000 },      \r\n  { profession: 'e sport player', income: 2000 }       \r\n]\r\n */\r\nconsole.table(filterByYear(\"2025\")); // null\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Exam results\r\n\r\nexam array ၂ ခုရှိပြီး အဲဒီ ၂ခုရဲ့ ၂ ခုပေါင်း ရလဒ်ကိုပြန်ပေါင်းပြီး array အသစ်တစ်ခု ပြန်ထုတ်ပေးစေချင်တာပါ။ exam ၂ ခုမှာ subject တွေကတူချင်မှလဲတူပါမယ်။ participant တွေလဲတူချင်မှတူပါမယ်။ ဒါပေမယ့် ဘာလာလာ နောက်ဆုံး result မှာအကုန်ပါစေပြီး လိုချင်တယ့် ပုံလေးအတွက်ထွက်လာစေချင်ပါတယ်။\r\n\r\nconstraint : Please use array.reduce method"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const exam1 = [\r\n   {\r\n      name: \"emily\",\r\n      math: 45,\r\n      english: 54,\r\n      geography: 77,\r\n      english: 66,\r\n      biology: 77,\r\n   },\r\n   {\r\n      name: \"freya\",\r\n      math: 73,\r\n      english: 46,\r\n      geography: 58,\r\n      english: 78,\r\n      biology: 46,\r\n   },\r\n   {\r\n      name: \"grace\",\r\n      math: 45,\r\n      english: 54,\r\n      geography: 77,\r\n      english: 66,\r\n      biology: 77,\r\n   },\r\n   {\r\n      name: \"harley\",\r\n      math: 69,\r\n      english: 87,\r\n      geography: 57,\r\n      english: 84,\r\n      biology: 64,\r\n   },\r\n   {\r\n      name: \"iris\",\r\n      math: 39,\r\n      english: 87,\r\n      geography: 97,\r\n      english: 54,\r\n      biology: 84,\r\n   },\r\n];\r\n\r\nconst exam2 = [\r\n   {\r\n      name: \"emily\",\r\n      math: 40,\r\n      english: 54,\r\n      geography: 77,\r\n      english: 66,\r\n      biology: 77,\r\n      politics: 88,\r\n      sport: 73,\r\n   },\r\n   {\r\n      name: \"freya\",\r\n      math: 73,\r\n      english: 46,\r\n      geography: 58,\r\n      english: 78,\r\n      biology: 46,\r\n      politics: 48,\r\n      sport: 35,\r\n   },\r\n   {\r\n      name: \"grace\",\r\n      math: 45,\r\n      english: 54,\r\n      geography: 77,\r\n      english: 66,\r\n      biology: 77,\r\n      politics: 42,\r\n      sport: 64,\r\n   },\r\n   {\r\n      name: \"harley\",\r\n      math: 69,\r\n      english: 87,\r\n      geography: 57,\r\n      english: 84,\r\n      biology: 64,\r\n      politics: 76,\r\n      sport: 42,\r\n   },\r\n];\r\n\r\nfunction examResult() {\r\n   // your code ere\r\n}\r\n\r\nconst res = examResult(exam1, exam2);\r\n\r\nconsole.table(res);\r\n\r\n/**\r\n * {\r\n  emily: {\r\n    math: 85,\r\n    english: 132,\r\n    geography: 154,\r\n    biology: 154,\r\n    politics: 88,\r\n    sport: 73\r\n  },\r\n  freya: {\r\n    math: 146,\r\n    english: 156,\r\n    geography: 116,\r\n    biology: 92,\r\n    politics: 48,\r\n    sport: 35\r\n  },\r\n  grace: {\r\n    math: 90,\r\n    english: 132,\r\n    geography: 154,\r\n    biology: 154,\r\n    politics: 42,\r\n    sport: 64\r\n  },\r\n  harley: {\r\n    math: 138,\r\n    english: 168,\r\n    geography: 114,\r\n    biology: 128,\r\n    politics: 76,\r\n    sport: 42\r\n  },\r\n  iris: { math: 39, english: 54, geography: 97, biology: 84 }\r\n}\r\n */\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Average scores of each student after 3 semesters\r\n\r\nအပေါ်ကနဲ့ အနည်းငယ် ဆင်တူသလိုရှိပေမယ့် ဒီမှာက result ကို အမှတ်  ပေါ်မူတည်ပြီး descending order အတိုင်း sorted လုပ်ထားတာကိုလိုချင်တာပါ။ နောက်ပြီး semester တွေက ဘယ်နှစ်ခုပေါင်းစစ်မှာလဲဆိုတာ မသိရပါဘူး၊ ၂ ခုပေါင်းလဲစစ်မယ်၊ ၁ခုစီလဲစစ်မယ်၊ အကုန်လုံးပေါင်းလဲစစ်ချင်စစ်ပါမယ်။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const semester1 = [\r\n    {\r\n       name: \"Jimmy\",\r\n       scores: [\r\n          { subject: \"english\", score: 44 },\r\n          { subject: \"math\", score: 43 },\r\n          { subject: \"science\", score: 78 },\r\n          { subject: \"geography\", score: 82 },\r\n          { subject: \"history\", score: 72 },\r\n       ],\r\n    },\r\n    {\r\n       name: \"carl\",\r\n       scores: [\r\n          { subject: \"english\", score: 37 },\r\n          { subject: \"math\", score: 80 },\r\n          { subject: \"science\", score: 91 },\r\n          { subject: \"geography\", score: 47 },\r\n          { subject: \"history\", score: 66 },\r\n       ],\r\n    },\r\n    {\r\n       name: \"billy\",\r\n       scores: [\r\n          { subject: \"english\", score: 43 },\r\n          { subject: \"math\", score: 37 },\r\n          { subject: \"science\", score: 41 },\r\n          { subject: \"geography\", score: 87 },\r\n          { subject: \"history\", score: 76 },\r\n       ],\r\n    },\r\n    {\r\n       name: \"andrew\",\r\n       scores: [\r\n          { subject: \"english\", score: 63 },\r\n          { subject: \"math\", score: 28 },\r\n          { subject: \"science\", score: 61 },\r\n          { subject: \"geography\", score: 63 },\r\n          { subject: \"history\", score: 49 },\r\n       ],\r\n    },\r\n    {\r\n       name: \"keith\",\r\n       scores: [\r\n          { subject: \"english\", score: 33 },\r\n          { subject: \"math\", score: 76 },\r\n          { subject: \"science\", score: 53 },\r\n          { subject: \"geography\", score: 71 },\r\n          { subject: \"history\", score: 48 },\r\n       ],\r\n    },\r\n ];\r\n \r\n const semester2 = [\r\n    {\r\n       name: \"Jimmy\",\r\n       scores: [\r\n          { subject: \"english\", score: 44 },\r\n          { subject: \"math\", score: 60 },\r\n          { subject: \"science\", score: 44 },\r\n          { subject: \"geography\", score: 69 },\r\n          { subject: \"history\", score: 44 },\r\n       ],\r\n    },\r\n    {\r\n       name: \"carl\",\r\n       scores: [\r\n          { subject: \"english\", score: 69 },\r\n          { subject: \"math\", score: 76 },\r\n          { subject: \"science\", score: 79 },\r\n          { subject: \"geography\", score: 97 },\r\n          { subject: \"history\", score: 88 },\r\n       ],\r\n    },\r\n    {\r\n       name: \"billy\",\r\n       scores: [\r\n          { subject: \"english\", score: 85 },\r\n          { subject: \"math\", score: 47 },\r\n          { subject: \"science\", score: 47 },\r\n          { subject: \"geography\", score: 54 },\r\n          { subject: \"history\", score: 62 },\r\n       ],\r\n    },\r\n    {\r\n       name: \"andrew\",\r\n       scores: [\r\n          { subject: \"english\", score: 50 },\r\n          { subject: \"math\", score: 44 },\r\n          { subject: \"science\", score: 41 },\r\n          { subject: \"geography\", score: 75 },\r\n          { subject: \"history\", score: 44 },\r\n       ],\r\n    },\r\n    {\r\n       name: \"keith\",\r\n       scores: [\r\n          { subject: \"english\", score: 85 },\r\n          { subject: \"math\", score: 50 },\r\n          { subject: \"science\", score: 62 },\r\n          { subject: \"geography\", score: 61 },\r\n          { subject: \"history\", score: 90 },\r\n       ],\r\n    },\r\n ];\r\n \r\n const semester3 = [\r\n    {\r\n       name: \"Jimmy\",\r\n       scores: [\r\n          { subject: \"english\", score: 80 },\r\n          { subject: \"math\", score: 91 },\r\n          { subject: \"science\", score: 46 },\r\n          { subject: \"geography\", score: 93 },\r\n          { subject: \"history\", score: 60 },\r\n       ],\r\n    },\r\n    {\r\n       name: \"carl\",\r\n       scores: [\r\n          { subject: \"english\", score: 98 },\r\n          { subject: \"math\", score: 65 },\r\n          { subject: \"science\", score: 98 },\r\n          { subject: \"geography\", score: 42 },\r\n          { subject: \"history\", score: 85 },\r\n       ],\r\n    },\r\n    {\r\n       name: \"billy\",\r\n       scores: [\r\n          { subject: \"english\", score: 74 },\r\n          { subject: \"math\", score: 48 },\r\n          { subject: \"science\", score: 41 },\r\n          { subject: \"geography\", score: 78 },\r\n          { subject: \"history\", score: 70 },\r\n       ],\r\n    },\r\n    {\r\n       name: \"andrew\",\r\n       scores: [\r\n          { subject: \"english\", score: 68 },\r\n          { subject: \"math\", score: 53 },\r\n          { subject: \"science\", score: 67 },\r\n          { subject: \"geography\", score: 73 },\r\n          { subject: \"history\", score: 82 },\r\n       ],\r\n    },\r\n    {\r\n       name: \"keith\",\r\n       scores: [\r\n          { subject: \"english\", score: 44 },\r\n          { subject: \"math\", score: 41 },\r\n          { subject: \"science\", score: 72 },\r\n          { subject: \"geography\", score: 36 },\r\n          { subject: \"history\", score: 68 },\r\n       ],\r\n    },\r\n ];\r\n \r\n const calculateSemesters = () => {\r\n   // your code here\r\n};\r\n\r\n \r\n console.log(calculate(semester1));\r\n /**\r\n  * \r\n  * [\r\n  { name: 'carl', score: 321 }, \r\n  { name: 'Jimmy', score: 319 },\r\n  { name: 'billy', score: 284 },\r\n  { name: 'keith', score: 281 },\r\n  { name: 'andrew', score: 264 }\r\n]\r\n  */\r\n\r\n\r\nconsole.log(calculate(semester1, semester2));\r\n/**\r\n * \r\n  { name: 'carl', score: 365 }, \r\n  { name: 'keith', score: 315 },\r\n  { name: 'Jimmy', score: 290 },\r\n  { name: 'billy', score: 290 },\r\n  { name: 'andrew', score: 259 }\r\n]\r\n */\r\n\r\nconsole.log(calculate(semester1, semester2, semester3));\r\n/**\r\n * [\r\n  { name: 'carl', score: 373 }, \r\n  { name: 'Jimmy', score: 317 },\r\n  { name: 'billy', score: 297 },\r\n  { name: 'keith', score: 297 },\r\n  { name: 'andrew', score: 287 }\r\n]\r\n */\r\n "
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Add an integer to an array-form integer - EASY\r\n\r\nကိုယ်တိုင် ကြုံခဲ့ရတဲ့ interview question လေးပါ။\r\n\r\nဒါပေမယ့် easy လို့ပြောထားတာက algorithm ကျကျကြီးရေးစရာ မလိုဘူးလို့ဆိုလိုတာပါ။ တကယ့် interview မှာလို ဘာမသုံးရ ညာမသုံးရလို့မကန့်သတ်ထားတာကိုဆိုလိုတာပါ။\r\n\r\narray တစ်ခုကို integer တစ်ခုလို့မြင်လိုက်ပါ။\r\n\r\narray = [1,2,4] -> 124\r\n\r\nဆိုတော့ သူ့ကို နောက်ဂဏန်း ၁ ခုနဲ့ပေါင်းလိုက်ရင် ဖြစ်သွားမယ့် ဂဏန်းပုံကို array အတိုင်းလိုချင်တာပါ။"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const array1 = [1, 3];\r\nconst array2 = [1, 9];\r\nconst array3 = [9, 9];\r\nconst array4 = [9, 9, 9];\r\n\r\nfunction addArrayFormInteger() {\r\n   // your code here\r\n}\r\n\r\nconsole.log(addArrayFormInteger(array1, 35)); // [4,8] -> 13+35=48\r\nconsole.log(addArrayFormInteger(array2, 1)); // [2,0] -> 19+1=20\r\nconsole.log(addArrayFormInteger(array2, 2)); // [2,1] -> 19+2=21\r\nconsole.log(addArrayFormInteger(array3, 1)); // [1,0,0] \r\nconsole.log(addArrayFormInteger(array4, 1)); // [1,0,0,0]"
            ],
            "outputs": []
        }
    ]
}