{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "\r\n<h1 align=\"center\"> <b> Coding Challenge Answers <b></h1> \r\n\r\n### [Get a maximum and minimum number in an array](#maximum--minimum-number-in-an-array) ðŸŒ¶\r\n### [Swap two elements](#swap-two-indexes-from-an-array) ðŸŒ¶\r\n### [Get a nth of factorial](#nth-factorial) ðŸŒ¶\r\n### [Build a multiplication table for a given number and range](#multiplication-table) ðŸŒ¶\r\n### [Sum up](#sum-up) ðŸŒ¶\r\n### [Is Prime](#is-prime-number) ðŸŒ¶\r\n### [Add to array and increase](#add-to-array-and-increase) ðŸŒ¶ðŸŒ¶\r\n### [Count the number of occurrence of a given string](#count-occurrence-of-a-string) ðŸŒ¶\r\n### [Longest word in a string](#longest-word)\r\n### [Prettify an ugly string](#prettify-an-ugly-string-ðŸŒ¶) ðŸŒ¶ðŸŒ¶\r\n### [How many Prime numbers](#how-many-prime-numbers-below-the-given-prime-number) ðŸŒ¶ðŸŒ¶ðŸŒ¶\r\n### [Combine duplicates](#combine-duplicates) ðŸŒ¶ðŸŒ¶\r\n### [Top 3 highest income job](#highest-income-professions-by-year) ðŸŒ¶ðŸŒ¶\r\n### [Remove if grater than n](#remove-grater-than) ðŸŒ¶ðŸŒ¶\r\n### [Custom filter callback](#custom-filter-callback) ðŸŒ¶ðŸŒ¶\r\n### [Palindrome using regex](#palindrome-using-regex-ðŸŒ¶ðŸŒ¶) ðŸŒ¶ðŸŒ¶\r\n### [Array sum max](#maximum-sum-of-an-array) ðŸŒ¶ðŸŒ¶\r\n### [Students scores after semesters](#average-scores-of-each-student-after-3-semesters) ðŸŒ¶ðŸŒ¶ðŸŒ¶\r\n### [Exam results](#exam-results) ðŸŒ¶ðŸŒ¶ðŸŒ¶\r\n### [array-form integer - easy](#add-an-integer-to-an-array-form-integer---easy) ðŸŒ¶ðŸŒ¶\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Maximum & Minimum number in an array"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const minmaxNumberInAnArray = (array) => {\r\n   if (!Array.isArray(array)) return null;\r\n\r\n   let maximumNumber = 0;\r\n   let minimumNumber = array[0];\r\n\r\n   for (const number of array) {\r\n      maximumNumber = Math.max(maximumNumber, number);\r\n      minimumNumber = Math.min(minimumNumber, number);\r\n   }\r\n\r\n   return {\r\n      max: array.indexOf(maximumNumber),\r\n      min: array.indexOf(minimumNumber),\r\n   };\r\n};"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Swap two indexes from an array"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const swapIndex = (array, index1, index2) => {\r\n   if (\r\n      index1 >= array.length ||\r\n      index1 < 0 ||\r\n      index2 >= array.length ||\r\n      index2 < 0\r\n   )\r\n      return array;\r\n   [array[index1], array[index2]] = [array[index2], array[index1]];\r\n   return array;\r\n};"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Is prime number"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const isPrimeNumber = (num) => {\r\n   if (typeof num !== \"number\") return null;\r\n\r\n   let res = true;\r\n   for (let index = 2; index < num; index++) {\r\n      if (num % index === 0) {\r\n         res = false;\r\n         break;\r\n      }\r\n   }\r\n   return res;\r\n};"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# nth factorial"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const nFactorial = (num) => {\r\n   if (typeof num !== \"number\") return null;\r\n   let result = 1;\r\n   for (let index = 1; index <= num; index++) {\r\n      result *= index;\r\n   }\r\n\r\n   return result;\r\n};"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "6",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# Multiplication table"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const multiplicationTable = (numberToMultiply, range = 12) => {\r\n   if (numberToMultiply <= 0) return null;\r\n\r\n   const table = {};\r\n\r\n   for (let i = 1; i <= range; i++) {\r\n      table[`${[numberToMultiply]} x ${i}`] = i * numberToMultiply;\r\n   }\r\n\r\n   return table;\r\n};"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# Count occurrence of a string"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const countOccurrence = (string, searchString) => {\r\n    const searchPattern = new RegExp(searchString, \"ig\");\r\n    return string.match(searchPattern)\r\n       ? string.match(searchPattern).length\r\n       : null;\r\n };"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# sum up"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const sumUp = (...numbers) => {\r\n   let sum = 0;\r\n   for (let index = 0; index < numbers.length; index++) {\r\n      if (typeof numbers[index] !== \"number\") return null;\r\n\r\n      sum += numbers[index];\r\n   }\r\n   return sum;\r\n};\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Longest word"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const longestWord = (string) => {\r\n      if (typeof string !== \"string\") return null;\r\n      let longest = 0;\r\n      let resultString = [];\r\n      for (const str of string.split(\" \")) {\r\n         longest = Math.max(longest, str.length);\r\n         if (str.length === longest) resultString = str;\r\n      }\r\n   \r\n      return { length: longest, string: resultString };\r\n};"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# String prettier"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "function stringPrettier(string) {\r\n   if (typeof string !== \"string\") return null;\r\n   const regex = /\\S+/g;\r\n   return string.match(regex).join(\" \").replace(/\\W+/g, \" \").trim() + \".\";\r\n}"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# Check if a string is a palindrome"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "function isPalindrome(string) {\r\n   if (typeof string !== \"string\") return null;\r\n\r\n   return (\r\n      string.replace(/\\s+|\\W+/g, \"\").toLowerCase() ===\r\n      string\r\n         .split(\"\")\r\n         .reverse()\r\n         .join(\"\")\r\n         .replace(/\\s+|\\W+/g, \"\")\r\n         .toLowerCase()\r\n   );\r\n}"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# remove if grater than n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const removeIfGreaterThan = (input, number) => {\r\n   if (!Array.isArray(input) || typeof number !== \"number\") return null;\r\n   for (let i = input.length - 1; i >= 0; i--) {\r\n      if (input[i] > number) {\r\n         input.splice(i, 1);\r\n      }\r\n   }\r\n\r\n   return input;\r\n};"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Add to array and increase"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "function addToArrayAndIncrease(array, newItem) {\r\n   const index = array.map((i) => i.item).indexOf(newItem.toLowerCase());\r\n   if (index >= 0) {\r\n      array[index].qty += 1;\r\n   } else {\r\n      array.unshift({ item: newItem.toLowerCase(), qty: 1 });\r\n   }\r\n\r\n   return array;\r\n}"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Combine duplicates "
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const combineDuplicates = (duplicates) => {\r\n   if (!Array.isArray(duplicates)) return null;\r\n   const tempStore = {};\r\n\r\n   for (const element of duplicates) {\r\n      if (tempStore[element.item]) {\r\n         tempStore[element.item] += element.quantity;\r\n      } else {\r\n         tempStore[element.item] = element.quantity;\r\n      }\r\n   }\r\n\r\n   return tempStore;\r\n};"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# How many prime numbers below the given prime number"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "function howManyPrime(number) {\r\n   if (typeof number !== \"number\") return;\r\n   null;\r\n   let primeNumbers = [];\r\n   if (number <= 2) return 2;\r\n   for (let i = 2; i < number; i++) {\r\n      let isPrime = true;\r\n      if (number % i === 0) return null;\r\n      for (let j = 2; j < i; j++) {\r\n         if (i % j === 0) {\r\n            isPrime = false;\r\n            break;\r\n         }\r\n      }\r\n      if (isPrime) primeNumbers.push(i);\r\n   }\r\n\r\n   return primeNumbers;\r\n}"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Custom filter callback"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "function higherOrderFilter(numbers, cb) {\r\n   if (!Array.isArray(numbers) || typeof cb !== \"function\") return null;\r\n   let returnValues = [];\r\n   for (let index = 0; index < numbers.length; index++) {\r\n      if (cb(numbers[index])) {\r\n         returnValues.push(numbers[index]);\r\n      }\r\n   }\r\n\r\n   return returnValues;\r\n}\r\nconst numbers = [3, 4, 5, 6, 7, 8, 12, 19, 22, 33];\r\n\r\nfunction greaterThan(num) {\r\n   if (num > 5) return num;\r\n}\r\n\r\nfunction evenNumbers(num) {\r\n   if (num % 2 === 0) return num;\r\n}\r\n\r\nhigherOrderFilter(numbers, greaterThan);\r\nhigherOrderFilter(numbers, evenNumbers);"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Maximum sum of an array"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "function maxSumArray(array) {\r\n   if (!Array.isArray(array)) return null;\r\n   let maximumNumber = 0;\r\n   for (const number of array) {\r\n      maximumNumber = Math.max(maximumNumber, number);\r\n   }\r\n\r\n   let sum = 0;\r\n\r\n   for (let index = 0; index < array.length; index++) {\r\n      if (array[index] === maximumNumber) continue;\r\n\r\n      sum += array[index];\r\n   }\r\n\r\n   return sum === maximumNumber;\r\n}"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Highest income professions by year\r\n\r\nPlease use only this data."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "function filterByYear(people, year) {\r\n   if (!Array.isArray(people) || year === undefined) return null;\r\n\r\n   const result = [];\r\n\r\n   for (let index = 0; index < people.length; index++) {\r\n      if (!people[index].avgIncome.find((y) => y.year === year)) return null;\r\n      const res = {\r\n         profession: people[index].profession,\r\n         income: people[index].avgIncome.find((y) => y.year === year).income,\r\n      };\r\n\r\n      result.push(res);\r\n   }\r\n\r\n   result.sort((a, b) => {\r\n      if (a.income < b.income) {\r\n         return 1;\r\n      } else if (a.income > b.income) {\r\n         return -1;\r\n      } else {\r\n         return 0;\r\n      }\r\n   });\r\n\r\n   return result;\r\n}"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Exam results\r\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "function examResult(...arrays) {\r\n   const result = arrays.flat().reduce((prev, cur) => {\r\n      const { name, ...scores } = cur;\r\n\r\n      prev[name] = prev[name] || {};\r\n\r\n      Object.entries(scores).forEach(([key, value]) => {\r\n         if (prev[name][key]) {\r\n            prev[name][key] = prev[name][key] + value;\r\n         } else {\r\n            prev[name][key] = value === 0 ? 0 : value;\r\n         }\r\n      });\r\n\r\n      return prev;\r\n   }, {});\r\n\r\n   return result;\r\n}"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Average scores of each student after 3 semesters"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const semester1 = [\r\n    {\r\n       name: \"Jimmy\",\r\n       scores: [\r\n          { subject: \"english\", score: 44 },\r\n          { subject: \"math\", score: 43 },\r\n          { subject: \"science\", score: 78 },\r\n          { subject: \"geography\", score: 82 },\r\n          { subject: \"history\", score: 72 },\r\n       ],\r\n    },\r\n    {\r\n       name: \"carl\",\r\n       scores: [\r\n          { subject: \"english\", score: 37 },\r\n          { subject: \"math\", score: 80 },\r\n          { subject: \"science\", score: 91 },\r\n          { subject: \"geography\", score: 47 },\r\n          { subject: \"history\", score: 66 },\r\n       ],\r\n    },\r\n    {\r\n       name: \"billy\",\r\n       scores: [\r\n          { subject: \"english\", score: 43 },\r\n          { subject: \"math\", score: 37 },\r\n          { subject: \"science\", score: 41 },\r\n          { subject: \"geography\", score: 87 },\r\n          { subject: \"history\", score: 76 },\r\n       ],\r\n    },\r\n    {\r\n       name: \"andrew\",\r\n       scores: [\r\n          { subject: \"english\", score: 63 },\r\n          { subject: \"math\", score: 28 },\r\n          { subject: \"science\", score: 61 },\r\n          { subject: \"geography\", score: 63 },\r\n          { subject: \"history\", score: 49 },\r\n       ],\r\n    },\r\n    {\r\n       name: \"keith\",\r\n       scores: [\r\n          { subject: \"english\", score: 33 },\r\n          { subject: \"math\", score: 76 },\r\n          { subject: \"science\", score: 53 },\r\n          { subject: \"geography\", score: 71 },\r\n          { subject: \"history\", score: 48 },\r\n       ],\r\n    },\r\n ];\r\n \r\n const semester2 = [\r\n    {\r\n       name: \"Jimmy\",\r\n       scores: [\r\n          { subject: \"english\", score: 44 },\r\n          { subject: \"math\", score: 60 },\r\n          { subject: \"science\", score: 44 },\r\n          { subject: \"geography\", score: 69 },\r\n          { subject: \"history\", score: 44 },\r\n       ],\r\n    },\r\n    {\r\n       name: \"carl\",\r\n       scores: [\r\n          { subject: \"english\", score: 69 },\r\n          { subject: \"math\", score: 76 },\r\n          { subject: \"science\", score: 79 },\r\n          { subject: \"geography\", score: 97 },\r\n          { subject: \"history\", score: 88 },\r\n       ],\r\n    },\r\n    {\r\n       name: \"billy\",\r\n       scores: [\r\n          { subject: \"english\", score: 85 },\r\n          { subject: \"math\", score: 47 },\r\n          { subject: \"science\", score: 47 },\r\n          { subject: \"geography\", score: 54 },\r\n          { subject: \"history\", score: 62 },\r\n       ],\r\n    },\r\n    {\r\n       name: \"andrew\",\r\n       scores: [\r\n          { subject: \"english\", score: 50 },\r\n          { subject: \"math\", score: 44 },\r\n          { subject: \"science\", score: 41 },\r\n          { subject: \"geography\", score: 75 },\r\n          { subject: \"history\", score: 44 },\r\n       ],\r\n    },\r\n    {\r\n       name: \"keith\",\r\n       scores: [\r\n          { subject: \"english\", score: 85 },\r\n          { subject: \"math\", score: 50 },\r\n          { subject: \"science\", score: 62 },\r\n          { subject: \"geography\", score: 61 },\r\n          { subject: \"history\", score: 90 },\r\n       ],\r\n    },\r\n ];\r\n \r\n const semester3 = [\r\n    {\r\n       name: \"Jimmy\",\r\n       scores: [\r\n          { subject: \"english\", score: 80 },\r\n          { subject: \"math\", score: 91 },\r\n          { subject: \"science\", score: 46 },\r\n          { subject: \"geography\", score: 93 },\r\n          { subject: \"history\", score: 60 },\r\n       ],\r\n    },\r\n    {\r\n       name: \"carl\",\r\n       scores: [\r\n          { subject: \"english\", score: 98 },\r\n          { subject: \"math\", score: 65 },\r\n          { subject: \"science\", score: 98 },\r\n          { subject: \"geography\", score: 42 },\r\n          { subject: \"history\", score: 85 },\r\n       ],\r\n    },\r\n    {\r\n       name: \"billy\",\r\n       scores: [\r\n          { subject: \"english\", score: 74 },\r\n          { subject: \"math\", score: 48 },\r\n          { subject: \"science\", score: 41 },\r\n          { subject: \"geography\", score: 78 },\r\n          { subject: \"history\", score: 70 },\r\n       ],\r\n    },\r\n    {\r\n       name: \"andrew\",\r\n       scores: [\r\n          { subject: \"english\", score: 68 },\r\n          { subject: \"math\", score: 53 },\r\n          { subject: \"science\", score: 67 },\r\n          { subject: \"geography\", score: 73 },\r\n          { subject: \"history\", score: 82 },\r\n       ],\r\n    },\r\n    {\r\n       name: \"keith\",\r\n       scores: [\r\n          { subject: \"english\", score: 44 },\r\n          { subject: \"math\", score: 41 },\r\n          { subject: \"science\", score: 72 },\r\n          { subject: \"geography\", score: 36 },\r\n          { subject: \"history\", score: 68 },\r\n       ],\r\n    },\r\n ];\r\n \r\n const calculateSemesters = (...semesters) => {\r\n\r\n   // flat is used here because rest operator is showing an empty array [[]] inside.\r\n   // if not you won't be able to check an empty array\r\n   if (!Array.isArray(semesters) || semesters.flat().length <= 0) return null;\r\n\r\n   const array = [];\r\n   semesters.forEach((semester) => {\r\n      semester.forEach((student) => {\r\n         array.push({\r\n            name: student.name,\r\n            score: student.scores.reduce((prev, cur) => prev + cur.score, 0),\r\n         });\r\n      });\r\n   });\r\n\r\n   const totalScores = {};\r\n\r\n   array.forEach((student) => {\r\n      if (totalScores[student.name]) {\r\n         totalScores[student.name] += student.score;\r\n      } else {\r\n         totalScores[student.name] = student.score;\r\n      }\r\n   });\r\n\r\n   const results = Object.entries(totalScores)\r\n      .map(([key, value]) => ({\r\n         name: key,\r\n         score: Math.ceil(value / semesters.length),\r\n      }))\r\n      .sort((a, b) => b.score - a.score);\r\n\r\n   return results;\r\n};"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Add an integer to an array-form integer - EASY"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const array1 = [1, 3];\r\nconst array2 = [1, 9];\r\nconst array3 = [9, 9];\r\nconst array4 = [9, 9, 9];\r\n\r\nfunction addArrayFormInteger(array, num) {\r\n   if (typeof num !== \"number\") return null;\r\n   for (const number of array) {\r\n      if (typeof number !== \"number\") return null;\r\n   }\r\n\r\n   const number = parseInt(array.join(\"\")) + num + \"\";\r\n\r\n   return number.split(\"\").map((n) => parseInt(n));\r\n}"
            ],
            "outputs": []
        }
    ]
}